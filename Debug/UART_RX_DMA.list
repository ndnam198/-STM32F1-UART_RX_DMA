
UART_RX_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003464  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003570  08003570  00013570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800360c  0800360c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800360c  0800360c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800360c  0800360c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800360c  0800360c  0001360c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003610  08003610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000070  08003684  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08003684  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd24  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d30  00000000  00000000  0002bdbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf0  00000000  00000000  0002daf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af8  00000000  00000000  0002e6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014b45  00000000  00000000  0002f1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aa97  00000000  00000000  00043d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072516  00000000  00000000  0004e7b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c0cca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003414  00000000  00000000  000c0d48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003558 	.word	0x08003558

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003558 	.word	0x08003558

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800015e:	b08f      	sub	sp, #60	; 0x3c
 8000160:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fccb 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f8e7 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f9a5 	bl	80004b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800016e:	f000 f97d 	bl	800046c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000172:	f000 f927 	bl	80003c4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000176:	f000 f94f 	bl	8000418 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  offAllLed;
 800017a:	2201      	movs	r2, #1
 800017c:	2120      	movs	r1, #32
 800017e:	4863      	ldr	r0, [pc, #396]	; (800030c <main+0x1b0>)
 8000180:	f001 f9ae 	bl	80014e0 <HAL_GPIO_WritePin>
 8000184:	2201      	movs	r2, #1
 8000186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800018a:	4861      	ldr	r0, [pc, #388]	; (8000310 <main+0x1b4>)
 800018c:	f001 f9a8 	bl	80014e0 <HAL_GPIO_WritePin>
 8000190:	2201      	movs	r2, #1
 8000192:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000196:	485e      	ldr	r0, [pc, #376]	; (8000310 <main+0x1b4>)
 8000198:	f001 f9a2 	bl	80014e0 <HAL_GPIO_WritePin>
 800019c:	2201      	movs	r2, #1
 800019e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a2:	485a      	ldr	r0, [pc, #360]	; (800030c <main+0x1b0>)
 80001a4:	f001 f99c 	bl	80014e0 <HAL_GPIO_WritePin>
//  HAL_UART_Receive_DMA(&huart3, (uint8_t *)&receive_data, 1);
  HAL_UART_Receive_DMA(&huart2, (uint8_t *)ucRxBuffer, defineUART_RX_BUFFER_LENGTH);
 80001a8:	2264      	movs	r2, #100	; 0x64
 80001aa:	495a      	ldr	r1, [pc, #360]	; (8000314 <main+0x1b8>)
 80001ac:	485a      	ldr	r0, [pc, #360]	; (8000318 <main+0x1bc>)
 80001ae:	f002 f913 	bl	80023d8 <HAL_UART_Receive_DMA>
  ucBufferLen = strlen((char*) ucRxBuffer);
 80001b2:	4858      	ldr	r0, [pc, #352]	; (8000314 <main+0x1b8>)
 80001b4:	f7ff ffca 	bl	800014c <strlen>
 80001b8:	4603      	mov	r3, r0
 80001ba:	b2da      	uxtb	r2, r3
 80001bc:	4b57      	ldr	r3, [pc, #348]	; (800031c <main+0x1c0>)
 80001be:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */
//    HAL_UART_Transmit_IT(&huart2, (uint8_t *)&send_data, 1);
//    HAL_Delay(1000);
//    send_data++;
	  ucTemp = strlen((char*) ucRxBuffer);
 80001c0:	4854      	ldr	r0, [pc, #336]	; (8000314 <main+0x1b8>)
 80001c2:	f7ff ffc3 	bl	800014c <strlen>
 80001c6:	4603      	mov	r3, r0
 80001c8:	b2da      	uxtb	r2, r3
 80001ca:	4b55      	ldr	r3, [pc, #340]	; (8000320 <main+0x1c4>)
 80001cc:	701a      	strb	r2, [r3, #0]
	  if(ucTemp > 100){
 80001ce:	4b54      	ldr	r3, [pc, #336]	; (8000320 <main+0x1c4>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	2b64      	cmp	r3, #100	; 0x64
 80001d4:	d907      	bls.n	80001e6 <main+0x8a>
		  memset(ucRxBuffer, 0, defineUART_RX_BUFFER_LENGTH);
 80001d6:	2264      	movs	r2, #100	; 0x64
 80001d8:	2100      	movs	r1, #0
 80001da:	484e      	ldr	r0, [pc, #312]	; (8000314 <main+0x1b8>)
 80001dc:	f002 fda2 	bl	8002d24 <memset>
		  ucTemp = 0;
 80001e0:	4b4f      	ldr	r3, [pc, #316]	; (8000320 <main+0x1c4>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	701a      	strb	r2, [r3, #0]
	  }
	  if(ucTemp > ucBufferLen){
 80001e6:	4b4e      	ldr	r3, [pc, #312]	; (8000320 <main+0x1c4>)
 80001e8:	781a      	ldrb	r2, [r3, #0]
 80001ea:	4b4c      	ldr	r3, [pc, #304]	; (800031c <main+0x1c0>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d943      	bls.n	800027a <main+0x11e>
		  vUARTSend(huart2, (uint8_t *)"\r\nReceive a string from UART2: \r\n");
 80001f2:	4e49      	ldr	r6, [pc, #292]	; (8000318 <main+0x1bc>)
 80001f4:	4b4b      	ldr	r3, [pc, #300]	; (8000324 <main+0x1c8>)
 80001f6:	930c      	str	r3, [sp, #48]	; 0x30
 80001f8:	466d      	mov	r5, sp
 80001fa:	f106 0410 	add.w	r4, r6, #16
 80001fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000206:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800020a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800020e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000212:	f000 f9ed 	bl	80005f0 <vUARTSend>
		  vUARTSend(huart2, ucRxBuffer+ucBufferLen);
 8000216:	4b41      	ldr	r3, [pc, #260]	; (800031c <main+0x1c0>)
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	461a      	mov	r2, r3
 800021c:	4b3d      	ldr	r3, [pc, #244]	; (8000314 <main+0x1b8>)
 800021e:	4413      	add	r3, r2
 8000220:	4e3d      	ldr	r6, [pc, #244]	; (8000318 <main+0x1bc>)
 8000222:	930c      	str	r3, [sp, #48]	; 0x30
 8000224:	466d      	mov	r5, sp
 8000226:	f106 0410 	add.w	r4, r6, #16
 800022a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800022c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800022e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000232:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000236:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800023a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800023e:	f000 f9d7 	bl	80005f0 <vUARTSend>
		  vUARTSend(huart2, (uint8_t *)"\r\n\r\n");
 8000242:	4e35      	ldr	r6, [pc, #212]	; (8000318 <main+0x1bc>)
 8000244:	4b38      	ldr	r3, [pc, #224]	; (8000328 <main+0x1cc>)
 8000246:	930c      	str	r3, [sp, #48]	; 0x30
 8000248:	466d      	mov	r5, sp
 800024a:	f106 0410 	add.w	r4, r6, #16
 800024e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000256:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800025a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800025e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000262:	f000 f9c5 	bl	80005f0 <vUARTSend>

		  ucBufferLen = ucTemp;
 8000266:	4b2e      	ldr	r3, [pc, #184]	; (8000320 <main+0x1c4>)
 8000268:	781a      	ldrb	r2, [r3, #0]
 800026a:	4b2c      	ldr	r3, [pc, #176]	; (800031c <main+0x1c0>)
 800026c:	701a      	strb	r2, [r3, #0]
		  toggleLed2;
 800026e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000272:	4827      	ldr	r0, [pc, #156]	; (8000310 <main+0x1b4>)
 8000274:	f001 f94c 	bl	8001510 <HAL_GPIO_TogglePin>
 8000278:	e02e      	b.n	80002d8 <main+0x17c>
	  }
	  else if(ucTemp < ucBufferLen){
 800027a:	4b29      	ldr	r3, [pc, #164]	; (8000320 <main+0x1c4>)
 800027c:	781a      	ldrb	r2, [r3, #0]
 800027e:	4b27      	ldr	r3, [pc, #156]	; (800031c <main+0x1c0>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	429a      	cmp	r2, r3
 8000284:	d228      	bcs.n	80002d8 <main+0x17c>
		  vUARTSend(huart2, (uint8_t *)"\r\nReceive a string from UART2: \r\n");
 8000286:	4e24      	ldr	r6, [pc, #144]	; (8000318 <main+0x1bc>)
 8000288:	4b26      	ldr	r3, [pc, #152]	; (8000324 <main+0x1c8>)
 800028a:	930c      	str	r3, [sp, #48]	; 0x30
 800028c:	466d      	mov	r5, sp
 800028e:	f106 0410 	add.w	r4, r6, #16
 8000292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800029a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800029e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80002a2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80002a6:	f000 f9a3 	bl	80005f0 <vUARTSend>
		  sprintf(ucGeneralString, "\"%s%s\"\r\n", ucRxBuffer+ucBufferLen, ucRxBuffer+ucTemp);
 80002aa:	4b1c      	ldr	r3, [pc, #112]	; (800031c <main+0x1c0>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	461a      	mov	r2, r3
 80002b0:	4b18      	ldr	r3, [pc, #96]	; (8000314 <main+0x1b8>)
 80002b2:	441a      	add	r2, r3
 80002b4:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <main+0x1c4>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	4619      	mov	r1, r3
 80002ba:	4b16      	ldr	r3, [pc, #88]	; (8000314 <main+0x1b8>)
 80002bc:	440b      	add	r3, r1
 80002be:	491b      	ldr	r1, [pc, #108]	; (800032c <main+0x1d0>)
 80002c0:	481b      	ldr	r0, [pc, #108]	; (8000330 <main+0x1d4>)
 80002c2:	f002 fd37 	bl	8002d34 <siprintf>
		  ucBufferLen = ucTemp;
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <main+0x1c4>)
 80002c8:	781a      	ldrb	r2, [r3, #0]
 80002ca:	4b14      	ldr	r3, [pc, #80]	; (800031c <main+0x1c0>)
 80002cc:	701a      	strb	r2, [r3, #0]
		  toggleLed3;
 80002ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002d2:	480f      	ldr	r0, [pc, #60]	; (8000310 <main+0x1b4>)
 80002d4:	f001 f91c 	bl	8001510 <HAL_GPIO_TogglePin>
	  }

	  vUARTSend(huart2, (uint8_t *)"*");
 80002d8:	4e0f      	ldr	r6, [pc, #60]	; (8000318 <main+0x1bc>)
 80002da:	4b16      	ldr	r3, [pc, #88]	; (8000334 <main+0x1d8>)
 80002dc:	930c      	str	r3, [sp, #48]	; 0x30
 80002de:	466d      	mov	r5, sp
 80002e0:	f106 0410 	add.w	r4, r6, #16
 80002e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002f0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80002f4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80002f8:	f000 f97a 	bl	80005f0 <vUARTSend>
	  toggleLed1;
 80002fc:	2120      	movs	r1, #32
 80002fe:	4803      	ldr	r0, [pc, #12]	; (800030c <main+0x1b0>)
 8000300:	f001 f906 	bl	8001510 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000304:	20c8      	movs	r0, #200	; 0xc8
 8000306:	f000 fc2b 	bl	8000b60 <HAL_Delay>
	  ucTemp = strlen((char*) ucRxBuffer);
 800030a:	e759      	b.n	80001c0 <main+0x64>
 800030c:	40010c00 	.word	0x40010c00
 8000310:	40010800 	.word	0x40010800
 8000314:	20000098 	.word	0x20000098
 8000318:	20000290 	.word	0x20000290
 800031c:	2000028c 	.word	0x2000028c
 8000320:	2000028d 	.word	0x2000028d
 8000324:	08003570 	.word	0x08003570
 8000328:	08003594 	.word	0x08003594
 800032c:	0800359c 	.word	0x0800359c
 8000330:	200001c4 	.word	0x200001c4
 8000334:	080035a8 	.word	0x080035a8

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b090      	sub	sp, #64	; 0x40
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0318 	add.w	r3, r7, #24
 8000342:	2228      	movs	r2, #40	; 0x28
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f002 fcec 	bl	8002d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800035a:	2301      	movs	r3, #1
 800035c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800035e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000362:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000368:	2301      	movs	r3, #1
 800036a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036c:	2302      	movs	r3, #2
 800036e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000374:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000376:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800037a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037c:	f107 0318 	add.w	r3, r7, #24
 8000380:	4618      	mov	r0, r3
 8000382:	f001 f8ff 	bl	8001584 <HAL_RCC_OscConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800038c:	f000 f92a 	bl	80005e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000390:	230f      	movs	r3, #15
 8000392:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000394:	2302      	movs	r3, #2
 8000396:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2102      	movs	r1, #2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 fb6a 	bl	8001a84 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003b6:	f000 f915 	bl	80005e4 <Error_Handler>
  }
}
 80003ba:	bf00      	nop
 80003bc:	3740      	adds	r7, #64	; 0x40
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c8:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_USART2_UART_Init+0x4c>)
 80003ca:	4a12      	ldr	r2, [pc, #72]	; (8000414 <MX_USART2_UART_Init+0x50>)
 80003cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <MX_USART2_UART_Init+0x4c>)
 80003d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_USART2_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_USART2_UART_Init+0x4c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <MX_USART2_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_USART2_UART_Init+0x4c>)
 80003ea:	220c      	movs	r2, #12
 80003ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <MX_USART2_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_USART2_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003fa:	4805      	ldr	r0, [pc, #20]	; (8000410 <MX_USART2_UART_Init+0x4c>)
 80003fc:	f001 ff06 	bl	800220c <HAL_UART_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000406:	f000 f8ed 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000290 	.word	0x20000290
 8000414:	40004400 	.word	0x40004400

08000418 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800041c:	4b11      	ldr	r3, [pc, #68]	; (8000464 <MX_USART3_UART_Init+0x4c>)
 800041e:	4a12      	ldr	r2, [pc, #72]	; (8000468 <MX_USART3_UART_Init+0x50>)
 8000420:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000422:	4b10      	ldr	r3, [pc, #64]	; (8000464 <MX_USART3_UART_Init+0x4c>)
 8000424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000428:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <MX_USART3_UART_Init+0x4c>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <MX_USART3_UART_Init+0x4c>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <MX_USART3_UART_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800043c:	4b09      	ldr	r3, [pc, #36]	; (8000464 <MX_USART3_UART_Init+0x4c>)
 800043e:	220c      	movs	r2, #12
 8000440:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000442:	4b08      	ldr	r3, [pc, #32]	; (8000464 <MX_USART3_UART_Init+0x4c>)
 8000444:	2200      	movs	r2, #0
 8000446:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <MX_USART3_UART_Init+0x4c>)
 800044a:	2200      	movs	r2, #0
 800044c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800044e:	4805      	ldr	r0, [pc, #20]	; (8000464 <MX_USART3_UART_Init+0x4c>)
 8000450:	f001 fedc 	bl	800220c <HAL_UART_Init>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800045a:	f000 f8c3 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000184 	.word	0x20000184
 8000468:	40004800 	.word	0x40004800

0800046c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000472:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <MX_DMA_Init+0x48>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a0f      	ldr	r2, [pc, #60]	; (80004b4 <MX_DMA_Init+0x48>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b0d      	ldr	r3, [pc, #52]	; (80004b4 <MX_DMA_Init+0x48>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	200d      	movs	r0, #13
 8000490:	f000 fc3d 	bl	8000d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000494:	200d      	movs	r0, #13
 8000496:	f000 fc56 	bl	8000d46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2100      	movs	r1, #0
 800049e:	2010      	movs	r0, #16
 80004a0:	f000 fc35 	bl	8000d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004a4:	2010      	movs	r0, #16
 80004a6:	f000 fc4e 	bl	8000d46 <HAL_NVIC_EnableIRQ>

}
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000

080004b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004cc:	4b33      	ldr	r3, [pc, #204]	; (800059c <MX_GPIO_Init+0xe4>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a32      	ldr	r2, [pc, #200]	; (800059c <MX_GPIO_Init+0xe4>)
 80004d2:	f043 0320 	orr.w	r3, r3, #32
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b30      	ldr	r3, [pc, #192]	; (800059c <MX_GPIO_Init+0xe4>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0320 	and.w	r3, r3, #32
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e4:	4b2d      	ldr	r3, [pc, #180]	; (800059c <MX_GPIO_Init+0xe4>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a2c      	ldr	r2, [pc, #176]	; (800059c <MX_GPIO_Init+0xe4>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b2a      	ldr	r3, [pc, #168]	; (800059c <MX_GPIO_Init+0xe4>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0304 	and.w	r3, r3, #4
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fc:	4b27      	ldr	r3, [pc, #156]	; (800059c <MX_GPIO_Init+0xe4>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a26      	ldr	r2, [pc, #152]	; (800059c <MX_GPIO_Init+0xe4>)
 8000502:	f043 0308 	orr.w	r3, r3, #8
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b24      	ldr	r3, [pc, #144]	; (800059c <MX_GPIO_Init+0xe4>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0308 	and.w	r3, r3, #8
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_3_Pin|USER_LED_2_Pin, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800051a:	4821      	ldr	r0, [pc, #132]	; (80005a0 <MX_GPIO_Init+0xe8>)
 800051c:	f000 ffe0 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USER_LED_1_Pin|USER_LED_4_Pin, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000526:	481f      	ldr	r0, [pc, #124]	; (80005a4 <MX_GPIO_Init+0xec>)
 8000528:	f000 ffda 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BT_UP_Pin BT_CENTER_Pin BT_DOWN_Pin */
  GPIO_InitStruct.Pin = BT_UP_Pin|BT_CENTER_Pin|BT_DOWN_Pin;
 800052c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000532:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <MX_GPIO_Init+0xf0>)
 8000534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000536:	2301      	movs	r3, #1
 8000538:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	4619      	mov	r1, r3
 8000540:	4817      	ldr	r0, [pc, #92]	; (80005a0 <MX_GPIO_Init+0xe8>)
 8000542:	f000 fe73 	bl	800122c <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_3_Pin USER_LED_2_Pin */
  GPIO_InitStruct.Pin = USER_LED_3_Pin|USER_LED_2_Pin;
 8000546:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800054a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	2301      	movs	r3, #1
 800054e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000554:	2302      	movs	r3, #2
 8000556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4619      	mov	r1, r3
 800055e:	4810      	ldr	r0, [pc, #64]	; (80005a0 <MX_GPIO_Init+0xe8>)
 8000560:	f000 fe64 	bl	800122c <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_1_Pin USER_LED_4_Pin */
  GPIO_InitStruct.Pin = USER_LED_1_Pin|USER_LED_4_Pin;
 8000564:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056a:	2301      	movs	r3, #1
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	2302      	movs	r3, #2
 8000574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	4619      	mov	r1, r3
 800057c:	4809      	ldr	r0, [pc, #36]	; (80005a4 <MX_GPIO_Init+0xec>)
 800057e:	f000 fe55 	bl	800122c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2103      	movs	r1, #3
 8000586:	2017      	movs	r0, #23
 8000588:	f000 fbc1 	bl	8000d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800058c:	2017      	movs	r0, #23
 800058e:	f000 fbda 	bl	8000d46 <HAL_NVIC_EnableIRQ>

}
 8000592:	bf00      	nop
 8000594:	3720      	adds	r7, #32
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000
 80005a0:	40010800 	.word	0x40010800
 80005a4:	40010c00 	.word	0x40010c00
 80005a8:	10210000 	.word	0x10210000

080005ac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
//    HAL_UART_Transmit_IT(&huart3, (uint8_t *)&receive_data, 1);
  }

  if(huart->Instance == huart2.Instance){
  }
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr
	...

080005c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d101      	bne.n	80005d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005d2:	f000 faa9 	bl	8000b28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40000800 	.word	0x40000800

080005e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <vUARTSend>:
#include "myLib.h"

void vUARTSend(UART_HandleTypeDef huart ,uint8_t *String){
 80005f0:	b084      	sub	sp, #16
 80005f2:	b580      	push	{r7, lr}
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	f107 0c08 	add.w	ip, r7, #8
 80005fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart, (uint8_t *)String, strlen((char*)String), defineUART_TX_DELAY);
 80005fe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000600:	f7ff fda4 	bl	800014c <strlen>
 8000604:	4603      	mov	r3, r0
 8000606:	b29a      	uxth	r2, r3
 8000608:	230a      	movs	r3, #10
 800060a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800060c:	f107 0008 	add.w	r0, r7, #8
 8000610:	f001 fe49 	bl	80022a6 <HAL_UART_Transmit>
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800061c:	b004      	add	sp, #16
 800061e:	4770      	bx	lr

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_MspInit+0x5c>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	4a14      	ldr	r2, [pc, #80]	; (800067c <HAL_MspInit+0x5c>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6193      	str	r3, [r2, #24]
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <HAL_MspInit+0x5c>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <HAL_MspInit+0x5c>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <HAL_MspInit+0x5c>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000648:	61d3      	str	r3, [r2, #28]
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <HAL_MspInit+0x5c>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_MspInit+0x60>)
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <HAL_MspInit+0x60>)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000672:	bf00      	nop
 8000674:	3714      	adds	r7, #20
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	40021000 	.word	0x40021000
 8000680:	40010000 	.word	0x40010000

08000684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0318 	add.w	r3, r7, #24
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a65      	ldr	r2, [pc, #404]	; (8000834 <HAL_UART_MspInit+0x1b0>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d15e      	bne.n	8000762 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006a4:	4b64      	ldr	r3, [pc, #400]	; (8000838 <HAL_UART_MspInit+0x1b4>)
 80006a6:	69db      	ldr	r3, [r3, #28]
 80006a8:	4a63      	ldr	r2, [pc, #396]	; (8000838 <HAL_UART_MspInit+0x1b4>)
 80006aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ae:	61d3      	str	r3, [r2, #28]
 80006b0:	4b61      	ldr	r3, [pc, #388]	; (8000838 <HAL_UART_MspInit+0x1b4>)
 80006b2:	69db      	ldr	r3, [r3, #28]
 80006b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	4b5e      	ldr	r3, [pc, #376]	; (8000838 <HAL_UART_MspInit+0x1b4>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a5d      	ldr	r2, [pc, #372]	; (8000838 <HAL_UART_MspInit+0x1b4>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b5b      	ldr	r3, [pc, #364]	; (8000838 <HAL_UART_MspInit+0x1b4>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006d4:	2304      	movs	r3, #4
 80006d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0318 	add.w	r3, r7, #24
 80006e4:	4619      	mov	r1, r3
 80006e6:	4855      	ldr	r0, [pc, #340]	; (800083c <HAL_UART_MspInit+0x1b8>)
 80006e8:	f000 fda0 	bl	800122c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006ec:	2308      	movs	r3, #8
 80006ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 0318 	add.w	r3, r7, #24
 80006fc:	4619      	mov	r1, r3
 80006fe:	484f      	ldr	r0, [pc, #316]	; (800083c <HAL_UART_MspInit+0x1b8>)
 8000700:	f000 fd94 	bl	800122c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000704:	4b4e      	ldr	r3, [pc, #312]	; (8000840 <HAL_UART_MspInit+0x1bc>)
 8000706:	4a4f      	ldr	r2, [pc, #316]	; (8000844 <HAL_UART_MspInit+0x1c0>)
 8000708:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800070a:	4b4d      	ldr	r3, [pc, #308]	; (8000840 <HAL_UART_MspInit+0x1bc>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000710:	4b4b      	ldr	r3, [pc, #300]	; (8000840 <HAL_UART_MspInit+0x1bc>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000716:	4b4a      	ldr	r3, [pc, #296]	; (8000840 <HAL_UART_MspInit+0x1bc>)
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800071c:	4b48      	ldr	r3, [pc, #288]	; (8000840 <HAL_UART_MspInit+0x1bc>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000722:	4b47      	ldr	r3, [pc, #284]	; (8000840 <HAL_UART_MspInit+0x1bc>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000728:	4b45      	ldr	r3, [pc, #276]	; (8000840 <HAL_UART_MspInit+0x1bc>)
 800072a:	2220      	movs	r2, #32
 800072c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800072e:	4b44      	ldr	r3, [pc, #272]	; (8000840 <HAL_UART_MspInit+0x1bc>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000734:	4842      	ldr	r0, [pc, #264]	; (8000840 <HAL_UART_MspInit+0x1bc>)
 8000736:	f000 fb15 	bl	8000d64 <HAL_DMA_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000740:	f7ff ff50 	bl	80005e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a3e      	ldr	r2, [pc, #248]	; (8000840 <HAL_UART_MspInit+0x1bc>)
 8000748:	635a      	str	r2, [r3, #52]	; 0x34
 800074a:	4a3d      	ldr	r2, [pc, #244]	; (8000840 <HAL_UART_MspInit+0x1bc>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	2100      	movs	r1, #0
 8000754:	2026      	movs	r0, #38	; 0x26
 8000756:	f000 fada 	bl	8000d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800075a:	2026      	movs	r0, #38	; 0x26
 800075c:	f000 faf3 	bl	8000d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000760:	e064      	b.n	800082c <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART3)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a38      	ldr	r2, [pc, #224]	; (8000848 <HAL_UART_MspInit+0x1c4>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d15f      	bne.n	800082c <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800076c:	4b32      	ldr	r3, [pc, #200]	; (8000838 <HAL_UART_MspInit+0x1b4>)
 800076e:	69db      	ldr	r3, [r3, #28]
 8000770:	4a31      	ldr	r2, [pc, #196]	; (8000838 <HAL_UART_MspInit+0x1b4>)
 8000772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000776:	61d3      	str	r3, [r2, #28]
 8000778:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <HAL_UART_MspInit+0x1b4>)
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000784:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <HAL_UART_MspInit+0x1b4>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a2b      	ldr	r2, [pc, #172]	; (8000838 <HAL_UART_MspInit+0x1b4>)
 800078a:	f043 0308 	orr.w	r3, r3, #8
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b29      	ldr	r3, [pc, #164]	; (8000838 <HAL_UART_MspInit+0x1b4>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0308 	and.w	r3, r3, #8
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800079c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a6:	2303      	movs	r3, #3
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	f107 0318 	add.w	r3, r7, #24
 80007ae:	4619      	mov	r1, r3
 80007b0:	4826      	ldr	r0, [pc, #152]	; (800084c <HAL_UART_MspInit+0x1c8>)
 80007b2:	f000 fd3b 	bl	800122c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 0318 	add.w	r3, r7, #24
 80007c8:	4619      	mov	r1, r3
 80007ca:	4820      	ldr	r0, [pc, #128]	; (800084c <HAL_UART_MspInit+0x1c8>)
 80007cc:	f000 fd2e 	bl	800122c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <HAL_UART_MspInit+0x1cc>)
 80007d2:	4a20      	ldr	r2, [pc, #128]	; (8000854 <HAL_UART_MspInit+0x1d0>)
 80007d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007d6:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <HAL_UART_MspInit+0x1cc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <HAL_UART_MspInit+0x1cc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007e2:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <HAL_UART_MspInit+0x1cc>)
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <HAL_UART_MspInit+0x1cc>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <HAL_UART_MspInit+0x1cc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80007f4:	4b16      	ldr	r3, [pc, #88]	; (8000850 <HAL_UART_MspInit+0x1cc>)
 80007f6:	2220      	movs	r2, #32
 80007f8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_UART_MspInit+0x1cc>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000800:	4813      	ldr	r0, [pc, #76]	; (8000850 <HAL_UART_MspInit+0x1cc>)
 8000802:	f000 faaf 	bl	8000d64 <HAL_DMA_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 800080c:	f7ff feea 	bl	80005e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <HAL_UART_MspInit+0x1cc>)
 8000814:	635a      	str	r2, [r3, #52]	; 0x34
 8000816:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <HAL_UART_MspInit+0x1cc>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	2027      	movs	r0, #39	; 0x27
 8000822:	f000 fa74 	bl	8000d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000826:	2027      	movs	r0, #39	; 0x27
 8000828:	f000 fa8d 	bl	8000d46 <HAL_NVIC_EnableIRQ>
}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	; 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40004400 	.word	0x40004400
 8000838:	40021000 	.word	0x40021000
 800083c:	40010800 	.word	0x40010800
 8000840:	200000fc 	.word	0x200000fc
 8000844:	4002006c 	.word	0x4002006c
 8000848:	40004800 	.word	0x40004800
 800084c:	40010c00 	.word	0x40010c00
 8000850:	20000140 	.word	0x20000140
 8000854:	40020030 	.word	0x40020030

08000858 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	; 0x30
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000868:	2200      	movs	r2, #0
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	201e      	movs	r0, #30
 800086e:	f000 fa4e 	bl	8000d0e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000872:	201e      	movs	r0, #30
 8000874:	f000 fa67 	bl	8000d46 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <HAL_InitTick+0xa0>)
 800087a:	69db      	ldr	r3, [r3, #28]
 800087c:	4a1e      	ldr	r2, [pc, #120]	; (80008f8 <HAL_InitTick+0xa0>)
 800087e:	f043 0304 	orr.w	r3, r3, #4
 8000882:	61d3      	str	r3, [r2, #28]
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <HAL_InitTick+0xa0>)
 8000886:	69db      	ldr	r3, [r3, #28]
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000890:	f107 0210 	add.w	r2, r7, #16
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4611      	mov	r1, r2
 800089a:	4618      	mov	r0, r3
 800089c:	f001 fa70 	bl	8001d80 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008a0:	f001 fa46 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 80008a4:	4603      	mov	r3, r0
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80008aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ac:	4a13      	ldr	r2, [pc, #76]	; (80008fc <HAL_InitTick+0xa4>)
 80008ae:	fba2 2303 	umull	r2, r3, r2, r3
 80008b2:	0c9b      	lsrs	r3, r3, #18
 80008b4:	3b01      	subs	r3, #1
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <HAL_InitTick+0xa8>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <HAL_InitTick+0xac>)
 80008bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <HAL_InitTick+0xa8>)
 80008c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008c4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80008c6:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <HAL_InitTick+0xa8>)
 80008c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ca:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <HAL_InitTick+0xa8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <HAL_InitTick+0xa8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80008d8:	4809      	ldr	r0, [pc, #36]	; (8000900 <HAL_InitTick+0xa8>)
 80008da:	f001 fa9f 	bl	8001e1c <HAL_TIM_Base_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d104      	bne.n	80008ee <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80008e4:	4806      	ldr	r0, [pc, #24]	; (8000900 <HAL_InitTick+0xa8>)
 80008e6:	f001 facd 	bl	8001e84 <HAL_TIM_Base_Start_IT>
 80008ea:	4603      	mov	r3, r0
 80008ec:	e000      	b.n	80008f0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3730      	adds	r7, #48	; 0x30
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40021000 	.word	0x40021000
 80008fc:	431bde83 	.word	0x431bde83
 8000900:	200002d0 	.word	0x200002d0
 8000904:	40000800 	.word	0x40000800

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <HardFault_Handler+0x4>

0800091a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <MemManage_Handler+0x4>

08000920 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <BusFault_Handler+0x4>

08000926 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <UsageFault_Handler+0x4>

0800092c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <DMA1_Channel3_IRQHandler+0x10>)
 8000962:	f000 fb2f 	bl	8000fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000140 	.word	0x20000140

08000970 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <DMA1_Channel6_IRQHandler+0x10>)
 8000976:	f000 fb25 	bl	8000fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000fc 	.word	0x200000fc

08000984 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000988:	2040      	movs	r0, #64	; 0x40
 800098a:	f000 fdd9 	bl	8001540 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800098e:	2080      	movs	r0, #128	; 0x80
 8000990:	f000 fdd6 	bl	8001540 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000994:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000998:	f000 fdd2 	bl	8001540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <TIM4_IRQHandler+0x10>)
 80009a6:	f001 fa90 	bl	8001eca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200002d0 	.word	0x200002d0

080009b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <USART2_IRQHandler+0x10>)
 80009ba:	f001 fd8d 	bl	80024d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000290 	.word	0x20000290

080009c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <USART3_IRQHandler+0x10>)
 80009ce:	f001 fd83 	bl	80024d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000184 	.word	0x20000184

080009dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e4:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <_sbrk+0x5c>)
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <_sbrk+0x60>)
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d102      	bne.n	80009fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <_sbrk+0x64>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <_sbrk+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d207      	bcs.n	8000a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a0c:	f002 f960 	bl	8002cd0 <__errno>
 8000a10:	4602      	mov	r2, r0
 8000a12:	230c      	movs	r3, #12
 8000a14:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	e009      	b.n	8000a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <_sbrk+0x64>)
 8000a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20005000 	.word	0x20005000
 8000a3c:	00000400 	.word	0x00000400
 8000a40:	2000008c 	.word	0x2000008c
 8000a44:	20000318 	.word	0x20000318

08000a48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <SystemInit+0x5c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <SystemInit+0x5c>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <SystemInit+0x5c>)
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	4911      	ldr	r1, [pc, #68]	; (8000aa4 <SystemInit+0x5c>)
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <SystemInit+0x60>)
 8000a60:	4013      	ands	r3, r2
 8000a62:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <SystemInit+0x5c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <SystemInit+0x5c>)
 8000a6a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a72:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <SystemInit+0x5c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <SystemInit+0x5c>)
 8000a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a7e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <SystemInit+0x5c>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <SystemInit+0x5c>)
 8000a86:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a8a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <SystemInit+0x5c>)
 8000a8e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a92:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SystemInit+0x64>)
 8000a96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a9a:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	f8ff0000 	.word	0xf8ff0000
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ab0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ab2:	e003      	b.n	8000abc <LoopCopyDataInit>

08000ab4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ab6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ab8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000aba:	3104      	adds	r1, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000abc:	480a      	ldr	r0, [pc, #40]	; (8000ae8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ac0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ac2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ac4:	d3f6      	bcc.n	8000ab4 <CopyDataInit>
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ac8:	e002      	b.n	8000ad0 <LoopFillZerobss>

08000aca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000acc:	f842 3b04 	str.w	r3, [r2], #4

08000ad0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ad2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ad4:	d3f9      	bcc.n	8000aca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ad6:	f7ff ffb7 	bl	8000a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f002 f8ff 	bl	8002cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ade:	f7ff fb3d 	bl	800015c <main>
  bx lr
 8000ae2:	4770      	bx	lr
  ldr r3, =_sidata
 8000ae4:	08003614 	.word	0x08003614
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000aec:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000af0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000af4:	20000318 	.word	0x20000318

08000af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_2_IRQHandler>
	...

08000afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <HAL_Init+0x28>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_Init+0x28>)
 8000b06:	f043 0310 	orr.w	r3, r3, #16
 8000b0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 f8f3 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b12:	2000      	movs	r0, #0
 8000b14:	f7ff fea0 	bl	8000858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b18:	f7ff fd82 	bl	8000620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40022000 	.word	0x40022000

08000b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_IncTick+0x1c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <HAL_IncTick+0x20>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a03      	ldr	r2, [pc, #12]	; (8000b48 <HAL_IncTick+0x20>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000310 	.word	0x20000310

08000b4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b02      	ldr	r3, [pc, #8]	; (8000b5c <HAL_GetTick+0x10>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	20000310 	.word	0x20000310

08000b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b68:	f7ff fff0 	bl	8000b4c <HAL_GetTick>
 8000b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b78:	d005      	beq.n	8000b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_Delay+0x40>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b86:	bf00      	nop
 8000b88:	f7ff ffe0 	bl	8000b4c <HAL_GetTick>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d8f7      	bhi.n	8000b88 <HAL_Delay+0x28>
  {
  }
}
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000008 	.word	0x20000008

08000ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0b      	blt.n	8000c32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4906      	ldr	r1, [pc, #24]	; (8000c3c <__NVIC_EnableIRQ+0x34>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	; (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	; (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	; 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff4f 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff64 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ffb2 	bl	8000c94 <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff81 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff57 	bl	8000c08 <__NVIC_EnableIRQ>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d101      	bne.n	8000d7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e043      	b.n	8000e02 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <HAL_DMA_Init+0xa8>)
 8000d82:	4413      	add	r3, r2
 8000d84:	4a22      	ldr	r2, [pc, #136]	; (8000e10 <HAL_DMA_Init+0xac>)
 8000d86:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8a:	091b      	lsrs	r3, r3, #4
 8000d8c:	009a      	lsls	r2, r3, #2
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a1f      	ldr	r2, [pc, #124]	; (8000e14 <HAL_DMA_Init+0xb0>)
 8000d96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000dae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000db2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2201      	movs	r2, #1
 8000df4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	bffdfff8 	.word	0xbffdfff8
 8000e10:	cccccccd 	.word	0xcccccccd
 8000e14:	40020000 	.word	0x40020000

08000e18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d101      	bne.n	8000e38 <HAL_DMA_Start_IT+0x20>
 8000e34:	2302      	movs	r3, #2
 8000e36:	e04a      	b.n	8000ece <HAL_DMA_Start_IT+0xb6>
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d13a      	bne.n	8000ec0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2200      	movs	r2, #0
 8000e56:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f022 0201 	bic.w	r2, r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f000 f9ae 	bl	80011d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d008      	beq.n	8000e8e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 020e 	orr.w	r2, r2, #14
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	e00f      	b.n	8000eae <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 0204 	bic.w	r2, r2, #4
 8000e9c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f042 020a 	orr.w	r2, r2, #10
 8000eac:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f042 0201 	orr.w	r2, r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	e005      	b.n	8000ecc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d005      	beq.n	8000efa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	e051      	b.n	8000f9e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 020e 	bic.w	r2, r2, #14
 8000f08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0201 	bic.w	r2, r2, #1
 8000f18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <HAL_DMA_Abort_IT+0xd0>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d029      	beq.n	8000f78 <HAL_DMA_Abort_IT+0xa0>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a20      	ldr	r2, [pc, #128]	; (8000fac <HAL_DMA_Abort_IT+0xd4>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d022      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x9c>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a1f      	ldr	r2, [pc, #124]	; (8000fb0 <HAL_DMA_Abort_IT+0xd8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d01a      	beq.n	8000f6e <HAL_DMA_Abort_IT+0x96>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a1d      	ldr	r2, [pc, #116]	; (8000fb4 <HAL_DMA_Abort_IT+0xdc>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d012      	beq.n	8000f68 <HAL_DMA_Abort_IT+0x90>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <HAL_DMA_Abort_IT+0xe0>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d00a      	beq.n	8000f62 <HAL_DMA_Abort_IT+0x8a>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a1a      	ldr	r2, [pc, #104]	; (8000fbc <HAL_DMA_Abort_IT+0xe4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d102      	bne.n	8000f5c <HAL_DMA_Abort_IT+0x84>
 8000f56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f5a:	e00e      	b.n	8000f7a <HAL_DMA_Abort_IT+0xa2>
 8000f5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f60:	e00b      	b.n	8000f7a <HAL_DMA_Abort_IT+0xa2>
 8000f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f66:	e008      	b.n	8000f7a <HAL_DMA_Abort_IT+0xa2>
 8000f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6c:	e005      	b.n	8000f7a <HAL_DMA_Abort_IT+0xa2>
 8000f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f72:	e002      	b.n	8000f7a <HAL_DMA_Abort_IT+0xa2>
 8000f74:	2310      	movs	r3, #16
 8000f76:	e000      	b.n	8000f7a <HAL_DMA_Abort_IT+0xa2>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <HAL_DMA_Abort_IT+0xe8>)
 8000f7c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	4798      	blx	r3
    } 
  }
  return status;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40020008 	.word	0x40020008
 8000fac:	4002001c 	.word	0x4002001c
 8000fb0:	40020030 	.word	0x40020030
 8000fb4:	40020044 	.word	0x40020044
 8000fb8:	40020058 	.word	0x40020058
 8000fbc:	4002006c 	.word	0x4002006c
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d04f      	beq.n	800108c <HAL_DMA_IRQHandler+0xc8>
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d04a      	beq.n	800108c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0320 	and.w	r3, r3, #32
 8001000:	2b00      	cmp	r3, #0
 8001002:	d107      	bne.n	8001014 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0204 	bic.w	r2, r2, #4
 8001012:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a66      	ldr	r2, [pc, #408]	; (80011b4 <HAL_DMA_IRQHandler+0x1f0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d029      	beq.n	8001072 <HAL_DMA_IRQHandler+0xae>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a65      	ldr	r2, [pc, #404]	; (80011b8 <HAL_DMA_IRQHandler+0x1f4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d022      	beq.n	800106e <HAL_DMA_IRQHandler+0xaa>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a63      	ldr	r2, [pc, #396]	; (80011bc <HAL_DMA_IRQHandler+0x1f8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d01a      	beq.n	8001068 <HAL_DMA_IRQHandler+0xa4>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a62      	ldr	r2, [pc, #392]	; (80011c0 <HAL_DMA_IRQHandler+0x1fc>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d012      	beq.n	8001062 <HAL_DMA_IRQHandler+0x9e>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a60      	ldr	r2, [pc, #384]	; (80011c4 <HAL_DMA_IRQHandler+0x200>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00a      	beq.n	800105c <HAL_DMA_IRQHandler+0x98>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a5f      	ldr	r2, [pc, #380]	; (80011c8 <HAL_DMA_IRQHandler+0x204>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d102      	bne.n	8001056 <HAL_DMA_IRQHandler+0x92>
 8001050:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001054:	e00e      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 8001056:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800105a:	e00b      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 800105c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001060:	e008      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 8001062:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001066:	e005      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 8001068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106c:	e002      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 800106e:	2340      	movs	r3, #64	; 0x40
 8001070:	e000      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 8001072:	2304      	movs	r3, #4
 8001074:	4a55      	ldr	r2, [pc, #340]	; (80011cc <HAL_DMA_IRQHandler+0x208>)
 8001076:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 8094 	beq.w	80011aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800108a:	e08e      	b.n	80011aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	2202      	movs	r2, #2
 8001092:	409a      	lsls	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4013      	ands	r3, r2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d056      	beq.n	800114a <HAL_DMA_IRQHandler+0x186>
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d051      	beq.n	800114a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0320 	and.w	r3, r3, #32
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10b      	bne.n	80010cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 020a 	bic.w	r2, r2, #10
 80010c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a38      	ldr	r2, [pc, #224]	; (80011b4 <HAL_DMA_IRQHandler+0x1f0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d029      	beq.n	800112a <HAL_DMA_IRQHandler+0x166>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a37      	ldr	r2, [pc, #220]	; (80011b8 <HAL_DMA_IRQHandler+0x1f4>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d022      	beq.n	8001126 <HAL_DMA_IRQHandler+0x162>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a35      	ldr	r2, [pc, #212]	; (80011bc <HAL_DMA_IRQHandler+0x1f8>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d01a      	beq.n	8001120 <HAL_DMA_IRQHandler+0x15c>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a34      	ldr	r2, [pc, #208]	; (80011c0 <HAL_DMA_IRQHandler+0x1fc>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d012      	beq.n	800111a <HAL_DMA_IRQHandler+0x156>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a32      	ldr	r2, [pc, #200]	; (80011c4 <HAL_DMA_IRQHandler+0x200>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d00a      	beq.n	8001114 <HAL_DMA_IRQHandler+0x150>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a31      	ldr	r2, [pc, #196]	; (80011c8 <HAL_DMA_IRQHandler+0x204>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d102      	bne.n	800110e <HAL_DMA_IRQHandler+0x14a>
 8001108:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800110c:	e00e      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 800110e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001112:	e00b      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 8001114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001118:	e008      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 800111a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111e:	e005      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 8001120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001124:	e002      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 8001126:	2320      	movs	r3, #32
 8001128:	e000      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 800112a:	2302      	movs	r3, #2
 800112c:	4a27      	ldr	r2, [pc, #156]	; (80011cc <HAL_DMA_IRQHandler+0x208>)
 800112e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113c:	2b00      	cmp	r3, #0
 800113e:	d034      	beq.n	80011aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001148:	e02f      	b.n	80011aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	2208      	movs	r2, #8
 8001150:	409a      	lsls	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d028      	beq.n	80011ac <HAL_DMA_IRQHandler+0x1e8>
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	2b00      	cmp	r3, #0
 8001162:	d023      	beq.n	80011ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 020e 	bic.w	r2, r2, #14
 8001172:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117c:	2101      	movs	r1, #1
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	4798      	blx	r3
    }
  }
  return;
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
}
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40020008 	.word	0x40020008
 80011b8:	4002001c 	.word	0x4002001c
 80011bc:	40020030 	.word	0x40020030
 80011c0:	40020044 	.word	0x40020044
 80011c4:	40020058 	.word	0x40020058
 80011c8:	4002006c 	.word	0x4002006c
 80011cc:	40020000 	.word	0x40020000

080011d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e6:	2101      	movs	r1, #1
 80011e8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b10      	cmp	r3, #16
 80011fc:	d108      	bne.n	8001210 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800120e:	e007      	b.n	8001220 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	60da      	str	r2, [r3, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
	...

0800122c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800122c:	b480      	push	{r7}
 800122e:	b08b      	sub	sp, #44	; 0x2c
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123e:	e127      	b.n	8001490 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001240:	2201      	movs	r2, #1
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	429a      	cmp	r2, r3
 800125a:	f040 8116 	bne.w	800148a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b12      	cmp	r3, #18
 8001264:	d034      	beq.n	80012d0 <HAL_GPIO_Init+0xa4>
 8001266:	2b12      	cmp	r3, #18
 8001268:	d80d      	bhi.n	8001286 <HAL_GPIO_Init+0x5a>
 800126a:	2b02      	cmp	r3, #2
 800126c:	d02b      	beq.n	80012c6 <HAL_GPIO_Init+0x9a>
 800126e:	2b02      	cmp	r3, #2
 8001270:	d804      	bhi.n	800127c <HAL_GPIO_Init+0x50>
 8001272:	2b00      	cmp	r3, #0
 8001274:	d031      	beq.n	80012da <HAL_GPIO_Init+0xae>
 8001276:	2b01      	cmp	r3, #1
 8001278:	d01c      	beq.n	80012b4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800127a:	e048      	b.n	800130e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800127c:	2b03      	cmp	r3, #3
 800127e:	d043      	beq.n	8001308 <HAL_GPIO_Init+0xdc>
 8001280:	2b11      	cmp	r3, #17
 8001282:	d01b      	beq.n	80012bc <HAL_GPIO_Init+0x90>
          break;
 8001284:	e043      	b.n	800130e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001286:	4a89      	ldr	r2, [pc, #548]	; (80014ac <HAL_GPIO_Init+0x280>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d026      	beq.n	80012da <HAL_GPIO_Init+0xae>
 800128c:	4a87      	ldr	r2, [pc, #540]	; (80014ac <HAL_GPIO_Init+0x280>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d806      	bhi.n	80012a0 <HAL_GPIO_Init+0x74>
 8001292:	4a87      	ldr	r2, [pc, #540]	; (80014b0 <HAL_GPIO_Init+0x284>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d020      	beq.n	80012da <HAL_GPIO_Init+0xae>
 8001298:	4a86      	ldr	r2, [pc, #536]	; (80014b4 <HAL_GPIO_Init+0x288>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d01d      	beq.n	80012da <HAL_GPIO_Init+0xae>
          break;
 800129e:	e036      	b.n	800130e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012a0:	4a85      	ldr	r2, [pc, #532]	; (80014b8 <HAL_GPIO_Init+0x28c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d019      	beq.n	80012da <HAL_GPIO_Init+0xae>
 80012a6:	4a85      	ldr	r2, [pc, #532]	; (80014bc <HAL_GPIO_Init+0x290>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d016      	beq.n	80012da <HAL_GPIO_Init+0xae>
 80012ac:	4a84      	ldr	r2, [pc, #528]	; (80014c0 <HAL_GPIO_Init+0x294>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d013      	beq.n	80012da <HAL_GPIO_Init+0xae>
          break;
 80012b2:	e02c      	b.n	800130e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	623b      	str	r3, [r7, #32]
          break;
 80012ba:	e028      	b.n	800130e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	3304      	adds	r3, #4
 80012c2:	623b      	str	r3, [r7, #32]
          break;
 80012c4:	e023      	b.n	800130e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	3308      	adds	r3, #8
 80012cc:	623b      	str	r3, [r7, #32]
          break;
 80012ce:	e01e      	b.n	800130e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	330c      	adds	r3, #12
 80012d6:	623b      	str	r3, [r7, #32]
          break;
 80012d8:	e019      	b.n	800130e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d102      	bne.n	80012e8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012e2:	2304      	movs	r3, #4
 80012e4:	623b      	str	r3, [r7, #32]
          break;
 80012e6:	e012      	b.n	800130e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d105      	bne.n	80012fc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f0:	2308      	movs	r3, #8
 80012f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	611a      	str	r2, [r3, #16]
          break;
 80012fa:	e008      	b.n	800130e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012fc:	2308      	movs	r3, #8
 80012fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69fa      	ldr	r2, [r7, #28]
 8001304:	615a      	str	r2, [r3, #20]
          break;
 8001306:	e002      	b.n	800130e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
          break;
 800130c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	2bff      	cmp	r3, #255	; 0xff
 8001312:	d801      	bhi.n	8001318 <HAL_GPIO_Init+0xec>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	e001      	b.n	800131c <HAL_GPIO_Init+0xf0>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3304      	adds	r3, #4
 800131c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	2bff      	cmp	r3, #255	; 0xff
 8001322:	d802      	bhi.n	800132a <HAL_GPIO_Init+0xfe>
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	e002      	b.n	8001330 <HAL_GPIO_Init+0x104>
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	3b08      	subs	r3, #8
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	210f      	movs	r1, #15
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	401a      	ands	r2, r3
 8001342:	6a39      	ldr	r1, [r7, #32]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	431a      	orrs	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 8096 	beq.w	800148a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800135e:	4b59      	ldr	r3, [pc, #356]	; (80014c4 <HAL_GPIO_Init+0x298>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	4a58      	ldr	r2, [pc, #352]	; (80014c4 <HAL_GPIO_Init+0x298>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6193      	str	r3, [r2, #24]
 800136a:	4b56      	ldr	r3, [pc, #344]	; (80014c4 <HAL_GPIO_Init+0x298>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001376:	4a54      	ldr	r2, [pc, #336]	; (80014c8 <HAL_GPIO_Init+0x29c>)
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001382:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	4013      	ands	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4b      	ldr	r2, [pc, #300]	; (80014cc <HAL_GPIO_Init+0x2a0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d013      	beq.n	80013ca <HAL_GPIO_Init+0x19e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4a      	ldr	r2, [pc, #296]	; (80014d0 <HAL_GPIO_Init+0x2a4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d00d      	beq.n	80013c6 <HAL_GPIO_Init+0x19a>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a49      	ldr	r2, [pc, #292]	; (80014d4 <HAL_GPIO_Init+0x2a8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d007      	beq.n	80013c2 <HAL_GPIO_Init+0x196>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a48      	ldr	r2, [pc, #288]	; (80014d8 <HAL_GPIO_Init+0x2ac>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d101      	bne.n	80013be <HAL_GPIO_Init+0x192>
 80013ba:	2303      	movs	r3, #3
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x1a0>
 80013be:	2304      	movs	r3, #4
 80013c0:	e004      	b.n	80013cc <HAL_GPIO_Init+0x1a0>
 80013c2:	2302      	movs	r3, #2
 80013c4:	e002      	b.n	80013cc <HAL_GPIO_Init+0x1a0>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <HAL_GPIO_Init+0x1a0>
 80013ca:	2300      	movs	r3, #0
 80013cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ce:	f002 0203 	and.w	r2, r2, #3
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	4093      	lsls	r3, r2
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013dc:	493a      	ldr	r1, [pc, #232]	; (80014c8 <HAL_GPIO_Init+0x29c>)
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3302      	adds	r3, #2
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013f6:	4b39      	ldr	r3, [pc, #228]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4938      	ldr	r1, [pc, #224]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	600b      	str	r3, [r1, #0]
 8001402:	e006      	b.n	8001412 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001404:	4b35      	ldr	r3, [pc, #212]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	43db      	mvns	r3, r3
 800140c:	4933      	ldr	r1, [pc, #204]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 800140e:	4013      	ands	r3, r2
 8001410:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d006      	beq.n	800142c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800141e:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	492e      	ldr	r1, [pc, #184]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	604b      	str	r3, [r1, #4]
 800142a:	e006      	b.n	800143a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800142c:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	43db      	mvns	r3, r3
 8001434:	4929      	ldr	r1, [pc, #164]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 8001436:	4013      	ands	r3, r2
 8001438:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001446:	4b25      	ldr	r3, [pc, #148]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	4924      	ldr	r1, [pc, #144]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	608b      	str	r3, [r1, #8]
 8001452:	e006      	b.n	8001462 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001454:	4b21      	ldr	r3, [pc, #132]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	43db      	mvns	r3, r3
 800145c:	491f      	ldr	r1, [pc, #124]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 800145e:	4013      	ands	r3, r2
 8001460:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	491a      	ldr	r1, [pc, #104]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	60cb      	str	r3, [r1, #12]
 800147a:	e006      	b.n	800148a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	43db      	mvns	r3, r3
 8001484:	4915      	ldr	r1, [pc, #84]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 8001486:	4013      	ands	r3, r2
 8001488:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	3301      	adds	r3, #1
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	fa22 f303 	lsr.w	r3, r2, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	f47f aed0 	bne.w	8001240 <HAL_GPIO_Init+0x14>
  }
}
 80014a0:	bf00      	nop
 80014a2:	372c      	adds	r7, #44	; 0x2c
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	10210000 	.word	0x10210000
 80014b0:	10110000 	.word	0x10110000
 80014b4:	10120000 	.word	0x10120000
 80014b8:	10310000 	.word	0x10310000
 80014bc:	10320000 	.word	0x10320000
 80014c0:	10220000 	.word	0x10220000
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40010000 	.word	0x40010000
 80014cc:	40010800 	.word	0x40010800
 80014d0:	40010c00 	.word	0x40010c00
 80014d4:	40011000 	.word	0x40011000
 80014d8:	40011400 	.word	0x40011400
 80014dc:	40010400 	.word	0x40010400

080014e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f0:	787b      	ldrb	r3, [r7, #1]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f6:	887a      	ldrh	r2, [r7, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014fc:	e003      	b.n	8001506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	041a      	lsls	r2, r3, #16
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	611a      	str	r2, [r3, #16]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	887b      	ldrh	r3, [r7, #2]
 8001522:	4013      	ands	r3, r2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001528:	887a      	ldrh	r2, [r7, #2]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800152e:	e002      	b.n	8001536 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001530:	887a      	ldrh	r2, [r7, #2]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	611a      	str	r2, [r3, #16]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	4013      	ands	r3, r2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d006      	beq.n	8001564 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f806 	bl	8001570 <HAL_GPIO_EXTI_Callback>
  }
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40010400 	.word	0x40010400

08001570 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e26c      	b.n	8001a70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 8087 	beq.w	80016b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015a4:	4b92      	ldr	r3, [pc, #584]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 030c 	and.w	r3, r3, #12
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d00c      	beq.n	80015ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015b0:	4b8f      	ldr	r3, [pc, #572]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 030c 	and.w	r3, r3, #12
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d112      	bne.n	80015e2 <HAL_RCC_OscConfig+0x5e>
 80015bc:	4b8c      	ldr	r3, [pc, #560]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c8:	d10b      	bne.n	80015e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ca:	4b89      	ldr	r3, [pc, #548]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d06c      	beq.n	80016b0 <HAL_RCC_OscConfig+0x12c>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d168      	bne.n	80016b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e246      	b.n	8001a70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ea:	d106      	bne.n	80015fa <HAL_RCC_OscConfig+0x76>
 80015ec:	4b80      	ldr	r3, [pc, #512]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a7f      	ldr	r2, [pc, #508]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e02e      	b.n	8001658 <HAL_RCC_OscConfig+0xd4>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0x98>
 8001602:	4b7b      	ldr	r3, [pc, #492]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a7a      	ldr	r2, [pc, #488]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b78      	ldr	r3, [pc, #480]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a77      	ldr	r2, [pc, #476]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001614:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e01d      	b.n	8001658 <HAL_RCC_OscConfig+0xd4>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0xbc>
 8001626:	4b72      	ldr	r3, [pc, #456]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a71      	ldr	r2, [pc, #452]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 800162c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b6f      	ldr	r3, [pc, #444]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a6e      	ldr	r2, [pc, #440]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0xd4>
 8001640:	4b6b      	ldr	r3, [pc, #428]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a6a      	ldr	r2, [pc, #424]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b68      	ldr	r3, [pc, #416]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a67      	ldr	r2, [pc, #412]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001656:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d013      	beq.n	8001688 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fa74 	bl	8000b4c <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff fa70 	bl	8000b4c <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	; 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e1fa      	b.n	8001a70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	4b5d      	ldr	r3, [pc, #372]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0xe4>
 8001686:	e014      	b.n	80016b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fa60 	bl	8000b4c <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001690:	f7ff fa5c 	bl	8000b4c <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e1e6      	b.n	8001a70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a2:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x10c>
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d063      	beq.n	8001786 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016be:	4b4c      	ldr	r3, [pc, #304]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00b      	beq.n	80016e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016ca:	4b49      	ldr	r3, [pc, #292]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d11c      	bne.n	8001710 <HAL_RCC_OscConfig+0x18c>
 80016d6:	4b46      	ldr	r3, [pc, #280]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d116      	bne.n	8001710 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e2:	4b43      	ldr	r3, [pc, #268]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d005      	beq.n	80016fa <HAL_RCC_OscConfig+0x176>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d001      	beq.n	80016fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e1ba      	b.n	8001a70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fa:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4939      	ldr	r1, [pc, #228]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 800170a:	4313      	orrs	r3, r2
 800170c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170e:	e03a      	b.n	8001786 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d020      	beq.n	800175a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001718:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <HAL_RCC_OscConfig+0x270>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff fa15 	bl	8000b4c <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001726:	f7ff fa11 	bl	8000b4c <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e19b      	b.n	8001a70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001738:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001744:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4927      	ldr	r1, [pc, #156]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001754:	4313      	orrs	r3, r2
 8001756:	600b      	str	r3, [r1, #0]
 8001758:	e015      	b.n	8001786 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <HAL_RCC_OscConfig+0x270>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff f9f4 	bl	8000b4c <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001768:	f7ff f9f0 	bl	8000b4c <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e17a      	b.n	8001a70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d03a      	beq.n	8001808 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d019      	beq.n	80017ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 800179c:	2201      	movs	r2, #1
 800179e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a0:	f7ff f9d4 	bl	8000b4c <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a8:	f7ff f9d0 	bl	8000b4c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e15a      	b.n	8001a70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017c6:	2001      	movs	r0, #1
 80017c8:	f000 fb0a 	bl	8001de0 <RCC_Delay>
 80017cc:	e01c      	b.n	8001808 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d4:	f7ff f9ba 	bl	8000b4c <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017da:	e00f      	b.n	80017fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017dc:	f7ff f9b6 	bl	8000b4c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d908      	bls.n	80017fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e140      	b.n	8001a70 <HAL_RCC_OscConfig+0x4ec>
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000
 80017f4:	42420000 	.word	0x42420000
 80017f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fc:	4b9e      	ldr	r3, [pc, #632]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1e9      	bne.n	80017dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80a6 	beq.w	8001962 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181a:	4b97      	ldr	r3, [pc, #604]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10d      	bne.n	8001842 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	4b94      	ldr	r3, [pc, #592]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	4a93      	ldr	r2, [pc, #588]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	61d3      	str	r3, [r2, #28]
 8001832:	4b91      	ldr	r3, [pc, #580]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800183e:	2301      	movs	r3, #1
 8001840:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001842:	4b8e      	ldr	r3, [pc, #568]	; (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d118      	bne.n	8001880 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184e:	4b8b      	ldr	r3, [pc, #556]	; (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a8a      	ldr	r2, [pc, #552]	; (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185a:	f7ff f977 	bl	8000b4c <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001862:	f7ff f973 	bl	8000b4c <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b64      	cmp	r3, #100	; 0x64
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e0fd      	b.n	8001a70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001874:	4b81      	ldr	r3, [pc, #516]	; (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x312>
 8001888:	4b7b      	ldr	r3, [pc, #492]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4a7a      	ldr	r2, [pc, #488]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6213      	str	r3, [r2, #32]
 8001894:	e02d      	b.n	80018f2 <HAL_RCC_OscConfig+0x36e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x334>
 800189e:	4b76      	ldr	r3, [pc, #472]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	4a75      	ldr	r2, [pc, #468]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	6213      	str	r3, [r2, #32]
 80018aa:	4b73      	ldr	r3, [pc, #460]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	4a72      	ldr	r2, [pc, #456]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 80018b0:	f023 0304 	bic.w	r3, r3, #4
 80018b4:	6213      	str	r3, [r2, #32]
 80018b6:	e01c      	b.n	80018f2 <HAL_RCC_OscConfig+0x36e>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b05      	cmp	r3, #5
 80018be:	d10c      	bne.n	80018da <HAL_RCC_OscConfig+0x356>
 80018c0:	4b6d      	ldr	r3, [pc, #436]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	4a6c      	ldr	r2, [pc, #432]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	f043 0304 	orr.w	r3, r3, #4
 80018ca:	6213      	str	r3, [r2, #32]
 80018cc:	4b6a      	ldr	r3, [pc, #424]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	4a69      	ldr	r2, [pc, #420]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6213      	str	r3, [r2, #32]
 80018d8:	e00b      	b.n	80018f2 <HAL_RCC_OscConfig+0x36e>
 80018da:	4b67      	ldr	r3, [pc, #412]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	4a66      	ldr	r2, [pc, #408]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 80018e0:	f023 0301 	bic.w	r3, r3, #1
 80018e4:	6213      	str	r3, [r2, #32]
 80018e6:	4b64      	ldr	r3, [pc, #400]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4a63      	ldr	r2, [pc, #396]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	f023 0304 	bic.w	r3, r3, #4
 80018f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d015      	beq.n	8001926 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fa:	f7ff f927 	bl	8000b4c <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001900:	e00a      	b.n	8001918 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001902:	f7ff f923 	bl	8000b4c <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001910:	4293      	cmp	r3, r2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e0ab      	b.n	8001a70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001918:	4b57      	ldr	r3, [pc, #348]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0ee      	beq.n	8001902 <HAL_RCC_OscConfig+0x37e>
 8001924:	e014      	b.n	8001950 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001926:	f7ff f911 	bl	8000b4c <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192c:	e00a      	b.n	8001944 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7ff f90d 	bl	8000b4c <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f241 3288 	movw	r2, #5000	; 0x1388
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e095      	b.n	8001a70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001944:	4b4c      	ldr	r3, [pc, #304]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1ee      	bne.n	800192e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001950:	7dfb      	ldrb	r3, [r7, #23]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d105      	bne.n	8001962 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001956:	4b48      	ldr	r3, [pc, #288]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a47      	ldr	r2, [pc, #284]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 800195c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001960:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8081 	beq.w	8001a6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800196c:	4b42      	ldr	r3, [pc, #264]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b08      	cmp	r3, #8
 8001976:	d061      	beq.n	8001a3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d146      	bne.n	8001a0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001980:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <HAL_RCC_OscConfig+0x4fc>)
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001986:	f7ff f8e1 	bl	8000b4c <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198e:	f7ff f8dd 	bl	8000b4c <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e067      	b.n	8001a70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a0:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f0      	bne.n	800198e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b4:	d108      	bne.n	80019c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019b6:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	492d      	ldr	r1, [pc, #180]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c8:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a19      	ldr	r1, [r3, #32]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	430b      	orrs	r3, r1
 80019da:	4927      	ldr	r1, [pc, #156]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e0:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <HAL_RCC_OscConfig+0x4fc>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e6:	f7ff f8b1 	bl	8000b4c <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ee:	f7ff f8ad 	bl	8000b4c <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e037      	b.n	8001a70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x46a>
 8001a0c:	e02f      	b.n	8001a6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <HAL_RCC_OscConfig+0x4fc>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7ff f89a 	bl	8000b4c <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff f896 	bl	8000b4c <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e020      	b.n	8001a70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x498>
 8001a3a:	e018      	b.n	8001a6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e013      	b.n	8001a70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_OscConfig+0x4f4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d106      	bne.n	8001a6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d001      	beq.n	8001a6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	42420060 	.word	0x42420060

08001a84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0d0      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a98:	4b6a      	ldr	r3, [pc, #424]	; (8001c44 <HAL_RCC_ClockConfig+0x1c0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d910      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa6:	4b67      	ldr	r3, [pc, #412]	; (8001c44 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 0207 	bic.w	r2, r3, #7
 8001aae:	4965      	ldr	r1, [pc, #404]	; (8001c44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab6:	4b63      	ldr	r3, [pc, #396]	; (8001c44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0b8      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d020      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae0:	4b59      	ldr	r3, [pc, #356]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4a58      	ldr	r2, [pc, #352]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af8:	4b53      	ldr	r3, [pc, #332]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4a52      	ldr	r2, [pc, #328]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b04:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	494d      	ldr	r1, [pc, #308]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d040      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d115      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e07f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b42:	4b41      	ldr	r3, [pc, #260]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d109      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e073      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b52:	4b3d      	ldr	r3, [pc, #244]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e06b      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b62:	4b39      	ldr	r3, [pc, #228]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f023 0203 	bic.w	r2, r3, #3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4936      	ldr	r1, [pc, #216]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b74:	f7fe ffea 	bl	8000b4c <HAL_GetTick>
 8001b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	e00a      	b.n	8001b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7c:	f7fe ffe6 	bl	8000b4c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e053      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b92:	4b2d      	ldr	r3, [pc, #180]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 020c 	and.w	r2, r3, #12
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d1eb      	bne.n	8001b7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d210      	bcs.n	8001bd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 0207 	bic.w	r2, r3, #7
 8001bba:	4922      	ldr	r1, [pc, #136]	; (8001c44 <HAL_RCC_ClockConfig+0x1c0>)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e032      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4916      	ldr	r1, [pc, #88]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d009      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	490e      	ldr	r1, [pc, #56]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c12:	f000 f821 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 8001c16:	4601      	mov	r1, r0
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <HAL_RCC_ClockConfig+0x1c8>)
 8001c24:	5cd3      	ldrb	r3, [r2, r3]
 8001c26:	fa21 f303 	lsr.w	r3, r1, r3
 8001c2a:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <HAL_RCC_ClockConfig+0x1cc>)
 8001c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_ClockConfig+0x1d0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fe10 	bl	8000858 <HAL_InitTick>

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40022000 	.word	0x40022000
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	080035c0 	.word	0x080035c0
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000004 	.word	0x20000004

08001c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c58:	b490      	push	{r4, r7}
 8001c5a:	b08a      	sub	sp, #40	; 0x28
 8001c5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c60:	1d3c      	adds	r4, r7, #4
 8001c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c68:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	2300      	movs	r3, #0
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c82:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d002      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x40>
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d003      	beq.n	8001c9e <HAL_RCC_GetSysClockFreq+0x46>
 8001c96:	e02d      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c98:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c9a:	623b      	str	r3, [r7, #32]
      break;
 8001c9c:	e02d      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	0c9b      	lsrs	r3, r3, #18
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001caa:	4413      	add	r3, r2
 8001cac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cb0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d013      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	0c5b      	lsrs	r3, r3, #17
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cca:	4413      	add	r3, r2
 8001ccc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001cd0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	4a0f      	ldr	r2, [pc, #60]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cd6:	fb02 f203 	mul.w	r2, r2, r3
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce2:	e004      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ce8:	fb02 f303 	mul.w	r3, r2, r3
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	623b      	str	r3, [r7, #32]
      break;
 8001cf2:	e002      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cf4:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cf6:	623b      	str	r3, [r7, #32]
      break;
 8001cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3728      	adds	r7, #40	; 0x28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc90      	pop	{r4, r7}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	080035ac 	.word	0x080035ac
 8001d0c:	080035bc 	.word	0x080035bc
 8001d10:	40021000 	.word	0x40021000
 8001d14:	007a1200 	.word	0x007a1200
 8001d18:	003d0900 	.word	0x003d0900

08001d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d20:	4b02      	ldr	r3, [pc, #8]	; (8001d2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	20000000 	.word	0x20000000

08001d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d34:	f7ff fff2 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d38:	4601      	mov	r1, r0
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	4a03      	ldr	r2, [pc, #12]	; (8001d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d46:	5cd3      	ldrb	r3, [r2, r3]
 8001d48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	080035d0 	.word	0x080035d0

08001d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d5c:	f7ff ffde 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d60:	4601      	mov	r1, r0
 8001d62:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	0adb      	lsrs	r3, r3, #11
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	4a03      	ldr	r2, [pc, #12]	; (8001d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d6e:	5cd3      	ldrb	r3, [r2, r3]
 8001d70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	080035d0 	.word	0x080035d0

08001d80 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_RCC_GetClockConfig+0x58>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0203 	and.w	r2, r3, #3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <HAL_RCC_GetClockConfig+0x58>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCC_GetClockConfig+0x58>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_RCC_GetClockConfig+0x58>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	08db      	lsrs	r3, r3, #3
 8001dba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_RCC_GetClockConfig+0x5c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0207 	and.w	r2, r3, #7
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40022000 	.word	0x40022000

08001de0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <RCC_Delay+0x34>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <RCC_Delay+0x38>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	0a5b      	lsrs	r3, r3, #9
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dfc:	bf00      	nop
  }
  while (Delay --);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1e5a      	subs	r2, r3, #1
 8001e02:	60fa      	str	r2, [r7, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f9      	bne.n	8001dfc <RCC_Delay+0x1c>
}
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000000 	.word	0x20000000
 8001e18:	10624dd3 	.word	0x10624dd3

08001e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e01d      	b.n	8001e6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f815 	bl	8001e72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3304      	adds	r3, #4
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f000 f962 	bl	8002124 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d007      	beq.n	8001ebe <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0201 	orr.w	r2, r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d122      	bne.n	8001f26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d11b      	bne.n	8001f26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f06f 0202 	mvn.w	r2, #2
 8001ef6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f8ed 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
 8001f12:	e005      	b.n	8001f20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f8e0 	bl	80020da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8ef 	bl	80020fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d122      	bne.n	8001f7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d11b      	bne.n	8001f7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f06f 0204 	mvn.w	r2, #4
 8001f4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f8c3 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
 8001f66:	e005      	b.n	8001f74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f8b6 	bl	80020da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8c5 	bl	80020fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d122      	bne.n	8001fce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d11b      	bne.n	8001fce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f06f 0208 	mvn.w	r2, #8
 8001f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2204      	movs	r2, #4
 8001fa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f899 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
 8001fba:	e005      	b.n	8001fc8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f88c 	bl	80020da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f89b 	bl	80020fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	2b10      	cmp	r3, #16
 8001fda:	d122      	bne.n	8002022 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b10      	cmp	r3, #16
 8001fe8:	d11b      	bne.n	8002022 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f06f 0210 	mvn.w	r2, #16
 8001ff2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f86f 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
 800200e:	e005      	b.n	800201c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f862 	bl	80020da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f871 	bl	80020fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d10e      	bne.n	800204e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b01      	cmp	r3, #1
 800203c:	d107      	bne.n	800204e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f06f 0201 	mvn.w	r2, #1
 8002046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7fe fab9 	bl	80005c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002058:	2b80      	cmp	r3, #128	; 0x80
 800205a:	d10e      	bne.n	800207a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002066:	2b80      	cmp	r3, #128	; 0x80
 8002068:	d107      	bne.n	800207a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f8c0 	bl	80021fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002084:	2b40      	cmp	r3, #64	; 0x40
 8002086:	d10e      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002092:	2b40      	cmp	r3, #64	; 0x40
 8002094:	d107      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800209e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f835 	bl	8002110 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	d10e      	bne.n	80020d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b20      	cmp	r3, #32
 80020c0:	d107      	bne.n	80020d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f06f 0220 	mvn.w	r2, #32
 80020ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f88b 	bl	80021e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr

080020fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
	...

08002124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a29      	ldr	r2, [pc, #164]	; (80021dc <TIM_Base_SetConfig+0xb8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00b      	beq.n	8002154 <TIM_Base_SetConfig+0x30>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002142:	d007      	beq.n	8002154 <TIM_Base_SetConfig+0x30>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a26      	ldr	r2, [pc, #152]	; (80021e0 <TIM_Base_SetConfig+0xbc>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d003      	beq.n	8002154 <TIM_Base_SetConfig+0x30>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a25      	ldr	r2, [pc, #148]	; (80021e4 <TIM_Base_SetConfig+0xc0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d108      	bne.n	8002166 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <TIM_Base_SetConfig+0xb8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00b      	beq.n	8002186 <TIM_Base_SetConfig+0x62>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002174:	d007      	beq.n	8002186 <TIM_Base_SetConfig+0x62>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a19      	ldr	r2, [pc, #100]	; (80021e0 <TIM_Base_SetConfig+0xbc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d003      	beq.n	8002186 <TIM_Base_SetConfig+0x62>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a18      	ldr	r2, [pc, #96]	; (80021e4 <TIM_Base_SetConfig+0xc0>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d108      	bne.n	8002198 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4313      	orrs	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a07      	ldr	r2, [pc, #28]	; (80021dc <TIM_Base_SetConfig+0xb8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d103      	bne.n	80021cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	615a      	str	r2, [r3, #20]
}
 80021d2:	bf00      	nop
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	40012c00 	.word	0x40012c00
 80021e0:	40000400 	.word	0x40000400
 80021e4:	40000800 	.word	0x40000800

080021e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e03f      	b.n	800229e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe fa26 	bl	8000684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2224      	movs	r2, #36	; 0x24
 800223c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800224e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fc63 	bl	8002b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002264:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002274:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002284:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b088      	sub	sp, #32
 80022aa:	af02      	add	r7, sp, #8
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	603b      	str	r3, [r7, #0]
 80022b2:	4613      	mov	r3, r2
 80022b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	f040 8083 	bne.w	80023ce <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <HAL_UART_Transmit+0x2e>
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e07b      	b.n	80023d0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_UART_Transmit+0x40>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e074      	b.n	80023d0 <HAL_UART_Transmit+0x12a>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2221      	movs	r2, #33	; 0x21
 80022f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80022fc:	f7fe fc26 	bl	8000b4c <HAL_GetTick>
 8002300:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	88fa      	ldrh	r2, [r7, #6]
 8002306:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	88fa      	ldrh	r2, [r7, #6]
 800230c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800230e:	e042      	b.n	8002396 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002314:	b29b      	uxth	r3, r3
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002326:	d122      	bne.n	800236e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2200      	movs	r2, #0
 8002330:	2180      	movs	r1, #128	; 0x80
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fa73 	bl	800281e <UART_WaitOnFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e046      	b.n	80023d0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002354:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d103      	bne.n	8002366 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	3302      	adds	r3, #2
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	e017      	b.n	8002396 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	3301      	adds	r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	e013      	b.n	8002396 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2200      	movs	r2, #0
 8002376:	2180      	movs	r1, #128	; 0x80
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 fa50 	bl	800281e <UART_WaitOnFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e023      	b.n	80023d0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	60ba      	str	r2, [r7, #8]
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1b7      	bne.n	8002310 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2200      	movs	r2, #0
 80023a8:	2140      	movs	r1, #64	; 0x40
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 fa37 	bl	800281e <UART_WaitOnFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e00a      	b.n	80023d0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2220      	movs	r2, #32
 80023be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e000      	b.n	80023d0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80023ce:	2302      	movs	r3, #2
  }
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	4613      	mov	r3, r2
 80023e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b20      	cmp	r3, #32
 80023f0:	d166      	bne.n	80024c0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_UART_Receive_DMA+0x26>
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e05f      	b.n	80024c2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_UART_Receive_DMA+0x38>
 800240c:	2302      	movs	r3, #2
 800240e:	e058      	b.n	80024c2 <HAL_UART_Receive_DMA+0xea>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	88fa      	ldrh	r2, [r7, #6]
 8002422:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2222      	movs	r2, #34	; 0x22
 800242e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002436:	4a25      	ldr	r2, [pc, #148]	; (80024cc <HAL_UART_Receive_DMA+0xf4>)
 8002438:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243e:	4a24      	ldr	r2, [pc, #144]	; (80024d0 <HAL_UART_Receive_DMA+0xf8>)
 8002440:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002446:	4a23      	ldr	r2, [pc, #140]	; (80024d4 <HAL_UART_Receive_DMA+0xfc>)
 8002448:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244e:	2200      	movs	r2, #0
 8002450:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8002452:	f107 0308 	add.w	r3, r7, #8
 8002456:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	3304      	adds	r3, #4
 8002462:	4619      	mov	r1, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	f7fe fcd5 	bl	8000e18 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800249a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695a      	ldr	r2, [r3, #20]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ba:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
  }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	08002707 	.word	0x08002707
 80024d0:	0800276f 	.word	0x0800276f
 80024d4:	0800278b 	.word	0x0800278b

080024d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10d      	bne.n	800252a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_UART_IRQHandler+0x52>
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 fa78 	bl	8002a18 <UART_Receive_IT>
      return;
 8002528:	e0cc      	b.n	80026c4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80ab 	beq.w	8002688 <HAL_UART_IRQHandler+0x1b0>
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d105      	bne.n	8002548 <HAL_UART_IRQHandler+0x70>
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 80a0 	beq.w	8002688 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_UART_IRQHandler+0x90>
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002560:	f043 0201 	orr.w	r2, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_UART_IRQHandler+0xb0>
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002580:	f043 0202 	orr.w	r2, r3, #2
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_UART_IRQHandler+0xd0>
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a0:	f043 0204 	orr.w	r2, r3, #4
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_UART_IRQHandler+0xf0>
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c0:	f043 0208 	orr.w	r2, r3, #8
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d078      	beq.n	80026c2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <HAL_UART_IRQHandler+0x112>
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 fa17 	bl	8002a18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf14      	ite	ne
 80025f8:	2301      	movne	r3, #1
 80025fa:	2300      	moveq	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d102      	bne.n	8002612 <HAL_UART_IRQHandler+0x13a>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d031      	beq.n	8002676 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f962 	bl	80028dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d023      	beq.n	800266e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002634:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263a:	2b00      	cmp	r3, #0
 800263c:	d013      	beq.n	8002666 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002642:	4a22      	ldr	r2, [pc, #136]	; (80026cc <HAL_UART_IRQHandler+0x1f4>)
 8002644:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fc44 	bl	8000ed8 <HAL_DMA_Abort_IT>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d016      	beq.n	8002684 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002660:	4610      	mov	r0, r2
 8002662:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002664:	e00e      	b.n	8002684 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f844 	bl	80026f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800266c:	e00a      	b.n	8002684 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f840 	bl	80026f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002674:	e006      	b.n	8002684 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f83c 	bl	80026f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002682:	e01e      	b.n	80026c2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002684:	bf00      	nop
    return;
 8002686:	e01c      	b.n	80026c2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268e:	2b00      	cmp	r3, #0
 8002690:	d008      	beq.n	80026a4 <HAL_UART_IRQHandler+0x1cc>
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f94e 	bl	800293e <UART_Transmit_IT>
    return;
 80026a2:	e00f      	b.n	80026c4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_UART_IRQHandler+0x1ec>
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f995 	bl	80029e8 <UART_EndTransmit_IT>
    return;
 80026be:	bf00      	nop
 80026c0:	e000      	b.n	80026c4 <HAL_UART_IRQHandler+0x1ec>
    return;
 80026c2:	bf00      	nop
  }
}
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	08002917 	.word	0x08002917

080026d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	d11e      	bne.n	8002760 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002736:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002756:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f7fd ff23 	bl	80005ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7ff ffb0 	bl	80026e2 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bf14      	ite	ne
 80027aa:	2301      	movne	r3, #1
 80027ac:	2300      	moveq	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b21      	cmp	r3, #33	; 0x21
 80027bc:	d108      	bne.n	80027d0 <UART_DMAError+0x46>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2200      	movs	r2, #0
 80027c8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80027ca:	68b8      	ldr	r0, [r7, #8]
 80027cc:	f000 f871 	bl	80028b2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	bf14      	ite	ne
 80027de:	2301      	movne	r3, #1
 80027e0:	2300      	moveq	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b22      	cmp	r3, #34	; 0x22
 80027f0:	d108      	bne.n	8002804 <UART_DMAError+0x7a>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2200      	movs	r2, #0
 80027fc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80027fe:	68b8      	ldr	r0, [r7, #8]
 8002800:	f000 f86c 	bl	80028dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002808:	f043 0210 	orr.w	r2, r3, #16
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002810:	68b8      	ldr	r0, [r7, #8]
 8002812:	f7ff ff6f 	bl	80026f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	4613      	mov	r3, r2
 800282c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800282e:	e02c      	b.n	800288a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d028      	beq.n	800288a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <UART_WaitOnFlagUntilTimeout+0x30>
 800283e:	f7fe f985 	bl	8000b4c <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	429a      	cmp	r2, r3
 800284c:	d21d      	bcs.n	800288a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800285c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0201 	bic.w	r2, r2, #1
 800286c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e00f      	b.n	80028aa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4013      	ands	r3, r2
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	429a      	cmp	r2, r3
 8002898:	bf0c      	ite	eq
 800289a:	2301      	moveq	r3, #1
 800289c:	2300      	movne	r3, #0
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d0c3      	beq.n	8002830 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80028c8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr

08002916 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f7ff fedf 	bl	80026f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b21      	cmp	r3, #33	; 0x21
 8002950:	d144      	bne.n	80029dc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800295a:	d11a      	bne.n	8002992 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002970:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d105      	bne.n	8002986 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	1c9a      	adds	r2, r3, #2
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	621a      	str	r2, [r3, #32]
 8002984:	e00e      	b.n	80029a4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	621a      	str	r2, [r3, #32]
 8002990:	e008      	b.n	80029a4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	1c59      	adds	r1, r3, #1
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6211      	str	r1, [r2, #32]
 800299c:	781a      	ldrb	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4619      	mov	r1, r3
 80029b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10f      	bne.n	80029d8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	e000      	b.n	80029de <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80029dc:	2302      	movs	r3, #2
  }
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff fe61 	bl	80026d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b22      	cmp	r3, #34	; 0x22
 8002a2a:	d171      	bne.n	8002b10 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a34:	d123      	bne.n	8002a7e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10e      	bne.n	8002a62 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	1c9a      	adds	r2, r3, #2
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a60:	e029      	b.n	8002ab6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a7c:	e01b      	b.n	8002ab6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10a      	bne.n	8002a9c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6858      	ldr	r0, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	1c59      	adds	r1, r3, #1
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6291      	str	r1, [r2, #40]	; 0x28
 8002a96:	b2c2      	uxtb	r2, r0
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	e00c      	b.n	8002ab6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	1c58      	adds	r0, r3, #1
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	6288      	str	r0, [r1, #40]	; 0x28
 8002aae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d120      	bne.n	8002b0c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0220 	bic.w	r2, r2, #32
 8002ad8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ae8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695a      	ldr	r2, [r3, #20]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0201 	bic.w	r2, r2, #1
 8002af8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fd fd52 	bl	80005ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e002      	b.n	8002b12 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e000      	b.n	8002b12 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002b10:	2302      	movs	r3, #2
  }
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b56:	f023 030c 	bic.w	r3, r3, #12
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	68f9      	ldr	r1, [r7, #12]
 8002b60:	430b      	orrs	r3, r1
 8002b62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a52      	ldr	r2, [pc, #328]	; (8002cc8 <UART_SetConfig+0x1ac>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d14e      	bne.n	8002c22 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b84:	f7ff f8e8 	bl	8001d58 <HAL_RCC_GetPCLK2Freq>
 8002b88:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	009a      	lsls	r2, r3, #2
 8002b94:	441a      	add	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba0:	4a4a      	ldr	r2, [pc, #296]	; (8002ccc <UART_SetConfig+0x1b0>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	0119      	lsls	r1, r3, #4
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009a      	lsls	r2, r3, #2
 8002bb4:	441a      	add	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bc0:	4b42      	ldr	r3, [pc, #264]	; (8002ccc <UART_SetConfig+0x1b0>)
 8002bc2:	fba3 0302 	umull	r0, r3, r3, r2
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	2064      	movs	r0, #100	; 0x64
 8002bca:	fb00 f303 	mul.w	r3, r0, r3
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	3332      	adds	r3, #50	; 0x32
 8002bd4:	4a3d      	ldr	r2, [pc, #244]	; (8002ccc <UART_SetConfig+0x1b0>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be0:	4419      	add	r1, r3
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	009a      	lsls	r2, r3, #2
 8002bec:	441a      	add	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bf8:	4b34      	ldr	r3, [pc, #208]	; (8002ccc <UART_SetConfig+0x1b0>)
 8002bfa:	fba3 0302 	umull	r0, r3, r3, r2
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2064      	movs	r0, #100	; 0x64
 8002c02:	fb00 f303 	mul.w	r3, r0, r3
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	3332      	adds	r3, #50	; 0x32
 8002c0c:	4a2f      	ldr	r2, [pc, #188]	; (8002ccc <UART_SetConfig+0x1b0>)
 8002c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	f003 020f 	and.w	r2, r3, #15
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	440a      	add	r2, r1
 8002c1e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002c20:	e04d      	b.n	8002cbe <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c22:	f7ff f885 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 8002c26:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	009a      	lsls	r2, r3, #2
 8002c32:	441a      	add	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3e:	4a23      	ldr	r2, [pc, #140]	; (8002ccc <UART_SetConfig+0x1b0>)
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	0119      	lsls	r1, r3, #4
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	009a      	lsls	r2, r3, #2
 8002c52:	441a      	add	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <UART_SetConfig+0x1b0>)
 8002c60:	fba3 0302 	umull	r0, r3, r3, r2
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	2064      	movs	r0, #100	; 0x64
 8002c68:	fb00 f303 	mul.w	r3, r0, r3
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	3332      	adds	r3, #50	; 0x32
 8002c72:	4a16      	ldr	r2, [pc, #88]	; (8002ccc <UART_SetConfig+0x1b0>)
 8002c74:	fba2 2303 	umull	r2, r3, r2, r3
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c7e:	4419      	add	r1, r3
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	009a      	lsls	r2, r3, #2
 8002c8a:	441a      	add	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <UART_SetConfig+0x1b0>)
 8002c98:	fba3 0302 	umull	r0, r3, r3, r2
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	2064      	movs	r0, #100	; 0x64
 8002ca0:	fb00 f303 	mul.w	r3, r0, r3
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	3332      	adds	r3, #50	; 0x32
 8002caa:	4a08      	ldr	r2, [pc, #32]	; (8002ccc <UART_SetConfig+0x1b0>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	f003 020f 	and.w	r2, r3, #15
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	440a      	add	r2, r1
 8002cbc:	609a      	str	r2, [r3, #8]
}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40013800 	.word	0x40013800
 8002ccc:	51eb851f 	.word	0x51eb851f

08002cd0 <__errno>:
 8002cd0:	4b01      	ldr	r3, [pc, #4]	; (8002cd8 <__errno+0x8>)
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	2000000c 	.word	0x2000000c

08002cdc <__libc_init_array>:
 8002cdc:	b570      	push	{r4, r5, r6, lr}
 8002cde:	2500      	movs	r5, #0
 8002ce0:	4e0c      	ldr	r6, [pc, #48]	; (8002d14 <__libc_init_array+0x38>)
 8002ce2:	4c0d      	ldr	r4, [pc, #52]	; (8002d18 <__libc_init_array+0x3c>)
 8002ce4:	1ba4      	subs	r4, r4, r6
 8002ce6:	10a4      	asrs	r4, r4, #2
 8002ce8:	42a5      	cmp	r5, r4
 8002cea:	d109      	bne.n	8002d00 <__libc_init_array+0x24>
 8002cec:	f000 fc34 	bl	8003558 <_init>
 8002cf0:	2500      	movs	r5, #0
 8002cf2:	4e0a      	ldr	r6, [pc, #40]	; (8002d1c <__libc_init_array+0x40>)
 8002cf4:	4c0a      	ldr	r4, [pc, #40]	; (8002d20 <__libc_init_array+0x44>)
 8002cf6:	1ba4      	subs	r4, r4, r6
 8002cf8:	10a4      	asrs	r4, r4, #2
 8002cfa:	42a5      	cmp	r5, r4
 8002cfc:	d105      	bne.n	8002d0a <__libc_init_array+0x2e>
 8002cfe:	bd70      	pop	{r4, r5, r6, pc}
 8002d00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d04:	4798      	blx	r3
 8002d06:	3501      	adds	r5, #1
 8002d08:	e7ee      	b.n	8002ce8 <__libc_init_array+0xc>
 8002d0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d0e:	4798      	blx	r3
 8002d10:	3501      	adds	r5, #1
 8002d12:	e7f2      	b.n	8002cfa <__libc_init_array+0x1e>
 8002d14:	0800360c 	.word	0x0800360c
 8002d18:	0800360c 	.word	0x0800360c
 8002d1c:	0800360c 	.word	0x0800360c
 8002d20:	08003610 	.word	0x08003610

08002d24 <memset>:
 8002d24:	4603      	mov	r3, r0
 8002d26:	4402      	add	r2, r0
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d100      	bne.n	8002d2e <memset+0xa>
 8002d2c:	4770      	bx	lr
 8002d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d32:	e7f9      	b.n	8002d28 <memset+0x4>

08002d34 <siprintf>:
 8002d34:	b40e      	push	{r1, r2, r3}
 8002d36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d3a:	b500      	push	{lr}
 8002d3c:	b09c      	sub	sp, #112	; 0x70
 8002d3e:	ab1d      	add	r3, sp, #116	; 0x74
 8002d40:	9002      	str	r0, [sp, #8]
 8002d42:	9006      	str	r0, [sp, #24]
 8002d44:	9107      	str	r1, [sp, #28]
 8002d46:	9104      	str	r1, [sp, #16]
 8002d48:	4808      	ldr	r0, [pc, #32]	; (8002d6c <siprintf+0x38>)
 8002d4a:	4909      	ldr	r1, [pc, #36]	; (8002d70 <siprintf+0x3c>)
 8002d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d50:	9105      	str	r1, [sp, #20]
 8002d52:	6800      	ldr	r0, [r0, #0]
 8002d54:	a902      	add	r1, sp, #8
 8002d56:	9301      	str	r3, [sp, #4]
 8002d58:	f000 f866 	bl	8002e28 <_svfiprintf_r>
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	9b02      	ldr	r3, [sp, #8]
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	b01c      	add	sp, #112	; 0x70
 8002d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d68:	b003      	add	sp, #12
 8002d6a:	4770      	bx	lr
 8002d6c:	2000000c 	.word	0x2000000c
 8002d70:	ffff0208 	.word	0xffff0208

08002d74 <__ssputs_r>:
 8002d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d78:	688e      	ldr	r6, [r1, #8]
 8002d7a:	4682      	mov	sl, r0
 8002d7c:	429e      	cmp	r6, r3
 8002d7e:	460c      	mov	r4, r1
 8002d80:	4690      	mov	r8, r2
 8002d82:	4699      	mov	r9, r3
 8002d84:	d837      	bhi.n	8002df6 <__ssputs_r+0x82>
 8002d86:	898a      	ldrh	r2, [r1, #12]
 8002d88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d8c:	d031      	beq.n	8002df2 <__ssputs_r+0x7e>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	6825      	ldr	r5, [r4, #0]
 8002d92:	6909      	ldr	r1, [r1, #16]
 8002d94:	1a6f      	subs	r7, r5, r1
 8002d96:	6965      	ldr	r5, [r4, #20]
 8002d98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002da0:	f109 0301 	add.w	r3, r9, #1
 8002da4:	443b      	add	r3, r7
 8002da6:	429d      	cmp	r5, r3
 8002da8:	bf38      	it	cc
 8002daa:	461d      	movcc	r5, r3
 8002dac:	0553      	lsls	r3, r2, #21
 8002dae:	d530      	bpl.n	8002e12 <__ssputs_r+0x9e>
 8002db0:	4629      	mov	r1, r5
 8002db2:	f000 fb37 	bl	8003424 <_malloc_r>
 8002db6:	4606      	mov	r6, r0
 8002db8:	b950      	cbnz	r0, 8002dd0 <__ssputs_r+0x5c>
 8002dba:	230c      	movs	r3, #12
 8002dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc0:	f8ca 3000 	str.w	r3, [sl]
 8002dc4:	89a3      	ldrh	r3, [r4, #12]
 8002dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dca:	81a3      	strh	r3, [r4, #12]
 8002dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dd0:	463a      	mov	r2, r7
 8002dd2:	6921      	ldr	r1, [r4, #16]
 8002dd4:	f000 fab6 	bl	8003344 <memcpy>
 8002dd8:	89a3      	ldrh	r3, [r4, #12]
 8002dda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de2:	81a3      	strh	r3, [r4, #12]
 8002de4:	6126      	str	r6, [r4, #16]
 8002de6:	443e      	add	r6, r7
 8002de8:	6026      	str	r6, [r4, #0]
 8002dea:	464e      	mov	r6, r9
 8002dec:	6165      	str	r5, [r4, #20]
 8002dee:	1bed      	subs	r5, r5, r7
 8002df0:	60a5      	str	r5, [r4, #8]
 8002df2:	454e      	cmp	r6, r9
 8002df4:	d900      	bls.n	8002df8 <__ssputs_r+0x84>
 8002df6:	464e      	mov	r6, r9
 8002df8:	4632      	mov	r2, r6
 8002dfa:	4641      	mov	r1, r8
 8002dfc:	6820      	ldr	r0, [r4, #0]
 8002dfe:	f000 faac 	bl	800335a <memmove>
 8002e02:	68a3      	ldr	r3, [r4, #8]
 8002e04:	2000      	movs	r0, #0
 8002e06:	1b9b      	subs	r3, r3, r6
 8002e08:	60a3      	str	r3, [r4, #8]
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	441e      	add	r6, r3
 8002e0e:	6026      	str	r6, [r4, #0]
 8002e10:	e7dc      	b.n	8002dcc <__ssputs_r+0x58>
 8002e12:	462a      	mov	r2, r5
 8002e14:	f000 fb60 	bl	80034d8 <_realloc_r>
 8002e18:	4606      	mov	r6, r0
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	d1e2      	bne.n	8002de4 <__ssputs_r+0x70>
 8002e1e:	6921      	ldr	r1, [r4, #16]
 8002e20:	4650      	mov	r0, sl
 8002e22:	f000 fab3 	bl	800338c <_free_r>
 8002e26:	e7c8      	b.n	8002dba <__ssputs_r+0x46>

08002e28 <_svfiprintf_r>:
 8002e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e2c:	461d      	mov	r5, r3
 8002e2e:	898b      	ldrh	r3, [r1, #12]
 8002e30:	b09d      	sub	sp, #116	; 0x74
 8002e32:	061f      	lsls	r7, r3, #24
 8002e34:	4680      	mov	r8, r0
 8002e36:	460c      	mov	r4, r1
 8002e38:	4616      	mov	r6, r2
 8002e3a:	d50f      	bpl.n	8002e5c <_svfiprintf_r+0x34>
 8002e3c:	690b      	ldr	r3, [r1, #16]
 8002e3e:	b96b      	cbnz	r3, 8002e5c <_svfiprintf_r+0x34>
 8002e40:	2140      	movs	r1, #64	; 0x40
 8002e42:	f000 faef 	bl	8003424 <_malloc_r>
 8002e46:	6020      	str	r0, [r4, #0]
 8002e48:	6120      	str	r0, [r4, #16]
 8002e4a:	b928      	cbnz	r0, 8002e58 <_svfiprintf_r+0x30>
 8002e4c:	230c      	movs	r3, #12
 8002e4e:	f8c8 3000 	str.w	r3, [r8]
 8002e52:	f04f 30ff 	mov.w	r0, #4294967295
 8002e56:	e0c8      	b.n	8002fea <_svfiprintf_r+0x1c2>
 8002e58:	2340      	movs	r3, #64	; 0x40
 8002e5a:	6163      	str	r3, [r4, #20]
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8002e60:	2320      	movs	r3, #32
 8002e62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e66:	2330      	movs	r3, #48	; 0x30
 8002e68:	f04f 0b01 	mov.w	fp, #1
 8002e6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e70:	9503      	str	r5, [sp, #12]
 8002e72:	4637      	mov	r7, r6
 8002e74:	463d      	mov	r5, r7
 8002e76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002e7a:	b10b      	cbz	r3, 8002e80 <_svfiprintf_r+0x58>
 8002e7c:	2b25      	cmp	r3, #37	; 0x25
 8002e7e:	d13e      	bne.n	8002efe <_svfiprintf_r+0xd6>
 8002e80:	ebb7 0a06 	subs.w	sl, r7, r6
 8002e84:	d00b      	beq.n	8002e9e <_svfiprintf_r+0x76>
 8002e86:	4653      	mov	r3, sl
 8002e88:	4632      	mov	r2, r6
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	4640      	mov	r0, r8
 8002e8e:	f7ff ff71 	bl	8002d74 <__ssputs_r>
 8002e92:	3001      	adds	r0, #1
 8002e94:	f000 80a4 	beq.w	8002fe0 <_svfiprintf_r+0x1b8>
 8002e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e9a:	4453      	add	r3, sl
 8002e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e9e:	783b      	ldrb	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 809d 	beq.w	8002fe0 <_svfiprintf_r+0x1b8>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002eb0:	9304      	str	r3, [sp, #16]
 8002eb2:	9307      	str	r3, [sp, #28]
 8002eb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002eb8:	931a      	str	r3, [sp, #104]	; 0x68
 8002eba:	462f      	mov	r7, r5
 8002ebc:	2205      	movs	r2, #5
 8002ebe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002ec2:	4850      	ldr	r0, [pc, #320]	; (8003004 <_svfiprintf_r+0x1dc>)
 8002ec4:	f000 fa30 	bl	8003328 <memchr>
 8002ec8:	9b04      	ldr	r3, [sp, #16]
 8002eca:	b9d0      	cbnz	r0, 8002f02 <_svfiprintf_r+0xda>
 8002ecc:	06d9      	lsls	r1, r3, #27
 8002ece:	bf44      	itt	mi
 8002ed0:	2220      	movmi	r2, #32
 8002ed2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ed6:	071a      	lsls	r2, r3, #28
 8002ed8:	bf44      	itt	mi
 8002eda:	222b      	movmi	r2, #43	; 0x2b
 8002edc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ee0:	782a      	ldrb	r2, [r5, #0]
 8002ee2:	2a2a      	cmp	r2, #42	; 0x2a
 8002ee4:	d015      	beq.n	8002f12 <_svfiprintf_r+0xea>
 8002ee6:	462f      	mov	r7, r5
 8002ee8:	2000      	movs	r0, #0
 8002eea:	250a      	movs	r5, #10
 8002eec:	9a07      	ldr	r2, [sp, #28]
 8002eee:	4639      	mov	r1, r7
 8002ef0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ef4:	3b30      	subs	r3, #48	; 0x30
 8002ef6:	2b09      	cmp	r3, #9
 8002ef8:	d94d      	bls.n	8002f96 <_svfiprintf_r+0x16e>
 8002efa:	b1b8      	cbz	r0, 8002f2c <_svfiprintf_r+0x104>
 8002efc:	e00f      	b.n	8002f1e <_svfiprintf_r+0xf6>
 8002efe:	462f      	mov	r7, r5
 8002f00:	e7b8      	b.n	8002e74 <_svfiprintf_r+0x4c>
 8002f02:	4a40      	ldr	r2, [pc, #256]	; (8003004 <_svfiprintf_r+0x1dc>)
 8002f04:	463d      	mov	r5, r7
 8002f06:	1a80      	subs	r0, r0, r2
 8002f08:	fa0b f000 	lsl.w	r0, fp, r0
 8002f0c:	4318      	orrs	r0, r3
 8002f0e:	9004      	str	r0, [sp, #16]
 8002f10:	e7d3      	b.n	8002eba <_svfiprintf_r+0x92>
 8002f12:	9a03      	ldr	r2, [sp, #12]
 8002f14:	1d11      	adds	r1, r2, #4
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	9103      	str	r1, [sp, #12]
 8002f1a:	2a00      	cmp	r2, #0
 8002f1c:	db01      	blt.n	8002f22 <_svfiprintf_r+0xfa>
 8002f1e:	9207      	str	r2, [sp, #28]
 8002f20:	e004      	b.n	8002f2c <_svfiprintf_r+0x104>
 8002f22:	4252      	negs	r2, r2
 8002f24:	f043 0302 	orr.w	r3, r3, #2
 8002f28:	9207      	str	r2, [sp, #28]
 8002f2a:	9304      	str	r3, [sp, #16]
 8002f2c:	783b      	ldrb	r3, [r7, #0]
 8002f2e:	2b2e      	cmp	r3, #46	; 0x2e
 8002f30:	d10c      	bne.n	8002f4c <_svfiprintf_r+0x124>
 8002f32:	787b      	ldrb	r3, [r7, #1]
 8002f34:	2b2a      	cmp	r3, #42	; 0x2a
 8002f36:	d133      	bne.n	8002fa0 <_svfiprintf_r+0x178>
 8002f38:	9b03      	ldr	r3, [sp, #12]
 8002f3a:	3702      	adds	r7, #2
 8002f3c:	1d1a      	adds	r2, r3, #4
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	9203      	str	r2, [sp, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	bfb8      	it	lt
 8002f46:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f4a:	9305      	str	r3, [sp, #20]
 8002f4c:	4d2e      	ldr	r5, [pc, #184]	; (8003008 <_svfiprintf_r+0x1e0>)
 8002f4e:	2203      	movs	r2, #3
 8002f50:	7839      	ldrb	r1, [r7, #0]
 8002f52:	4628      	mov	r0, r5
 8002f54:	f000 f9e8 	bl	8003328 <memchr>
 8002f58:	b138      	cbz	r0, 8002f6a <_svfiprintf_r+0x142>
 8002f5a:	2340      	movs	r3, #64	; 0x40
 8002f5c:	1b40      	subs	r0, r0, r5
 8002f5e:	fa03 f000 	lsl.w	r0, r3, r0
 8002f62:	9b04      	ldr	r3, [sp, #16]
 8002f64:	3701      	adds	r7, #1
 8002f66:	4303      	orrs	r3, r0
 8002f68:	9304      	str	r3, [sp, #16]
 8002f6a:	7839      	ldrb	r1, [r7, #0]
 8002f6c:	2206      	movs	r2, #6
 8002f6e:	4827      	ldr	r0, [pc, #156]	; (800300c <_svfiprintf_r+0x1e4>)
 8002f70:	1c7e      	adds	r6, r7, #1
 8002f72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f76:	f000 f9d7 	bl	8003328 <memchr>
 8002f7a:	2800      	cmp	r0, #0
 8002f7c:	d038      	beq.n	8002ff0 <_svfiprintf_r+0x1c8>
 8002f7e:	4b24      	ldr	r3, [pc, #144]	; (8003010 <_svfiprintf_r+0x1e8>)
 8002f80:	bb13      	cbnz	r3, 8002fc8 <_svfiprintf_r+0x1a0>
 8002f82:	9b03      	ldr	r3, [sp, #12]
 8002f84:	3307      	adds	r3, #7
 8002f86:	f023 0307 	bic.w	r3, r3, #7
 8002f8a:	3308      	adds	r3, #8
 8002f8c:	9303      	str	r3, [sp, #12]
 8002f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f90:	444b      	add	r3, r9
 8002f92:	9309      	str	r3, [sp, #36]	; 0x24
 8002f94:	e76d      	b.n	8002e72 <_svfiprintf_r+0x4a>
 8002f96:	fb05 3202 	mla	r2, r5, r2, r3
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	460f      	mov	r7, r1
 8002f9e:	e7a6      	b.n	8002eee <_svfiprintf_r+0xc6>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	250a      	movs	r5, #10
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	3701      	adds	r7, #1
 8002fa8:	9305      	str	r3, [sp, #20]
 8002faa:	4638      	mov	r0, r7
 8002fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fb0:	3a30      	subs	r2, #48	; 0x30
 8002fb2:	2a09      	cmp	r2, #9
 8002fb4:	d903      	bls.n	8002fbe <_svfiprintf_r+0x196>
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0c8      	beq.n	8002f4c <_svfiprintf_r+0x124>
 8002fba:	9105      	str	r1, [sp, #20]
 8002fbc:	e7c6      	b.n	8002f4c <_svfiprintf_r+0x124>
 8002fbe:	fb05 2101 	mla	r1, r5, r1, r2
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	4607      	mov	r7, r0
 8002fc6:	e7f0      	b.n	8002faa <_svfiprintf_r+0x182>
 8002fc8:	ab03      	add	r3, sp, #12
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	4622      	mov	r2, r4
 8002fce:	4b11      	ldr	r3, [pc, #68]	; (8003014 <_svfiprintf_r+0x1ec>)
 8002fd0:	a904      	add	r1, sp, #16
 8002fd2:	4640      	mov	r0, r8
 8002fd4:	f3af 8000 	nop.w
 8002fd8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002fdc:	4681      	mov	r9, r0
 8002fde:	d1d6      	bne.n	8002f8e <_svfiprintf_r+0x166>
 8002fe0:	89a3      	ldrh	r3, [r4, #12]
 8002fe2:	065b      	lsls	r3, r3, #25
 8002fe4:	f53f af35 	bmi.w	8002e52 <_svfiprintf_r+0x2a>
 8002fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fea:	b01d      	add	sp, #116	; 0x74
 8002fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ff0:	ab03      	add	r3, sp, #12
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	4622      	mov	r2, r4
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <_svfiprintf_r+0x1ec>)
 8002ff8:	a904      	add	r1, sp, #16
 8002ffa:	4640      	mov	r0, r8
 8002ffc:	f000 f882 	bl	8003104 <_printf_i>
 8003000:	e7ea      	b.n	8002fd8 <_svfiprintf_r+0x1b0>
 8003002:	bf00      	nop
 8003004:	080035d8 	.word	0x080035d8
 8003008:	080035de 	.word	0x080035de
 800300c:	080035e2 	.word	0x080035e2
 8003010:	00000000 	.word	0x00000000
 8003014:	08002d75 	.word	0x08002d75

08003018 <_printf_common>:
 8003018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800301c:	4691      	mov	r9, r2
 800301e:	461f      	mov	r7, r3
 8003020:	688a      	ldr	r2, [r1, #8]
 8003022:	690b      	ldr	r3, [r1, #16]
 8003024:	4606      	mov	r6, r0
 8003026:	4293      	cmp	r3, r2
 8003028:	bfb8      	it	lt
 800302a:	4613      	movlt	r3, r2
 800302c:	f8c9 3000 	str.w	r3, [r9]
 8003030:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003034:	460c      	mov	r4, r1
 8003036:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800303a:	b112      	cbz	r2, 8003042 <_printf_common+0x2a>
 800303c:	3301      	adds	r3, #1
 800303e:	f8c9 3000 	str.w	r3, [r9]
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	0699      	lsls	r1, r3, #26
 8003046:	bf42      	ittt	mi
 8003048:	f8d9 3000 	ldrmi.w	r3, [r9]
 800304c:	3302      	addmi	r3, #2
 800304e:	f8c9 3000 	strmi.w	r3, [r9]
 8003052:	6825      	ldr	r5, [r4, #0]
 8003054:	f015 0506 	ands.w	r5, r5, #6
 8003058:	d107      	bne.n	800306a <_printf_common+0x52>
 800305a:	f104 0a19 	add.w	sl, r4, #25
 800305e:	68e3      	ldr	r3, [r4, #12]
 8003060:	f8d9 2000 	ldr.w	r2, [r9]
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	42ab      	cmp	r3, r5
 8003068:	dc29      	bgt.n	80030be <_printf_common+0xa6>
 800306a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800306e:	6822      	ldr	r2, [r4, #0]
 8003070:	3300      	adds	r3, #0
 8003072:	bf18      	it	ne
 8003074:	2301      	movne	r3, #1
 8003076:	0692      	lsls	r2, r2, #26
 8003078:	d42e      	bmi.n	80030d8 <_printf_common+0xc0>
 800307a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800307e:	4639      	mov	r1, r7
 8003080:	4630      	mov	r0, r6
 8003082:	47c0      	blx	r8
 8003084:	3001      	adds	r0, #1
 8003086:	d021      	beq.n	80030cc <_printf_common+0xb4>
 8003088:	6823      	ldr	r3, [r4, #0]
 800308a:	68e5      	ldr	r5, [r4, #12]
 800308c:	f003 0306 	and.w	r3, r3, #6
 8003090:	2b04      	cmp	r3, #4
 8003092:	bf18      	it	ne
 8003094:	2500      	movne	r5, #0
 8003096:	f8d9 2000 	ldr.w	r2, [r9]
 800309a:	f04f 0900 	mov.w	r9, #0
 800309e:	bf08      	it	eq
 80030a0:	1aad      	subeq	r5, r5, r2
 80030a2:	68a3      	ldr	r3, [r4, #8]
 80030a4:	6922      	ldr	r2, [r4, #16]
 80030a6:	bf08      	it	eq
 80030a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030ac:	4293      	cmp	r3, r2
 80030ae:	bfc4      	itt	gt
 80030b0:	1a9b      	subgt	r3, r3, r2
 80030b2:	18ed      	addgt	r5, r5, r3
 80030b4:	341a      	adds	r4, #26
 80030b6:	454d      	cmp	r5, r9
 80030b8:	d11a      	bne.n	80030f0 <_printf_common+0xd8>
 80030ba:	2000      	movs	r0, #0
 80030bc:	e008      	b.n	80030d0 <_printf_common+0xb8>
 80030be:	2301      	movs	r3, #1
 80030c0:	4652      	mov	r2, sl
 80030c2:	4639      	mov	r1, r7
 80030c4:	4630      	mov	r0, r6
 80030c6:	47c0      	blx	r8
 80030c8:	3001      	adds	r0, #1
 80030ca:	d103      	bne.n	80030d4 <_printf_common+0xbc>
 80030cc:	f04f 30ff 	mov.w	r0, #4294967295
 80030d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030d4:	3501      	adds	r5, #1
 80030d6:	e7c2      	b.n	800305e <_printf_common+0x46>
 80030d8:	2030      	movs	r0, #48	; 0x30
 80030da:	18e1      	adds	r1, r4, r3
 80030dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030e6:	4422      	add	r2, r4
 80030e8:	3302      	adds	r3, #2
 80030ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030ee:	e7c4      	b.n	800307a <_printf_common+0x62>
 80030f0:	2301      	movs	r3, #1
 80030f2:	4622      	mov	r2, r4
 80030f4:	4639      	mov	r1, r7
 80030f6:	4630      	mov	r0, r6
 80030f8:	47c0      	blx	r8
 80030fa:	3001      	adds	r0, #1
 80030fc:	d0e6      	beq.n	80030cc <_printf_common+0xb4>
 80030fe:	f109 0901 	add.w	r9, r9, #1
 8003102:	e7d8      	b.n	80030b6 <_printf_common+0x9e>

08003104 <_printf_i>:
 8003104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003108:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800310c:	460c      	mov	r4, r1
 800310e:	7e09      	ldrb	r1, [r1, #24]
 8003110:	b085      	sub	sp, #20
 8003112:	296e      	cmp	r1, #110	; 0x6e
 8003114:	4617      	mov	r7, r2
 8003116:	4606      	mov	r6, r0
 8003118:	4698      	mov	r8, r3
 800311a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800311c:	f000 80b3 	beq.w	8003286 <_printf_i+0x182>
 8003120:	d822      	bhi.n	8003168 <_printf_i+0x64>
 8003122:	2963      	cmp	r1, #99	; 0x63
 8003124:	d036      	beq.n	8003194 <_printf_i+0x90>
 8003126:	d80a      	bhi.n	800313e <_printf_i+0x3a>
 8003128:	2900      	cmp	r1, #0
 800312a:	f000 80b9 	beq.w	80032a0 <_printf_i+0x19c>
 800312e:	2958      	cmp	r1, #88	; 0x58
 8003130:	f000 8083 	beq.w	800323a <_printf_i+0x136>
 8003134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003138:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800313c:	e032      	b.n	80031a4 <_printf_i+0xa0>
 800313e:	2964      	cmp	r1, #100	; 0x64
 8003140:	d001      	beq.n	8003146 <_printf_i+0x42>
 8003142:	2969      	cmp	r1, #105	; 0x69
 8003144:	d1f6      	bne.n	8003134 <_printf_i+0x30>
 8003146:	6820      	ldr	r0, [r4, #0]
 8003148:	6813      	ldr	r3, [r2, #0]
 800314a:	0605      	lsls	r5, r0, #24
 800314c:	f103 0104 	add.w	r1, r3, #4
 8003150:	d52a      	bpl.n	80031a8 <_printf_i+0xa4>
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6011      	str	r1, [r2, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	da03      	bge.n	8003162 <_printf_i+0x5e>
 800315a:	222d      	movs	r2, #45	; 0x2d
 800315c:	425b      	negs	r3, r3
 800315e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003162:	486f      	ldr	r0, [pc, #444]	; (8003320 <_printf_i+0x21c>)
 8003164:	220a      	movs	r2, #10
 8003166:	e039      	b.n	80031dc <_printf_i+0xd8>
 8003168:	2973      	cmp	r1, #115	; 0x73
 800316a:	f000 809d 	beq.w	80032a8 <_printf_i+0x1a4>
 800316e:	d808      	bhi.n	8003182 <_printf_i+0x7e>
 8003170:	296f      	cmp	r1, #111	; 0x6f
 8003172:	d020      	beq.n	80031b6 <_printf_i+0xb2>
 8003174:	2970      	cmp	r1, #112	; 0x70
 8003176:	d1dd      	bne.n	8003134 <_printf_i+0x30>
 8003178:	6823      	ldr	r3, [r4, #0]
 800317a:	f043 0320 	orr.w	r3, r3, #32
 800317e:	6023      	str	r3, [r4, #0]
 8003180:	e003      	b.n	800318a <_printf_i+0x86>
 8003182:	2975      	cmp	r1, #117	; 0x75
 8003184:	d017      	beq.n	80031b6 <_printf_i+0xb2>
 8003186:	2978      	cmp	r1, #120	; 0x78
 8003188:	d1d4      	bne.n	8003134 <_printf_i+0x30>
 800318a:	2378      	movs	r3, #120	; 0x78
 800318c:	4865      	ldr	r0, [pc, #404]	; (8003324 <_printf_i+0x220>)
 800318e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003192:	e055      	b.n	8003240 <_printf_i+0x13c>
 8003194:	6813      	ldr	r3, [r2, #0]
 8003196:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800319a:	1d19      	adds	r1, r3, #4
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6011      	str	r1, [r2, #0]
 80031a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031a4:	2301      	movs	r3, #1
 80031a6:	e08c      	b.n	80032c2 <_printf_i+0x1be>
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80031ae:	6011      	str	r1, [r2, #0]
 80031b0:	bf18      	it	ne
 80031b2:	b21b      	sxthne	r3, r3
 80031b4:	e7cf      	b.n	8003156 <_printf_i+0x52>
 80031b6:	6813      	ldr	r3, [r2, #0]
 80031b8:	6825      	ldr	r5, [r4, #0]
 80031ba:	1d18      	adds	r0, r3, #4
 80031bc:	6010      	str	r0, [r2, #0]
 80031be:	0628      	lsls	r0, r5, #24
 80031c0:	d501      	bpl.n	80031c6 <_printf_i+0xc2>
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	e002      	b.n	80031cc <_printf_i+0xc8>
 80031c6:	0668      	lsls	r0, r5, #25
 80031c8:	d5fb      	bpl.n	80031c2 <_printf_i+0xbe>
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	296f      	cmp	r1, #111	; 0x6f
 80031ce:	bf14      	ite	ne
 80031d0:	220a      	movne	r2, #10
 80031d2:	2208      	moveq	r2, #8
 80031d4:	4852      	ldr	r0, [pc, #328]	; (8003320 <_printf_i+0x21c>)
 80031d6:	2100      	movs	r1, #0
 80031d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031dc:	6865      	ldr	r5, [r4, #4]
 80031de:	2d00      	cmp	r5, #0
 80031e0:	60a5      	str	r5, [r4, #8]
 80031e2:	f2c0 8095 	blt.w	8003310 <_printf_i+0x20c>
 80031e6:	6821      	ldr	r1, [r4, #0]
 80031e8:	f021 0104 	bic.w	r1, r1, #4
 80031ec:	6021      	str	r1, [r4, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d13d      	bne.n	800326e <_printf_i+0x16a>
 80031f2:	2d00      	cmp	r5, #0
 80031f4:	f040 808e 	bne.w	8003314 <_printf_i+0x210>
 80031f8:	4665      	mov	r5, ip
 80031fa:	2a08      	cmp	r2, #8
 80031fc:	d10b      	bne.n	8003216 <_printf_i+0x112>
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	07db      	lsls	r3, r3, #31
 8003202:	d508      	bpl.n	8003216 <_printf_i+0x112>
 8003204:	6923      	ldr	r3, [r4, #16]
 8003206:	6862      	ldr	r2, [r4, #4]
 8003208:	429a      	cmp	r2, r3
 800320a:	bfde      	ittt	le
 800320c:	2330      	movle	r3, #48	; 0x30
 800320e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003212:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003216:	ebac 0305 	sub.w	r3, ip, r5
 800321a:	6123      	str	r3, [r4, #16]
 800321c:	f8cd 8000 	str.w	r8, [sp]
 8003220:	463b      	mov	r3, r7
 8003222:	aa03      	add	r2, sp, #12
 8003224:	4621      	mov	r1, r4
 8003226:	4630      	mov	r0, r6
 8003228:	f7ff fef6 	bl	8003018 <_printf_common>
 800322c:	3001      	adds	r0, #1
 800322e:	d14d      	bne.n	80032cc <_printf_i+0x1c8>
 8003230:	f04f 30ff 	mov.w	r0, #4294967295
 8003234:	b005      	add	sp, #20
 8003236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800323a:	4839      	ldr	r0, [pc, #228]	; (8003320 <_printf_i+0x21c>)
 800323c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003240:	6813      	ldr	r3, [r2, #0]
 8003242:	6821      	ldr	r1, [r4, #0]
 8003244:	1d1d      	adds	r5, r3, #4
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6015      	str	r5, [r2, #0]
 800324a:	060a      	lsls	r2, r1, #24
 800324c:	d50b      	bpl.n	8003266 <_printf_i+0x162>
 800324e:	07ca      	lsls	r2, r1, #31
 8003250:	bf44      	itt	mi
 8003252:	f041 0120 	orrmi.w	r1, r1, #32
 8003256:	6021      	strmi	r1, [r4, #0]
 8003258:	b91b      	cbnz	r3, 8003262 <_printf_i+0x15e>
 800325a:	6822      	ldr	r2, [r4, #0]
 800325c:	f022 0220 	bic.w	r2, r2, #32
 8003260:	6022      	str	r2, [r4, #0]
 8003262:	2210      	movs	r2, #16
 8003264:	e7b7      	b.n	80031d6 <_printf_i+0xd2>
 8003266:	064d      	lsls	r5, r1, #25
 8003268:	bf48      	it	mi
 800326a:	b29b      	uxthmi	r3, r3
 800326c:	e7ef      	b.n	800324e <_printf_i+0x14a>
 800326e:	4665      	mov	r5, ip
 8003270:	fbb3 f1f2 	udiv	r1, r3, r2
 8003274:	fb02 3311 	mls	r3, r2, r1, r3
 8003278:	5cc3      	ldrb	r3, [r0, r3]
 800327a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800327e:	460b      	mov	r3, r1
 8003280:	2900      	cmp	r1, #0
 8003282:	d1f5      	bne.n	8003270 <_printf_i+0x16c>
 8003284:	e7b9      	b.n	80031fa <_printf_i+0xf6>
 8003286:	6813      	ldr	r3, [r2, #0]
 8003288:	6825      	ldr	r5, [r4, #0]
 800328a:	1d18      	adds	r0, r3, #4
 800328c:	6961      	ldr	r1, [r4, #20]
 800328e:	6010      	str	r0, [r2, #0]
 8003290:	0628      	lsls	r0, r5, #24
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	d501      	bpl.n	800329a <_printf_i+0x196>
 8003296:	6019      	str	r1, [r3, #0]
 8003298:	e002      	b.n	80032a0 <_printf_i+0x19c>
 800329a:	066a      	lsls	r2, r5, #25
 800329c:	d5fb      	bpl.n	8003296 <_printf_i+0x192>
 800329e:	8019      	strh	r1, [r3, #0]
 80032a0:	2300      	movs	r3, #0
 80032a2:	4665      	mov	r5, ip
 80032a4:	6123      	str	r3, [r4, #16]
 80032a6:	e7b9      	b.n	800321c <_printf_i+0x118>
 80032a8:	6813      	ldr	r3, [r2, #0]
 80032aa:	1d19      	adds	r1, r3, #4
 80032ac:	6011      	str	r1, [r2, #0]
 80032ae:	681d      	ldr	r5, [r3, #0]
 80032b0:	6862      	ldr	r2, [r4, #4]
 80032b2:	2100      	movs	r1, #0
 80032b4:	4628      	mov	r0, r5
 80032b6:	f000 f837 	bl	8003328 <memchr>
 80032ba:	b108      	cbz	r0, 80032c0 <_printf_i+0x1bc>
 80032bc:	1b40      	subs	r0, r0, r5
 80032be:	6060      	str	r0, [r4, #4]
 80032c0:	6863      	ldr	r3, [r4, #4]
 80032c2:	6123      	str	r3, [r4, #16]
 80032c4:	2300      	movs	r3, #0
 80032c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032ca:	e7a7      	b.n	800321c <_printf_i+0x118>
 80032cc:	6923      	ldr	r3, [r4, #16]
 80032ce:	462a      	mov	r2, r5
 80032d0:	4639      	mov	r1, r7
 80032d2:	4630      	mov	r0, r6
 80032d4:	47c0      	blx	r8
 80032d6:	3001      	adds	r0, #1
 80032d8:	d0aa      	beq.n	8003230 <_printf_i+0x12c>
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	079b      	lsls	r3, r3, #30
 80032de:	d413      	bmi.n	8003308 <_printf_i+0x204>
 80032e0:	68e0      	ldr	r0, [r4, #12]
 80032e2:	9b03      	ldr	r3, [sp, #12]
 80032e4:	4298      	cmp	r0, r3
 80032e6:	bfb8      	it	lt
 80032e8:	4618      	movlt	r0, r3
 80032ea:	e7a3      	b.n	8003234 <_printf_i+0x130>
 80032ec:	2301      	movs	r3, #1
 80032ee:	464a      	mov	r2, r9
 80032f0:	4639      	mov	r1, r7
 80032f2:	4630      	mov	r0, r6
 80032f4:	47c0      	blx	r8
 80032f6:	3001      	adds	r0, #1
 80032f8:	d09a      	beq.n	8003230 <_printf_i+0x12c>
 80032fa:	3501      	adds	r5, #1
 80032fc:	68e3      	ldr	r3, [r4, #12]
 80032fe:	9a03      	ldr	r2, [sp, #12]
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	42ab      	cmp	r3, r5
 8003304:	dcf2      	bgt.n	80032ec <_printf_i+0x1e8>
 8003306:	e7eb      	b.n	80032e0 <_printf_i+0x1dc>
 8003308:	2500      	movs	r5, #0
 800330a:	f104 0919 	add.w	r9, r4, #25
 800330e:	e7f5      	b.n	80032fc <_printf_i+0x1f8>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1ac      	bne.n	800326e <_printf_i+0x16a>
 8003314:	7803      	ldrb	r3, [r0, #0]
 8003316:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800331a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800331e:	e76c      	b.n	80031fa <_printf_i+0xf6>
 8003320:	080035e9 	.word	0x080035e9
 8003324:	080035fa 	.word	0x080035fa

08003328 <memchr>:
 8003328:	b510      	push	{r4, lr}
 800332a:	b2c9      	uxtb	r1, r1
 800332c:	4402      	add	r2, r0
 800332e:	4290      	cmp	r0, r2
 8003330:	4603      	mov	r3, r0
 8003332:	d101      	bne.n	8003338 <memchr+0x10>
 8003334:	2300      	movs	r3, #0
 8003336:	e003      	b.n	8003340 <memchr+0x18>
 8003338:	781c      	ldrb	r4, [r3, #0]
 800333a:	3001      	adds	r0, #1
 800333c:	428c      	cmp	r4, r1
 800333e:	d1f6      	bne.n	800332e <memchr+0x6>
 8003340:	4618      	mov	r0, r3
 8003342:	bd10      	pop	{r4, pc}

08003344 <memcpy>:
 8003344:	b510      	push	{r4, lr}
 8003346:	1e43      	subs	r3, r0, #1
 8003348:	440a      	add	r2, r1
 800334a:	4291      	cmp	r1, r2
 800334c:	d100      	bne.n	8003350 <memcpy+0xc>
 800334e:	bd10      	pop	{r4, pc}
 8003350:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003354:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003358:	e7f7      	b.n	800334a <memcpy+0x6>

0800335a <memmove>:
 800335a:	4288      	cmp	r0, r1
 800335c:	b510      	push	{r4, lr}
 800335e:	eb01 0302 	add.w	r3, r1, r2
 8003362:	d807      	bhi.n	8003374 <memmove+0x1a>
 8003364:	1e42      	subs	r2, r0, #1
 8003366:	4299      	cmp	r1, r3
 8003368:	d00a      	beq.n	8003380 <memmove+0x26>
 800336a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800336e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003372:	e7f8      	b.n	8003366 <memmove+0xc>
 8003374:	4283      	cmp	r3, r0
 8003376:	d9f5      	bls.n	8003364 <memmove+0xa>
 8003378:	1881      	adds	r1, r0, r2
 800337a:	1ad2      	subs	r2, r2, r3
 800337c:	42d3      	cmn	r3, r2
 800337e:	d100      	bne.n	8003382 <memmove+0x28>
 8003380:	bd10      	pop	{r4, pc}
 8003382:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003386:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800338a:	e7f7      	b.n	800337c <memmove+0x22>

0800338c <_free_r>:
 800338c:	b538      	push	{r3, r4, r5, lr}
 800338e:	4605      	mov	r5, r0
 8003390:	2900      	cmp	r1, #0
 8003392:	d043      	beq.n	800341c <_free_r+0x90>
 8003394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003398:	1f0c      	subs	r4, r1, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	bfb8      	it	lt
 800339e:	18e4      	addlt	r4, r4, r3
 80033a0:	f000 f8d0 	bl	8003544 <__malloc_lock>
 80033a4:	4a1e      	ldr	r2, [pc, #120]	; (8003420 <_free_r+0x94>)
 80033a6:	6813      	ldr	r3, [r2, #0]
 80033a8:	4610      	mov	r0, r2
 80033aa:	b933      	cbnz	r3, 80033ba <_free_r+0x2e>
 80033ac:	6063      	str	r3, [r4, #4]
 80033ae:	6014      	str	r4, [r2, #0]
 80033b0:	4628      	mov	r0, r5
 80033b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033b6:	f000 b8c6 	b.w	8003546 <__malloc_unlock>
 80033ba:	42a3      	cmp	r3, r4
 80033bc:	d90b      	bls.n	80033d6 <_free_r+0x4a>
 80033be:	6821      	ldr	r1, [r4, #0]
 80033c0:	1862      	adds	r2, r4, r1
 80033c2:	4293      	cmp	r3, r2
 80033c4:	bf01      	itttt	eq
 80033c6:	681a      	ldreq	r2, [r3, #0]
 80033c8:	685b      	ldreq	r3, [r3, #4]
 80033ca:	1852      	addeq	r2, r2, r1
 80033cc:	6022      	streq	r2, [r4, #0]
 80033ce:	6063      	str	r3, [r4, #4]
 80033d0:	6004      	str	r4, [r0, #0]
 80033d2:	e7ed      	b.n	80033b0 <_free_r+0x24>
 80033d4:	4613      	mov	r3, r2
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	b10a      	cbz	r2, 80033de <_free_r+0x52>
 80033da:	42a2      	cmp	r2, r4
 80033dc:	d9fa      	bls.n	80033d4 <_free_r+0x48>
 80033de:	6819      	ldr	r1, [r3, #0]
 80033e0:	1858      	adds	r0, r3, r1
 80033e2:	42a0      	cmp	r0, r4
 80033e4:	d10b      	bne.n	80033fe <_free_r+0x72>
 80033e6:	6820      	ldr	r0, [r4, #0]
 80033e8:	4401      	add	r1, r0
 80033ea:	1858      	adds	r0, r3, r1
 80033ec:	4282      	cmp	r2, r0
 80033ee:	6019      	str	r1, [r3, #0]
 80033f0:	d1de      	bne.n	80033b0 <_free_r+0x24>
 80033f2:	6810      	ldr	r0, [r2, #0]
 80033f4:	6852      	ldr	r2, [r2, #4]
 80033f6:	4401      	add	r1, r0
 80033f8:	6019      	str	r1, [r3, #0]
 80033fa:	605a      	str	r2, [r3, #4]
 80033fc:	e7d8      	b.n	80033b0 <_free_r+0x24>
 80033fe:	d902      	bls.n	8003406 <_free_r+0x7a>
 8003400:	230c      	movs	r3, #12
 8003402:	602b      	str	r3, [r5, #0]
 8003404:	e7d4      	b.n	80033b0 <_free_r+0x24>
 8003406:	6820      	ldr	r0, [r4, #0]
 8003408:	1821      	adds	r1, r4, r0
 800340a:	428a      	cmp	r2, r1
 800340c:	bf01      	itttt	eq
 800340e:	6811      	ldreq	r1, [r2, #0]
 8003410:	6852      	ldreq	r2, [r2, #4]
 8003412:	1809      	addeq	r1, r1, r0
 8003414:	6021      	streq	r1, [r4, #0]
 8003416:	6062      	str	r2, [r4, #4]
 8003418:	605c      	str	r4, [r3, #4]
 800341a:	e7c9      	b.n	80033b0 <_free_r+0x24>
 800341c:	bd38      	pop	{r3, r4, r5, pc}
 800341e:	bf00      	nop
 8003420:	20000090 	.word	0x20000090

08003424 <_malloc_r>:
 8003424:	b570      	push	{r4, r5, r6, lr}
 8003426:	1ccd      	adds	r5, r1, #3
 8003428:	f025 0503 	bic.w	r5, r5, #3
 800342c:	3508      	adds	r5, #8
 800342e:	2d0c      	cmp	r5, #12
 8003430:	bf38      	it	cc
 8003432:	250c      	movcc	r5, #12
 8003434:	2d00      	cmp	r5, #0
 8003436:	4606      	mov	r6, r0
 8003438:	db01      	blt.n	800343e <_malloc_r+0x1a>
 800343a:	42a9      	cmp	r1, r5
 800343c:	d903      	bls.n	8003446 <_malloc_r+0x22>
 800343e:	230c      	movs	r3, #12
 8003440:	6033      	str	r3, [r6, #0]
 8003442:	2000      	movs	r0, #0
 8003444:	bd70      	pop	{r4, r5, r6, pc}
 8003446:	f000 f87d 	bl	8003544 <__malloc_lock>
 800344a:	4a21      	ldr	r2, [pc, #132]	; (80034d0 <_malloc_r+0xac>)
 800344c:	6814      	ldr	r4, [r2, #0]
 800344e:	4621      	mov	r1, r4
 8003450:	b991      	cbnz	r1, 8003478 <_malloc_r+0x54>
 8003452:	4c20      	ldr	r4, [pc, #128]	; (80034d4 <_malloc_r+0xb0>)
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	b91b      	cbnz	r3, 8003460 <_malloc_r+0x3c>
 8003458:	4630      	mov	r0, r6
 800345a:	f000 f863 	bl	8003524 <_sbrk_r>
 800345e:	6020      	str	r0, [r4, #0]
 8003460:	4629      	mov	r1, r5
 8003462:	4630      	mov	r0, r6
 8003464:	f000 f85e 	bl	8003524 <_sbrk_r>
 8003468:	1c43      	adds	r3, r0, #1
 800346a:	d124      	bne.n	80034b6 <_malloc_r+0x92>
 800346c:	230c      	movs	r3, #12
 800346e:	4630      	mov	r0, r6
 8003470:	6033      	str	r3, [r6, #0]
 8003472:	f000 f868 	bl	8003546 <__malloc_unlock>
 8003476:	e7e4      	b.n	8003442 <_malloc_r+0x1e>
 8003478:	680b      	ldr	r3, [r1, #0]
 800347a:	1b5b      	subs	r3, r3, r5
 800347c:	d418      	bmi.n	80034b0 <_malloc_r+0x8c>
 800347e:	2b0b      	cmp	r3, #11
 8003480:	d90f      	bls.n	80034a2 <_malloc_r+0x7e>
 8003482:	600b      	str	r3, [r1, #0]
 8003484:	18cc      	adds	r4, r1, r3
 8003486:	50cd      	str	r5, [r1, r3]
 8003488:	4630      	mov	r0, r6
 800348a:	f000 f85c 	bl	8003546 <__malloc_unlock>
 800348e:	f104 000b 	add.w	r0, r4, #11
 8003492:	1d23      	adds	r3, r4, #4
 8003494:	f020 0007 	bic.w	r0, r0, #7
 8003498:	1ac3      	subs	r3, r0, r3
 800349a:	d0d3      	beq.n	8003444 <_malloc_r+0x20>
 800349c:	425a      	negs	r2, r3
 800349e:	50e2      	str	r2, [r4, r3]
 80034a0:	e7d0      	b.n	8003444 <_malloc_r+0x20>
 80034a2:	684b      	ldr	r3, [r1, #4]
 80034a4:	428c      	cmp	r4, r1
 80034a6:	bf16      	itet	ne
 80034a8:	6063      	strne	r3, [r4, #4]
 80034aa:	6013      	streq	r3, [r2, #0]
 80034ac:	460c      	movne	r4, r1
 80034ae:	e7eb      	b.n	8003488 <_malloc_r+0x64>
 80034b0:	460c      	mov	r4, r1
 80034b2:	6849      	ldr	r1, [r1, #4]
 80034b4:	e7cc      	b.n	8003450 <_malloc_r+0x2c>
 80034b6:	1cc4      	adds	r4, r0, #3
 80034b8:	f024 0403 	bic.w	r4, r4, #3
 80034bc:	42a0      	cmp	r0, r4
 80034be:	d005      	beq.n	80034cc <_malloc_r+0xa8>
 80034c0:	1a21      	subs	r1, r4, r0
 80034c2:	4630      	mov	r0, r6
 80034c4:	f000 f82e 	bl	8003524 <_sbrk_r>
 80034c8:	3001      	adds	r0, #1
 80034ca:	d0cf      	beq.n	800346c <_malloc_r+0x48>
 80034cc:	6025      	str	r5, [r4, #0]
 80034ce:	e7db      	b.n	8003488 <_malloc_r+0x64>
 80034d0:	20000090 	.word	0x20000090
 80034d4:	20000094 	.word	0x20000094

080034d8 <_realloc_r>:
 80034d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034da:	4607      	mov	r7, r0
 80034dc:	4614      	mov	r4, r2
 80034de:	460e      	mov	r6, r1
 80034e0:	b921      	cbnz	r1, 80034ec <_realloc_r+0x14>
 80034e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80034e6:	4611      	mov	r1, r2
 80034e8:	f7ff bf9c 	b.w	8003424 <_malloc_r>
 80034ec:	b922      	cbnz	r2, 80034f8 <_realloc_r+0x20>
 80034ee:	f7ff ff4d 	bl	800338c <_free_r>
 80034f2:	4625      	mov	r5, r4
 80034f4:	4628      	mov	r0, r5
 80034f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034f8:	f000 f826 	bl	8003548 <_malloc_usable_size_r>
 80034fc:	42a0      	cmp	r0, r4
 80034fe:	d20f      	bcs.n	8003520 <_realloc_r+0x48>
 8003500:	4621      	mov	r1, r4
 8003502:	4638      	mov	r0, r7
 8003504:	f7ff ff8e 	bl	8003424 <_malloc_r>
 8003508:	4605      	mov	r5, r0
 800350a:	2800      	cmp	r0, #0
 800350c:	d0f2      	beq.n	80034f4 <_realloc_r+0x1c>
 800350e:	4631      	mov	r1, r6
 8003510:	4622      	mov	r2, r4
 8003512:	f7ff ff17 	bl	8003344 <memcpy>
 8003516:	4631      	mov	r1, r6
 8003518:	4638      	mov	r0, r7
 800351a:	f7ff ff37 	bl	800338c <_free_r>
 800351e:	e7e9      	b.n	80034f4 <_realloc_r+0x1c>
 8003520:	4635      	mov	r5, r6
 8003522:	e7e7      	b.n	80034f4 <_realloc_r+0x1c>

08003524 <_sbrk_r>:
 8003524:	b538      	push	{r3, r4, r5, lr}
 8003526:	2300      	movs	r3, #0
 8003528:	4c05      	ldr	r4, [pc, #20]	; (8003540 <_sbrk_r+0x1c>)
 800352a:	4605      	mov	r5, r0
 800352c:	4608      	mov	r0, r1
 800352e:	6023      	str	r3, [r4, #0]
 8003530:	f7fd fa54 	bl	80009dc <_sbrk>
 8003534:	1c43      	adds	r3, r0, #1
 8003536:	d102      	bne.n	800353e <_sbrk_r+0x1a>
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	b103      	cbz	r3, 800353e <_sbrk_r+0x1a>
 800353c:	602b      	str	r3, [r5, #0]
 800353e:	bd38      	pop	{r3, r4, r5, pc}
 8003540:	20000314 	.word	0x20000314

08003544 <__malloc_lock>:
 8003544:	4770      	bx	lr

08003546 <__malloc_unlock>:
 8003546:	4770      	bx	lr

08003548 <_malloc_usable_size_r>:
 8003548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800354c:	1f18      	subs	r0, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	bfbc      	itt	lt
 8003552:	580b      	ldrlt	r3, [r1, r0]
 8003554:	18c0      	addlt	r0, r0, r3
 8003556:	4770      	bx	lr

08003558 <_init>:
 8003558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355a:	bf00      	nop
 800355c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355e:	bc08      	pop	{r3}
 8003560:	469e      	mov	lr, r3
 8003562:	4770      	bx	lr

08003564 <_fini>:
 8003564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003566:	bf00      	nop
 8003568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356a:	bc08      	pop	{r3}
 800356c:	469e      	mov	lr, r3
 800356e:	4770      	bx	lr
