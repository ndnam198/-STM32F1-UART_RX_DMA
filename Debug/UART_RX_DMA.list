
UART_RX_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002694  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080027a0  080027a0  000127a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027f8  080027f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027f8  080027f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027f8  080027f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027f8  080027f8  000127f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027fc  080027fc  000127fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  2000000c  0800280c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  0800280c  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be93  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020f8  00000000  00000000  0002bec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c60  00000000  00000000  0002dfc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  0002ec20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016343  00000000  00000000  0002f778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b8f0  00000000  00000000  00045abb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007677b  00000000  00000000  000513ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7b26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003278  00000000  00000000  000c7ba4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002788 	.word	0x08002788

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002788 	.word	0x08002788

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000160:	4b04      	ldr	r3, [pc, #16]	; (8000174 <__NVIC_GetPriorityGrouping+0x18>)
 8000162:	68db      	ldr	r3, [r3, #12]
 8000164:	0a1b      	lsrs	r3, r3, #8
 8000166:	f003 0307 	and.w	r3, r3, #7
}
 800016a:	4618      	mov	r0, r3
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	e000ed00 	.word	0xe000ed00

08000178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000178:	b480      	push	{r7}
 800017a:	b083      	sub	sp, #12
 800017c:	af00      	add	r7, sp, #0
 800017e:	4603      	mov	r3, r0
 8000180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000186:	2b00      	cmp	r3, #0
 8000188:	db0b      	blt.n	80001a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	f003 021f 	and.w	r2, r3, #31
 8000190:	4906      	ldr	r1, [pc, #24]	; (80001ac <__NVIC_EnableIRQ+0x34>)
 8000192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000196:	095b      	lsrs	r3, r3, #5
 8000198:	2001      	movs	r0, #1
 800019a:	fa00 f202 	lsl.w	r2, r0, r2
 800019e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	e000e100 	.word	0xe000e100

080001b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	6039      	str	r1, [r7, #0]
 80001ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	db0a      	blt.n	80001da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001c4:	683b      	ldr	r3, [r7, #0]
 80001c6:	b2da      	uxtb	r2, r3
 80001c8:	490c      	ldr	r1, [pc, #48]	; (80001fc <__NVIC_SetPriority+0x4c>)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	0112      	lsls	r2, r2, #4
 80001d0:	b2d2      	uxtb	r2, r2
 80001d2:	440b      	add	r3, r1
 80001d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d8:	e00a      	b.n	80001f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	4908      	ldr	r1, [pc, #32]	; (8000200 <__NVIC_SetPriority+0x50>)
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	f003 030f 	and.w	r3, r3, #15
 80001e6:	3b04      	subs	r3, #4
 80001e8:	0112      	lsls	r2, r2, #4
 80001ea:	b2d2      	uxtb	r2, r2
 80001ec:	440b      	add	r3, r1
 80001ee:	761a      	strb	r2, [r3, #24]
}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	e000e100 	.word	0xe000e100
 8000200:	e000ed00 	.word	0xe000ed00

08000204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000204:	b480      	push	{r7}
 8000206:	b089      	sub	sp, #36	; 0x24
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	f003 0307 	and.w	r3, r3, #7
 8000216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000218:	69fb      	ldr	r3, [r7, #28]
 800021a:	f1c3 0307 	rsb	r3, r3, #7
 800021e:	2b04      	cmp	r3, #4
 8000220:	bf28      	it	cs
 8000222:	2304      	movcs	r3, #4
 8000224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000226:	69fb      	ldr	r3, [r7, #28]
 8000228:	3304      	adds	r3, #4
 800022a:	2b06      	cmp	r3, #6
 800022c:	d902      	bls.n	8000234 <NVIC_EncodePriority+0x30>
 800022e:	69fb      	ldr	r3, [r7, #28]
 8000230:	3b03      	subs	r3, #3
 8000232:	e000      	b.n	8000236 <NVIC_EncodePriority+0x32>
 8000234:	2300      	movs	r3, #0
 8000236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000238:	f04f 32ff 	mov.w	r2, #4294967295
 800023c:	69bb      	ldr	r3, [r7, #24]
 800023e:	fa02 f303 	lsl.w	r3, r2, r3
 8000242:	43da      	mvns	r2, r3
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	401a      	ands	r2, r3
 8000248:	697b      	ldr	r3, [r7, #20]
 800024a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800024c:	f04f 31ff 	mov.w	r1, #4294967295
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	fa01 f303 	lsl.w	r3, r1, r3
 8000256:	43d9      	mvns	r1, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025c:	4313      	orrs	r3, r2
         );
}
 800025e:	4618      	mov	r0, r3
 8000260:	3724      	adds	r7, #36	; 0x24
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr

08000268 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	3b01      	subs	r3, #1
 8000276:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <LL_DMA_EnableChannel+0x38>)
 8000278:	5cd3      	ldrb	r3, [r2, r3]
 800027a:	461a      	mov	r2, r3
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4413      	add	r3, r2
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	683a      	ldr	r2, [r7, #0]
 8000284:	3a01      	subs	r2, #1
 8000286:	4906      	ldr	r1, [pc, #24]	; (80002a0 <LL_DMA_EnableChannel+0x38>)
 8000288:	5c8a      	ldrb	r2, [r1, r2]
 800028a:	4611      	mov	r1, r2
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	440a      	add	r2, r1
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6013      	str	r3, [r2, #0]
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	080027c8 	.word	0x080027c8

080002a4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	3b01      	subs	r3, #1
 80002b2:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <LL_DMA_EnableIT_TC+0x38>)
 80002b4:	5cd3      	ldrb	r3, [r2, r3]
 80002b6:	461a      	mov	r2, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4413      	add	r3, r2
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	683a      	ldr	r2, [r7, #0]
 80002c0:	3a01      	subs	r2, #1
 80002c2:	4906      	ldr	r1, [pc, #24]	; (80002dc <LL_DMA_EnableIT_TC+0x38>)
 80002c4:	5c8a      	ldrb	r2, [r1, r2]
 80002c6:	4611      	mov	r1, r2
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	440a      	add	r2, r1
 80002cc:	f043 0302 	orr.w	r3, r3, #2
 80002d0:	6013      	str	r3, [r2, #0]
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	080027c8 	.word	0x080027c8

080002e0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	60da      	str	r2, [r3, #12]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr

080002fe <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80002fe:	b480      	push	{r7}
 8000300:	b083      	sub	sp, #12
 8000302:	af00      	add	r7, sp, #0
 8000304:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	615a      	str	r2, [r3, #20]
}
 800031e:	bf00      	nop
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr

08000328 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	f043 0210 	orr.w	r2, r3, #16
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	60da      	str	r2, [r3, #12]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr

08000346 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8000346:	b480      	push	{r7}
 8000348:	b083      	sub	sp, #12
 800034a:	af00      	add	r7, sp, #0
 800034c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	615a      	str	r2, [r3, #20]
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	615a      	str	r2, [r3, #20]
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
	...

08000384 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800038e:	695a      	ldr	r2, [r3, #20]
 8000390:	4907      	ldr	r1, [pc, #28]	; (80003b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4313      	orrs	r3, r2
 8000396:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800039a:	695a      	ldr	r2, [r3, #20]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4013      	ands	r3, r2
 80003a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003a2:	68fb      	ldr	r3, [r7, #12]
}
 80003a4:	bf00      	nop
 80003a6:	3714      	adds	r7, #20
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bc80      	pop	{r7}
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000

080003b4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003be:	69da      	ldr	r2, [r3, #28]
 80003c0:	4907      	ldr	r1, [pc, #28]	; (80003e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4313      	orrs	r3, r2
 80003c6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003ca:	69da      	ldr	r2, [r3, #28]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4013      	ands	r3, r2
 80003d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003d2:	68fb      	ldr	r3, [r7, #12]
}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000

080003e4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80003ec:	4b08      	ldr	r3, [pc, #32]	; (8000410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80003ee:	699a      	ldr	r2, [r3, #24]
 80003f0:	4907      	ldr	r1, [pc, #28]	; (8000410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4313      	orrs	r3, r2
 80003f6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80003fa:	699a      	ldr	r2, [r3, #24]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4013      	ands	r3, r2
 8000400:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000402:	68fb      	ldr	r3, [r7, #12]
}
 8000404:	bf00      	nop
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000

08000414 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000414:	b598      	push	{r3, r4, r7, lr}
 8000416:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000418:	f000 fc88 	bl	8000d2c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800041c:	f000 f832 	bl	8000484 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000420:	f000 f954 	bl	80006cc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000424:	f000 f874 	bl	8000510 <MX_USART2_UART_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_TogglePin(USER_LED_2_GPIO_Port,
 8000428:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800042c:	480f      	ldr	r0, [pc, #60]	; (800046c <main+0x58>)
 800042e:	f000 ff23 	bl	8001278 <HAL_GPIO_TogglePin>
				(uint16_t) (USER_LED_2_Pin | USER_LED_3_Pin));
		HAL_GPIO_TogglePin(USER_LED_4_GPIO_Port,
 8000432:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000436:	480e      	ldr	r0, [pc, #56]	; (8000470 <main+0x5c>)
 8000438:	f000 ff1e 	bl	8001278 <HAL_GPIO_TogglePin>
				(uint16_t) (USER_LED_1_Pin | USER_LED_4_Pin));
		printf("that is my lib");
 800043c:	4a0d      	ldr	r2, [pc, #52]	; (8000474 <main+0x60>)
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <main+0x64>)
 8000440:	4614      	mov	r4, r2
 8000442:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000444:	6020      	str	r0, [r4, #0]
 8000446:	6061      	str	r1, [r4, #4]
 8000448:	60a2      	str	r2, [r4, #8]
 800044a:	881a      	ldrh	r2, [r3, #0]
 800044c:	789b      	ldrb	r3, [r3, #2]
 800044e:	81a2      	strh	r2, [r4, #12]
 8000450:	73a3      	strb	r3, [r4, #14]
 8000452:	4908      	ldr	r1, [pc, #32]	; (8000474 <main+0x60>)
 8000454:	4809      	ldr	r0, [pc, #36]	; (800047c <main+0x68>)
 8000456:	f000 f9eb 	bl	8000830 <vUARTSend>
		endln;
 800045a:	4909      	ldr	r1, [pc, #36]	; (8000480 <main+0x6c>)
 800045c:	4807      	ldr	r0, [pc, #28]	; (800047c <main+0x68>)
 800045e:	f000 f9e7 	bl	8000830 <vUARTSend>
		HAL_Delay(200);
 8000462:	20c8      	movs	r0, #200	; 0xc8
 8000464:	f000 fc94 	bl	8000d90 <HAL_Delay>
		HAL_GPIO_TogglePin(USER_LED_2_GPIO_Port,
 8000468:	e7de      	b.n	8000428 <main+0x14>
 800046a:	bf00      	nop
 800046c:	40010800 	.word	0x40010800
 8000470:	40010c00 	.word	0x40010c00
 8000474:	2000002c 	.word	0x2000002c
 8000478:	080027a0 	.word	0x080027a0
 800047c:	40004400 	.word	0x40004400
 8000480:	080027b0 	.word	0x080027b0

08000484 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b090      	sub	sp, #64	; 0x40
 8000488:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800048a:	f107 0318 	add.w	r3, r7, #24
 800048e:	2228      	movs	r2, #40	; 0x28
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f002 f970 	bl	8002778 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004a6:	2301      	movs	r3, #1
 80004a8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ae:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b4:	2301      	movs	r3, #1
 80004b6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004b8:	2302      	movs	r3, #2
 80004ba:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004c0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80004c8:	f107 0318 	add.w	r3, r7, #24
 80004cc:	4618      	mov	r0, r3
 80004ce:	f000 ff0d 	bl	80012ec <HAL_RCC_OscConfig>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <SystemClock_Config+0x58>
		Error_Handler();
 80004d8:	f000 f984 	bl	80007e4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004dc:	230f      	movs	r3, #15
 80004de:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e0:	2302      	movs	r3, #2
 80004e2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ec:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2102      	movs	r1, #2
 80004f6:	4618      	mov	r0, r3
 80004f8:	f001 f978 	bl	80017ec <HAL_RCC_ClockConfig>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0x82>
		Error_Handler();
 8000502:	f000 f96f 	bl	80007e4 <Error_Handler>
	}
}
 8000506:	bf00      	nop
 8000508:	3740      	adds	r7, #64	; 0x40
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b0a0      	sub	sp, #128	; 0x80
 8000514:	af00      	add	r7, sp, #0
	LL_DMA_InitTypeDef DMA_TX_Handle;
	LL_DMA_InitTypeDef DMA_RX_Handle;

	/* USER CODE END USART2_Init 0 */

	LL_USART_InitTypeDef USART_InitStruct = { 0 };
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]
 8000526:	615a      	str	r2, [r3, #20]
 8000528:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800052a:	463b      	mov	r3, r7
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000538:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800053c:	f7ff ff3a 	bl	80003b4 <LL_APB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000540:	2004      	movs	r0, #4
 8000542:	f7ff ff4f 	bl	80003e4 <LL_APB2_GRP1_EnableClock>

	/* DMA1 clock enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000546:	2001      	movs	r0, #1
 8000548:	f7ff ff1c 	bl	8000384 <LL_AHB1_GRP1_EnableClock>

	/**USART2 GPIO Configuration
	 PA2   ------> USART2_TX
	 PA3   ------> USART2_RX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800054c:	f240 4304 	movw	r3, #1028	; 0x404
 8000550:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000552:	2309      	movs	r3, #9
 8000554:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000556:	2303      	movs	r3, #3
 8000558:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	463b      	mov	r3, r7
 8000560:	4619      	mov	r1, r3
 8000562:	4855      	ldr	r0, [pc, #340]	; (80006b8 <MX_USART2_UART_Init+0x1a8>)
 8000564:	f001 fe80 	bl	8002268 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000568:	f640 0308 	movw	r3, #2056	; 0x808
 800056c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800056e:	2304      	movs	r3, #4
 8000570:	607b      	str	r3, [r7, #4]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000572:	463b      	mov	r3, r7
 8000574:	4619      	mov	r1, r3
 8000576:	4850      	ldr	r0, [pc, #320]	; (80006b8 <MX_USART2_UART_Init+0x1a8>)
 8000578:	f001 fe76 	bl	8002268 <LL_GPIO_Init>

	/* USER CODE BEGIN USART2_Init 1 */

	USART_InitStruct.BaudRate = 115200;
 800057c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000580:	617b      	str	r3, [r7, #20]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800058a:	2300      	movs	r3, #0
 800058c:	623b      	str	r3, [r7, #32]
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800058e:	230c      	movs	r3, #12
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000592:	2300      	movs	r3, #0
 8000594:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000596:	2300      	movs	r3, #0
 8000598:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_USART_Init(USART2, &USART_InitStruct);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4619      	mov	r1, r3
 80005a0:	4846      	ldr	r0, [pc, #280]	; (80006bc <MX_USART2_UART_Init+0x1ac>)
 80005a2:	f002 f865 	bl	8002670 <LL_USART_Init>

	USART2->SR = USART_SR_PE | USART_SR_FE | USART_SR_FE | USART_SR_ORE
 80005a6:	4b45      	ldr	r3, [pc, #276]	; (80006bc <MX_USART2_UART_Init+0x1ac>)
 80005a8:	227b      	movs	r2, #123	; 0x7b
 80005aa:	601a      	str	r2, [r3, #0]
			| USART_SR_IDLE | USART_SR_TC | USART_SR_RXNE;
	/* Enable IDLE Interrupt */
	LL_USART_EnableIT_IDLE(USART2);
 80005ac:	4843      	ldr	r0, [pc, #268]	; (80006bc <MX_USART2_UART_Init+0x1ac>)
 80005ae:	f7ff febb 	bl	8000328 <LL_USART_EnableIT_IDLE>

	/* Enable RX DMA Request */
	LL_USART_EnableDMAReq_RX(USART2);
 80005b2:	4842      	ldr	r0, [pc, #264]	; (80006bc <MX_USART2_UART_Init+0x1ac>)
 80005b4:	f7ff fec7 	bl	8000346 <LL_USART_EnableDMAReq_RX>

	/* Enable TX DMA Request */
	LL_USART_EnableDMAReq_TX(USART2);
 80005b8:	4840      	ldr	r0, [pc, #256]	; (80006bc <MX_USART2_UART_Init+0x1ac>)
 80005ba:	f7ff fed3 	bl	8000364 <LL_USART_EnableDMAReq_TX>

	/* USART2 interrupt Init */
	NVIC_SetPriority(USART2_IRQn,
 80005be:	f7ff fdcd 	bl	800015c <__NVIC_GetPriorityGrouping>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2200      	movs	r2, #0
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe1b 	bl	8000204 <NVIC_EncodePriority>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4619      	mov	r1, r3
 80005d2:	2026      	movs	r0, #38	; 0x26
 80005d4:	f7ff fdec 	bl	80001b0 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
	NVIC_EnableIRQ(USART2_IRQn);
 80005d8:	2026      	movs	r0, #38	; 0x26
 80005da:	f7ff fdcd 	bl	8000178 <__NVIC_EnableIRQ>

	LL_USART_ConfigAsyncMode(USART2);
 80005de:	4837      	ldr	r0, [pc, #220]	; (80006bc <MX_USART2_UART_Init+0x1ac>)
 80005e0:	f7ff fe8d 	bl	80002fe <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART2);
 80005e4:	4835      	ldr	r0, [pc, #212]	; (80006bc <MX_USART2_UART_Init+0x1ac>)
 80005e6:	f7ff fe7b 	bl	80002e0 <LL_USART_Enable>

	/* USART2 DMA Init */

	/* Configure DMA for USART RX */

	LL_DMA_StructInit(&DMA_RX_Handle);
 80005ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fd5b 	bl	80020aa <LL_DMA_StructInit>
	DMA_RX_Handle.Mode = LL_DMA_MODE_CIRCULAR;
 80005f4:	2320      	movs	r3, #32
 80005f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_RX_Handle.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_RX_Handle.PeriphOrM2MSrcAddress = (uint32_t) &USART2->DR;
 80005fc:	4b30      	ldr	r3, [pc, #192]	; (80006c0 <MX_USART2_UART_Init+0x1b0>)
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_RX_Handle.MemoryOrM2MDstAddress = (uint32_t) UART_Buffer;
 8000600:	4b30      	ldr	r3, [pc, #192]	; (80006c4 <MX_USART2_UART_Init+0x1b4>)
 8000602:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_RX_Handle.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_RX_Handle.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8000608:	2300      	movs	r3, #0
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_RX_Handle.NbData = UART_RX_BUFFER_SIZE;
 800060c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000610:	653b      	str	r3, [r7, #80]	; 0x50
	DMA_RX_Handle.Priority = LL_DMA_PRIORITY_VERYHIGH;
 8000612:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000616:	657b      	str	r3, [r7, #84]	; 0x54
	LL_DMA_Init(DMA1, LL_DMA_CHANNEL_6, &DMA_RX_Handle);
 8000618:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800061c:	461a      	mov	r2, r3
 800061e:	2106      	movs	r1, #6
 8000620:	4829      	ldr	r0, [pc, #164]	; (80006c8 <MX_USART2_UART_Init+0x1b8>)
 8000622:	f001 fd09 	bl	8002038 <LL_DMA_Init>

	/* Enable DMA2 Stream2 Tranmission Complete Interrupt */
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8000626:	2106      	movs	r1, #6
 8000628:	4827      	ldr	r0, [pc, #156]	; (80006c8 <MX_USART2_UART_Init+0x1b8>)
 800062a:	f7ff fe3b 	bl	80002a4 <LL_DMA_EnableIT_TC>

	/* DMA1_Channel6_IRQn interrupt configuration */
	NVIC_SetPriority(DMA1_Channel6_IRQn,
 800062e:	f7ff fd95 	bl	800015c <__NVIC_GetPriorityGrouping>
 8000632:	4603      	mov	r3, r0
 8000634:	2200      	movs	r2, #0
 8000636:	2101      	movs	r1, #1
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff fde3 	bl	8000204 <NVIC_EncodePriority>
 800063e:	4603      	mov	r3, r0
 8000640:	4619      	mov	r1, r3
 8000642:	2010      	movs	r0, #16
 8000644:	f7ff fdb4 	bl	80001b0 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
	NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000648:	2010      	movs	r0, #16
 800064a:	f7ff fd95 	bl	8000178 <__NVIC_EnableIRQ>

	/* Configure DMA for USART TX */
	LL_DMA_StructInit(&DMA_TX_Handle);
 800064e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fd29 	bl	80020aa <LL_DMA_StructInit>
	DMA_TX_Handle.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 8000658:	2310      	movs	r3, #16
 800065a:	663b      	str	r3, [r7, #96]	; 0x60
	DMA_TX_Handle.PeriphOrM2MSrcAddress = (uint32_t) &USART2->DR;
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_USART2_UART_Init+0x1b0>)
 800065e:	65bb      	str	r3, [r7, #88]	; 0x58
	DMA_TX_Handle.MemoryOrM2MDstAddress = (uint32_t) UART_Buffer;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_USART2_UART_Init+0x1b4>)
 8000662:	65fb      	str	r3, [r7, #92]	; 0x5c
	DMA_TX_Handle.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	66fb      	str	r3, [r7, #108]	; 0x6c
	DMA_TX_Handle.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8000668:	2300      	movs	r3, #0
 800066a:	66bb      	str	r3, [r7, #104]	; 0x68
	DMA_TX_Handle.Priority = LL_DMA_PRIORITY_HIGH;
 800066c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000670:	67fb      	str	r3, [r7, #124]	; 0x7c
	LL_DMA_Init(DMA1, LL_DMA_CHANNEL_7, &DMA_TX_Handle);
 8000672:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000676:	461a      	mov	r2, r3
 8000678:	2107      	movs	r1, #7
 800067a:	4813      	ldr	r0, [pc, #76]	; (80006c8 <MX_USART2_UART_Init+0x1b8>)
 800067c:	f001 fcdc 	bl	8002038 <LL_DMA_Init>

	/* Enable DMA2 Stream7 Tranmission Complete Interrupt */
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8000680:	2107      	movs	r1, #7
 8000682:	4811      	ldr	r0, [pc, #68]	; (80006c8 <MX_USART2_UART_Init+0x1b8>)
 8000684:	f7ff fe0e 	bl	80002a4 <LL_DMA_EnableIT_TC>

	/* DMA1_Channel6_IRQn interrupt configuration */
	NVIC_SetPriority(DMA1_Channel7_IRQn,
 8000688:	f7ff fd68 	bl	800015c <__NVIC_GetPriorityGrouping>
 800068c:	4603      	mov	r3, r0
 800068e:	2200      	movs	r2, #0
 8000690:	2101      	movs	r1, #1
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff fdb6 	bl	8000204 <NVIC_EncodePriority>
 8000698:	4603      	mov	r3, r0
 800069a:	4619      	mov	r1, r3
 800069c:	2011      	movs	r0, #17
 800069e:	f7ff fd87 	bl	80001b0 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
	NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80006a2:	2011      	movs	r0, #17
 80006a4:	f7ff fd68 	bl	8000178 <__NVIC_EnableIRQ>

	/* Enable DMA USART RX Stream */
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80006a8:	2106      	movs	r1, #6
 80006aa:	4807      	ldr	r0, [pc, #28]	; (80006c8 <MX_USART2_UART_Init+0x1b8>)
 80006ac:	f7ff fddc 	bl	8000268 <LL_DMA_EnableChannel>
}
 80006b0:	bf00      	nop
 80006b2:	3780      	adds	r7, #128	; 0x80
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40010800 	.word	0x40010800
 80006bc:	40004400 	.word	0x40004400
 80006c0:	40004404 	.word	0x40004404
 80006c4:	20000090 	.word	0x20000090
 80006c8:	40020000 	.word	0x40020000

080006cc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006d2:	f107 0310 	add.w	r3, r7, #16
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80006e0:	4b33      	ldr	r3, [pc, #204]	; (80007b0 <MX_GPIO_Init+0xe4>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a32      	ldr	r2, [pc, #200]	; (80007b0 <MX_GPIO_Init+0xe4>)
 80006e6:	f043 0320 	orr.w	r3, r3, #32
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b30      	ldr	r3, [pc, #192]	; (80007b0 <MX_GPIO_Init+0xe4>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0320 	and.w	r3, r3, #32
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <MX_GPIO_Init+0xe4>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a2c      	ldr	r2, [pc, #176]	; (80007b0 <MX_GPIO_Init+0xe4>)
 80006fe:	f043 0304 	orr.w	r3, r3, #4
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <MX_GPIO_Init+0xe4>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b27      	ldr	r3, [pc, #156]	; (80007b0 <MX_GPIO_Init+0xe4>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a26      	ldr	r2, [pc, #152]	; (80007b0 <MX_GPIO_Init+0xe4>)
 8000716:	f043 0308 	orr.w	r3, r3, #8
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <MX_GPIO_Init+0xe4>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0308 	and.w	r3, r3, #8
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, USER_LED_3_Pin | USER_LED_2_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800072e:	4821      	ldr	r0, [pc, #132]	; (80007b4 <MX_GPIO_Init+0xe8>)
 8000730:	f000 fd8a 	bl	8001248 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, USER_LED_1_Pin | USER_LED_4_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 7190 	mov.w	r1, #288	; 0x120
 800073a:	481f      	ldr	r0, [pc, #124]	; (80007b8 <MX_GPIO_Init+0xec>)
 800073c:	f000 fd84 	bl	8001248 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : BT_UP_Pin BT_CENTER_Pin BT_DOWN_Pin */
	GPIO_InitStruct.Pin = BT_UP_Pin | BT_CENTER_Pin | BT_DOWN_Pin;
 8000740:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000744:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_GPIO_Init+0xf0>)
 8000748:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074a:	2301      	movs	r3, #1
 800074c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	4619      	mov	r1, r3
 8000754:	4817      	ldr	r0, [pc, #92]	; (80007b4 <MX_GPIO_Init+0xe8>)
 8000756:	f000 fc1d 	bl	8000f94 <HAL_GPIO_Init>

	/*Configure GPIO pins : USER_LED_3_Pin USER_LED_2_Pin */
	GPIO_InitStruct.Pin = USER_LED_3_Pin | USER_LED_2_Pin;
 800075a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800075e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2302      	movs	r3, #2
 800076a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	4619      	mov	r1, r3
 8000772:	4810      	ldr	r0, [pc, #64]	; (80007b4 <MX_GPIO_Init+0xe8>)
 8000774:	f000 fc0e 	bl	8000f94 <HAL_GPIO_Init>

	/*Configure GPIO pins : USER_LED_1_Pin USER_LED_4_Pin */
	GPIO_InitStruct.Pin = USER_LED_1_Pin | USER_LED_4_Pin;
 8000778:	f44f 7390 	mov.w	r3, #288	; 0x120
 800077c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2302      	movs	r3, #2
 8000788:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	4619      	mov	r1, r3
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <MX_GPIO_Init+0xec>)
 8000792:	f000 fbff 	bl	8000f94 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2102      	movs	r1, #2
 800079a:	2017      	movs	r0, #23
 800079c:	f000 fbcf 	bl	8000f3e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007a0:	2017      	movs	r0, #23
 80007a2:	f000 fbe8 	bl	8000f76 <HAL_NVIC_EnableIRQ>

}
 80007a6:	bf00      	nop
 80007a8:	3720      	adds	r7, #32
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010800 	.word	0x40010800
 80007b8:	40010c00 	.word	0x40010c00
 80007bc:	10210000 	.word	0x10210000

080007c0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d101      	bne.n	80007d6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80007d2:	f000 fac1 	bl	8000d58 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40000800 	.word	0x40000800

080007e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <LL_USART_IsActiveFlag_TC>:
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000800:	2b40      	cmp	r3, #64	; 0x40
 8000802:	bf0c      	ite	eq
 8000804:	2301      	moveq	r3, #1
 8000806:	2300      	movne	r3, #0
 8000808:	b2db      	uxtb	r3, r3
}
 800080a:	4618      	mov	r0, r3
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000820:	78fa      	ldrb	r2, [r7, #3]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	605a      	str	r2, [r3, #4]
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <vUARTSend>:
}
#endif /*  configHAL_UART */

#if defined(configLL_UART)

void vUARTSend(USART_TypeDef *USARTx, uint8_t *String) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
	uint32_t ulStringLen = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
	uint32_t ulBlockTime = 10000;
 8000842:	f242 7310 	movw	r3, #10000	; 0x2710
 8000846:	60fb      	str	r3, [r7, #12]
	ulStringLen = strlen((char*) String);
 8000848:	6838      	ldr	r0, [r7, #0]
 800084a:	f7ff fc7f 	bl	800014c <strlen>
 800084e:	6178      	str	r0, [r7, #20]

	while (ulStringLen) {
 8000850:	e01a      	b.n	8000888 <vUARTSend+0x58>
		LL_USART_TransmitData8(USARTx, (uint8_t) String[i]);
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	4413      	add	r3, r2
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	4619      	mov	r1, r3
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ffd9 	bl	8000814 <LL_USART_TransmitData8>
		i++;
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	3301      	adds	r3, #1
 8000866:	613b      	str	r3, [r7, #16]
        ulStringLen--;
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	3b01      	subs	r3, #1
 800086c:	617b      	str	r3, [r7, #20]
        /* Check if transfer 1 byte completed */
		while (!LL_USART_IsActiveFlag_TC(USARTx)) {
 800086e:	e005      	b.n	800087c <vUARTSend+0x4c>
			if ((ulBlockTime--) == 0)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	1e5a      	subs	r2, r3, #1
 8000874:	60fa      	str	r2, [r7, #12]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d100      	bne.n	800087c <vUARTSend+0x4c>
				break;
 800087a:	e005      	b.n	8000888 <vUARTSend+0x58>
		while (!LL_USART_IsActiveFlag_TC(USARTx)) {
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ffb7 	bl	80007f0 <LL_USART_IsActiveFlag_TC>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d0f3      	beq.n	8000870 <vUARTSend+0x40>
	while (ulStringLen) {
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1e1      	bne.n	8000852 <vUARTSend+0x22>
		}
	}
}
 800088e:	bf00      	nop
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_MspInit+0x5c>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <HAL_MspInit+0x5c>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6193      	str	r3, [r2, #24]
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_MspInit+0x5c>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x5c>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <HAL_MspInit+0x5c>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	61d3      	str	r3, [r2, #28]
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_MspInit+0x5c>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_MspInit+0x60>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_MspInit+0x60>)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010000 	.word	0x40010000

080008fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	; 0x30
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800090c:	2200      	movs	r2, #0
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	201e      	movs	r0, #30
 8000912:	f000 fb14 	bl	8000f3e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000916:	201e      	movs	r0, #30
 8000918:	f000 fb2d 	bl	8000f76 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <HAL_InitTick+0xa0>)
 800091e:	69db      	ldr	r3, [r3, #28]
 8000920:	4a1e      	ldr	r2, [pc, #120]	; (800099c <HAL_InitTick+0xa0>)
 8000922:	f043 0304 	orr.w	r3, r3, #4
 8000926:	61d3      	str	r3, [r2, #28]
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <HAL_InitTick+0xa0>)
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	f003 0304 	and.w	r3, r3, #4
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000934:	f107 0210 	add.w	r2, r7, #16
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4611      	mov	r1, r2
 800093e:	4618      	mov	r0, r3
 8000940:	f001 f8be 	bl	8001ac0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000944:	f001 f8a8 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 8000948:	4603      	mov	r3, r0
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800094e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000950:	4a13      	ldr	r2, [pc, #76]	; (80009a0 <HAL_InitTick+0xa4>)
 8000952:	fba2 2303 	umull	r2, r3, r2, r3
 8000956:	0c9b      	lsrs	r3, r3, #18
 8000958:	3b01      	subs	r3, #1
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_InitTick+0xa8>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <HAL_InitTick+0xac>)
 8000960:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_InitTick+0xa8>)
 8000964:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000968:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_InitTick+0xa8>)
 800096c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800096e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_InitTick+0xa8>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <HAL_InitTick+0xa8>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <HAL_InitTick+0xa8>)
 800097e:	f001 f8ed 	bl	8001b5c <HAL_TIM_Base_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d104      	bne.n	8000992 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000988:	4806      	ldr	r0, [pc, #24]	; (80009a4 <HAL_InitTick+0xa8>)
 800098a:	f001 f91b 	bl	8001bc4 <HAL_TIM_Base_Start_IT>
 800098e:	4603      	mov	r3, r0
 8000990:	e000      	b.n	8000994 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	3730      	adds	r7, #48	; 0x30
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40021000 	.word	0x40021000
 80009a0:	431bde83 	.word	0x431bde83
 80009a4:	20000478 	.word	0x20000478
 80009a8:	40000800 	.word	0x40000800

080009ac <LL_DMA_EnableChannel>:
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <LL_DMA_EnableChannel+0x38>)
 80009bc:	5cd3      	ldrb	r3, [r2, r3]
 80009be:	461a      	mov	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4413      	add	r3, r2
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	3a01      	subs	r2, #1
 80009ca:	4906      	ldr	r1, [pc, #24]	; (80009e4 <LL_DMA_EnableChannel+0x38>)
 80009cc:	5c8a      	ldrb	r2, [r1, r2]
 80009ce:	4611      	mov	r1, r2
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	440a      	add	r2, r1
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6013      	str	r3, [r2, #0]
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	080027d0 	.word	0x080027d0

080009e8 <LL_DMA_DisableChannel>:
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <LL_DMA_DisableChannel+0x38>)
 80009f8:	5cd3      	ldrb	r3, [r2, r3]
 80009fa:	461a      	mov	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	683a      	ldr	r2, [r7, #0]
 8000a04:	3a01      	subs	r2, #1
 8000a06:	4906      	ldr	r1, [pc, #24]	; (8000a20 <LL_DMA_DisableChannel+0x38>)
 8000a08:	5c8a      	ldrb	r2, [r1, r2]
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	440a      	add	r2, r1
 8000a10:	f023 0301 	bic.w	r3, r3, #1
 8000a14:	6013      	str	r3, [r2, #0]
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	080027d0 	.word	0x080027d0

08000a24 <LL_DMA_SetDataLength>:
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <LL_DMA_SetDataLength+0x40>)
 8000a36:	5cd3      	ldrb	r3, [r2, r3]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	0c1b      	lsrs	r3, r3, #16
 8000a42:	041b      	lsls	r3, r3, #16
 8000a44:	68ba      	ldr	r2, [r7, #8]
 8000a46:	3a01      	subs	r2, #1
 8000a48:	4906      	ldr	r1, [pc, #24]	; (8000a64 <LL_DMA_SetDataLength+0x40>)
 8000a4a:	5c8a      	ldrb	r2, [r1, r2]
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	440a      	add	r2, r1
 8000a52:	4611      	mov	r1, r2
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	604b      	str	r3, [r1, #4]
}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr
 8000a64:	080027d0 	.word	0x080027d0

08000a68 <LL_DMA_IsActiveFlag_TC6>:
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000a7c:	bf0c      	ite	eq
 8000a7e:	2301      	moveq	r3, #1
 8000a80:	2300      	movne	r3, #0
 8000a82:	b2db      	uxtb	r3, r3
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr

08000a8e <LL_DMA_IsActiveFlag_TC7>:
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000aa2:	bf0c      	ite	eq
 8000aa4:	2301      	moveq	r3, #1
 8000aa6:	2300      	movne	r3, #0
 8000aa8:	b2db      	uxtb	r3, r3
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <LL_DMA_ClearFlag_TC6>:
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ac2:	605a      	str	r2, [r3, #4]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr

08000ace <LL_DMA_ClearFlag_TC7>:
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000adc:	605a      	str	r2, [r3, #4]
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <LL_USART_IsActiveFlag_IDLE>:
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f003 0310 	and.w	r3, r3, #16
 8000af8:	2b10      	cmp	r3, #16
 8000afa:	bf0c      	ite	eq
 8000afc:	2301      	moveq	r3, #1
 8000afe:	2300      	movne	r3, #0
 8000b00:	b2db      	uxtb	r3, r3
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <LL_USART_ClearFlag_IDLE>:
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr

08000b2e <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr

08000b3a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr

08000b5e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr

08000b76 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

	/* USER CODE END SysTick_IRQn 0 */
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
	...

08000b84 <DMA1_Channel6_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

	/* USER CODE END DMA1_Channel6_IRQn 0 */

	if (LL_DMA_IsActiveFlag_TC6(DMA1)) {
 8000b88:	4817      	ldr	r0, [pc, #92]	; (8000be8 <DMA1_Channel6_IRQHandler+0x64>)
 8000b8a:	f7ff ff6d 	bl	8000a68 <LL_DMA_IsActiveFlag_TC6>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d027      	beq.n	8000be4 <DMA1_Channel6_IRQHandler+0x60>
		LL_DMA_ClearFlag_TC6(DMA1);
 8000b94:	4814      	ldr	r0, [pc, #80]	; (8000be8 <DMA1_Channel6_IRQHandler+0x64>)
 8000b96:	f7ff ff8d 	bl	8000ab4 <LL_DMA_ClearFlag_TC6>

		NumberOfBytesReceive = UART_RX_BUFFER_SIZE - DMA1_Channel6->CNDTR;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <DMA1_Channel6_IRQHandler+0x68>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <DMA1_Channel6_IRQHandler+0x6c>)
 8000ba8:	801a      	strh	r2, [r3, #0]

		/* Start Tranfer Data To USART TX register */
		if (NumberOfBytesReceive) {
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <DMA1_Channel6_IRQHandler+0x6c>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d00b      	beq.n	8000bcc <DMA1_Channel6_IRQHandler+0x48>
			LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, NumberOfBytesReceive);
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <DMA1_Channel6_IRQHandler+0x6c>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	2107      	movs	r1, #7
 8000bbe:	480a      	ldr	r0, [pc, #40]	; (8000be8 <DMA1_Channel6_IRQHandler+0x64>)
 8000bc0:	f7ff ff30 	bl	8000a24 <LL_DMA_SetDataLength>
			LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8000bc4:	2107      	movs	r1, #7
 8000bc6:	4808      	ldr	r0, [pc, #32]	; (8000be8 <DMA1_Channel6_IRQHandler+0x64>)
 8000bc8:	f7ff fef0 	bl	80009ac <LL_DMA_EnableChannel>
		}

		/* Clear all of flag DMA stream 2 */
		DMA1->IFCR = DMA_IFCR_CHTIF6 | DMA_IFCR_CTCIF6 | DMA_IFCR_CTEIF6
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <DMA1_Channel6_IRQHandler+0x64>)
 8000bce:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 8000bd2:	605a      	str	r2, [r3, #4]
				| DMA_IFCR_CGIF6;
		DMA1_Channel6->CNDTR = UART_RX_BUFFER_SIZE; /* Set number of bytes to receive */
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <DMA1_Channel6_IRQHandler+0x68>)
 8000bd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bda:	605a      	str	r2, [r3, #4]

		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6); /* Start DMA transfer */
 8000bdc:	2106      	movs	r1, #6
 8000bde:	4802      	ldr	r0, [pc, #8]	; (8000be8 <DMA1_Channel6_IRQHandler+0x64>)
 8000be0:	f7ff fee4 	bl	80009ac <LL_DMA_EnableChannel>
	}

	/* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40020000 	.word	0x40020000
 8000bec:	4002006c 	.word	0x4002006c
 8000bf0:	20000028 	.word	0x20000028

08000bf4 <DMA1_Channel7_IRQHandler>:

/**
 * @brief This function handles DMA1 channel7 global interrupt.
 */
void DMA1_Channel7_IRQHandler(void) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if (LL_DMA_IsActiveFlag_TC7(DMA1)) {
 8000bf8:	4807      	ldr	r0, [pc, #28]	; (8000c18 <DMA1_Channel7_IRQHandler+0x24>)
 8000bfa:	f7ff ff48 	bl	8000a8e <LL_DMA_IsActiveFlag_TC7>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d006      	beq.n	8000c12 <DMA1_Channel7_IRQHandler+0x1e>
		LL_DMA_ClearFlag_TC7(DMA1);
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <DMA1_Channel7_IRQHandler+0x24>)
 8000c06:	f7ff ff62 	bl	8000ace <LL_DMA_ClearFlag_TC7>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8000c0a:	2107      	movs	r1, #7
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <DMA1_Channel7_IRQHandler+0x24>)
 8000c0e:	f7ff feeb 	bl	80009e8 <LL_DMA_DisableChannel>
	/* USER CODE END DMA1_Channel7_IRQn 0 */

	/* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

	/* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40020000 	.word	0x40020000

08000c1c <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000c20:	2040      	movs	r0, #64	; 0x40
 8000c22:	f000 fb41 	bl	80012a8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000c26:	2080      	movs	r0, #128	; 0x80
 8000c28:	f000 fb3e 	bl	80012a8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000c2c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c30:	f000 fb3a 	bl	80012a8 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <TIM4_IRQHandler>:

/**
 * @brief This function handles TIM4 global interrupt.
 */
void TIM4_IRQHandler(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM4_IRQn 0 */

	/* USER CODE END TIM4_IRQn 0 */
	HAL_TIM_IRQHandler(&htim4);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <TIM4_IRQHandler+0x10>)
 8000c3e:	f000 ffe4 	bl	8001c0a <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM4_IRQn 1 */

	/* USER CODE END TIM4_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000478 	.word	0x20000478

08000c4c <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */
	if (LL_USART_IsActiveFlag_IDLE(USART2)) {
 8000c50:	4807      	ldr	r0, [pc, #28]	; (8000c70 <USART2_IRQHandler+0x24>)
 8000c52:	f7ff ff49 	bl	8000ae8 <LL_USART_IsActiveFlag_IDLE>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d006      	beq.n	8000c6a <USART2_IRQHandler+0x1e>
		LL_USART_ClearFlag_IDLE(USART2);
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <USART2_IRQHandler+0x24>)
 8000c5e:	f7ff ff55 	bl	8000b0c <LL_USART_ClearFlag_IDLE>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8000c62:	2106      	movs	r1, #6
 8000c64:	4803      	ldr	r0, [pc, #12]	; (8000c74 <USART2_IRQHandler+0x28>)
 8000c66:	f7ff febf 	bl	80009e8 <LL_DMA_DisableChannel>
	}
	/* USER CODE END USART2_IRQn 0 */
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40004400 	.word	0x40004400
 8000c74:	40020000 	.word	0x40020000

08000c78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <SystemInit+0x5c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <SystemInit+0x5c>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <SystemInit+0x5c>)
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	4911      	ldr	r1, [pc, #68]	; (8000cd4 <SystemInit+0x5c>)
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <SystemInit+0x60>)
 8000c90:	4013      	ands	r3, r2
 8000c92:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <SystemInit+0x5c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <SystemInit+0x5c>)
 8000c9a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <SystemInit+0x5c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <SystemInit+0x5c>)
 8000caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cae:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <SystemInit+0x5c>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <SystemInit+0x5c>)
 8000cb6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000cba:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <SystemInit+0x5c>)
 8000cbe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000cc2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SystemInit+0x64>)
 8000cc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cca:	609a      	str	r2, [r3, #8]
#endif 
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	f8ff0000 	.word	0xf8ff0000
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ce0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ce2:	e003      	b.n	8000cec <LoopCopyDataInit>

08000ce4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ce6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ce8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000cea:	3104      	adds	r1, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000cec:	480a      	ldr	r0, [pc, #40]	; (8000d18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000cf0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000cf2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000cf4:	d3f6      	bcc.n	8000ce4 <CopyDataInit>
  ldr r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000cf8:	e002      	b.n	8000d00 <LoopFillZerobss>

08000cfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000cfc:	f842 3b04 	str.w	r3, [r2], #4

08000d00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d04:	d3f9      	bcc.n	8000cfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d06:	f7ff ffb7 	bl	8000c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f001 fd11 	bl	8002730 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d0e:	f7ff fb81 	bl	8000414 <main>
  bx lr
 8000d12:	4770      	bx	lr
  ldr r3, =_sidata
 8000d14:	08002800 	.word	0x08002800
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000d20:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000d24:	200004bc 	.word	0x200004bc

08000d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC1_2_IRQHandler>
	...

08000d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_Init+0x28>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_Init+0x28>)
 8000d36:	f043 0310 	orr.w	r3, r3, #16
 8000d3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f8f3 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff fdda 	bl	80008fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fda6 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40022000 	.word	0x40022000

08000d58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <HAL_IncTick+0x1c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_IncTick+0x20>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a03      	ldr	r2, [pc, #12]	; (8000d78 <HAL_IncTick+0x20>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	20000008 	.word	0x20000008
 8000d78:	200004b8 	.word	0x200004b8

08000d7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b02      	ldr	r3, [pc, #8]	; (8000d8c <HAL_GetTick+0x10>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	200004b8 	.word	0x200004b8

08000d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d98:	f7ff fff0 	bl	8000d7c <HAL_GetTick>
 8000d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da8:	d005      	beq.n	8000db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_Delay+0x40>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4413      	add	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000db6:	bf00      	nop
 8000db8:	f7ff ffe0 	bl	8000d7c <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d8f7      	bhi.n	8000db8 <HAL_Delay+0x28>
  {
  }
}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000008 	.word	0x20000008

08000dd4 <__NVIC_SetPriorityGrouping>:
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e06:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	60d3      	str	r3, [r2, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_GetPriorityGrouping>:
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <__NVIC_GetPriorityGrouping+0x18>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	f003 0307 	and.w	r3, r3, #7
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_EnableIRQ>:
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	db0b      	blt.n	8000e62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	f003 021f 	and.w	r2, r3, #31
 8000e50:	4906      	ldr	r1, [pc, #24]	; (8000e6c <__NVIC_EnableIRQ+0x34>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	095b      	lsrs	r3, r3, #5
 8000e58:	2001      	movs	r0, #1
 8000e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	e000e100 	.word	0xe000e100

08000e70 <__NVIC_SetPriority>:
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db0a      	blt.n	8000e9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	490c      	ldr	r1, [pc, #48]	; (8000ebc <__NVIC_SetPriority+0x4c>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	0112      	lsls	r2, r2, #4
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	440b      	add	r3, r1
 8000e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e98:	e00a      	b.n	8000eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4908      	ldr	r1, [pc, #32]	; (8000ec0 <__NVIC_SetPriority+0x50>)
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	3b04      	subs	r3, #4
 8000ea8:	0112      	lsls	r2, r2, #4
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	761a      	strb	r2, [r3, #24]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000e100 	.word	0xe000e100
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <NVIC_EncodePriority>:
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f1c3 0307 	rsb	r3, r3, #7
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	bf28      	it	cs
 8000ee2:	2304      	movcs	r3, #4
 8000ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d902      	bls.n	8000ef4 <NVIC_EncodePriority+0x30>
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3b03      	subs	r3, #3
 8000ef2:	e000      	b.n	8000ef6 <NVIC_EncodePriority+0x32>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43da      	mvns	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	401a      	ands	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43d9      	mvns	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	4313      	orrs	r3, r2
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3724      	adds	r7, #36	; 0x24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff4f 	bl	8000dd4 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff64 	bl	8000e1c <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ffb2 	bl	8000ec4 <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff81 	bl	8000e70 <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff57 	bl	8000e38 <__NVIC_EnableIRQ>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b08b      	sub	sp, #44	; 0x2c
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa6:	e127      	b.n	80011f8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	f040 8116 	bne.w	80011f2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b12      	cmp	r3, #18
 8000fcc:	d034      	beq.n	8001038 <HAL_GPIO_Init+0xa4>
 8000fce:	2b12      	cmp	r3, #18
 8000fd0:	d80d      	bhi.n	8000fee <HAL_GPIO_Init+0x5a>
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d02b      	beq.n	800102e <HAL_GPIO_Init+0x9a>
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d804      	bhi.n	8000fe4 <HAL_GPIO_Init+0x50>
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d031      	beq.n	8001042 <HAL_GPIO_Init+0xae>
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d01c      	beq.n	800101c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fe2:	e048      	b.n	8001076 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	d043      	beq.n	8001070 <HAL_GPIO_Init+0xdc>
 8000fe8:	2b11      	cmp	r3, #17
 8000fea:	d01b      	beq.n	8001024 <HAL_GPIO_Init+0x90>
          break;
 8000fec:	e043      	b.n	8001076 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fee:	4a89      	ldr	r2, [pc, #548]	; (8001214 <HAL_GPIO_Init+0x280>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d026      	beq.n	8001042 <HAL_GPIO_Init+0xae>
 8000ff4:	4a87      	ldr	r2, [pc, #540]	; (8001214 <HAL_GPIO_Init+0x280>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d806      	bhi.n	8001008 <HAL_GPIO_Init+0x74>
 8000ffa:	4a87      	ldr	r2, [pc, #540]	; (8001218 <HAL_GPIO_Init+0x284>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d020      	beq.n	8001042 <HAL_GPIO_Init+0xae>
 8001000:	4a86      	ldr	r2, [pc, #536]	; (800121c <HAL_GPIO_Init+0x288>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d01d      	beq.n	8001042 <HAL_GPIO_Init+0xae>
          break;
 8001006:	e036      	b.n	8001076 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001008:	4a85      	ldr	r2, [pc, #532]	; (8001220 <HAL_GPIO_Init+0x28c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d019      	beq.n	8001042 <HAL_GPIO_Init+0xae>
 800100e:	4a85      	ldr	r2, [pc, #532]	; (8001224 <HAL_GPIO_Init+0x290>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d016      	beq.n	8001042 <HAL_GPIO_Init+0xae>
 8001014:	4a84      	ldr	r2, [pc, #528]	; (8001228 <HAL_GPIO_Init+0x294>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d013      	beq.n	8001042 <HAL_GPIO_Init+0xae>
          break;
 800101a:	e02c      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	623b      	str	r3, [r7, #32]
          break;
 8001022:	e028      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	3304      	adds	r3, #4
 800102a:	623b      	str	r3, [r7, #32]
          break;
 800102c:	e023      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	3308      	adds	r3, #8
 8001034:	623b      	str	r3, [r7, #32]
          break;
 8001036:	e01e      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	330c      	adds	r3, #12
 800103e:	623b      	str	r3, [r7, #32]
          break;
 8001040:	e019      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800104a:	2304      	movs	r3, #4
 800104c:	623b      	str	r3, [r7, #32]
          break;
 800104e:	e012      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d105      	bne.n	8001064 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001058:	2308      	movs	r3, #8
 800105a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	611a      	str	r2, [r3, #16]
          break;
 8001062:	e008      	b.n	8001076 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001064:	2308      	movs	r3, #8
 8001066:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	615a      	str	r2, [r3, #20]
          break;
 800106e:	e002      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
          break;
 8001074:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	2bff      	cmp	r3, #255	; 0xff
 800107a:	d801      	bhi.n	8001080 <HAL_GPIO_Init+0xec>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	e001      	b.n	8001084 <HAL_GPIO_Init+0xf0>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3304      	adds	r3, #4
 8001084:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	2bff      	cmp	r3, #255	; 0xff
 800108a:	d802      	bhi.n	8001092 <HAL_GPIO_Init+0xfe>
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	e002      	b.n	8001098 <HAL_GPIO_Init+0x104>
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	3b08      	subs	r3, #8
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	210f      	movs	r1, #15
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	401a      	ands	r2, r3
 80010aa:	6a39      	ldr	r1, [r7, #32]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	431a      	orrs	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 8096 	beq.w	80011f2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010c6:	4b59      	ldr	r3, [pc, #356]	; (800122c <HAL_GPIO_Init+0x298>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	4a58      	ldr	r2, [pc, #352]	; (800122c <HAL_GPIO_Init+0x298>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6193      	str	r3, [r2, #24]
 80010d2:	4b56      	ldr	r3, [pc, #344]	; (800122c <HAL_GPIO_Init+0x298>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010de:	4a54      	ldr	r2, [pc, #336]	; (8001230 <HAL_GPIO_Init+0x29c>)
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4013      	ands	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4b      	ldr	r2, [pc, #300]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d013      	beq.n	8001132 <HAL_GPIO_Init+0x19e>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4a      	ldr	r2, [pc, #296]	; (8001238 <HAL_GPIO_Init+0x2a4>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d00d      	beq.n	800112e <HAL_GPIO_Init+0x19a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a49      	ldr	r2, [pc, #292]	; (800123c <HAL_GPIO_Init+0x2a8>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d007      	beq.n	800112a <HAL_GPIO_Init+0x196>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a48      	ldr	r2, [pc, #288]	; (8001240 <HAL_GPIO_Init+0x2ac>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d101      	bne.n	8001126 <HAL_GPIO_Init+0x192>
 8001122:	2303      	movs	r3, #3
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x1a0>
 8001126:	2304      	movs	r3, #4
 8001128:	e004      	b.n	8001134 <HAL_GPIO_Init+0x1a0>
 800112a:	2302      	movs	r3, #2
 800112c:	e002      	b.n	8001134 <HAL_GPIO_Init+0x1a0>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x1a0>
 8001132:	2300      	movs	r3, #0
 8001134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001136:	f002 0203 	and.w	r2, r2, #3
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	4093      	lsls	r3, r2
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001144:	493a      	ldr	r1, [pc, #232]	; (8001230 <HAL_GPIO_Init+0x29c>)
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800115e:	4b39      	ldr	r3, [pc, #228]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4938      	ldr	r1, [pc, #224]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]
 800116a:	e006      	b.n	800117a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800116c:	4b35      	ldr	r3, [pc, #212]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	43db      	mvns	r3, r3
 8001174:	4933      	ldr	r1, [pc, #204]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 8001176:	4013      	ands	r3, r2
 8001178:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d006      	beq.n	8001194 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	492e      	ldr	r1, [pc, #184]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	604b      	str	r3, [r1, #4]
 8001192:	e006      	b.n	80011a2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	43db      	mvns	r3, r3
 800119c:	4929      	ldr	r1, [pc, #164]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 800119e:	4013      	ands	r3, r2
 80011a0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	4924      	ldr	r1, [pc, #144]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	608b      	str	r3, [r1, #8]
 80011ba:	e006      	b.n	80011ca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	491f      	ldr	r1, [pc, #124]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	491a      	ldr	r1, [pc, #104]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	60cb      	str	r3, [r1, #12]
 80011e2:	e006      	b.n	80011f2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	4915      	ldr	r1, [pc, #84]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 80011ee:	4013      	ands	r3, r2
 80011f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	3301      	adds	r3, #1
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	f47f aed0 	bne.w	8000fa8 <HAL_GPIO_Init+0x14>
  }
}
 8001208:	bf00      	nop
 800120a:	372c      	adds	r7, #44	; 0x2c
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	10210000 	.word	0x10210000
 8001218:	10110000 	.word	0x10110000
 800121c:	10120000 	.word	0x10120000
 8001220:	10310000 	.word	0x10310000
 8001224:	10320000 	.word	0x10320000
 8001228:	10220000 	.word	0x10220000
 800122c:	40021000 	.word	0x40021000
 8001230:	40010000 	.word	0x40010000
 8001234:	40010800 	.word	0x40010800
 8001238:	40010c00 	.word	0x40010c00
 800123c:	40011000 	.word	0x40011000
 8001240:	40011400 	.word	0x40011400
 8001244:	40010400 	.word	0x40010400

08001248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	807b      	strh	r3, [r7, #2]
 8001254:	4613      	mov	r3, r2
 8001256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001258:	787b      	ldrb	r3, [r7, #1]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125e:	887a      	ldrh	r2, [r7, #2]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001264:	e003      	b.n	800126e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	041a      	lsls	r2, r3, #16
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	611a      	str	r2, [r3, #16]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr

08001278 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	887b      	ldrh	r3, [r7, #2]
 800128a:	4013      	ands	r3, r2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001290:	887a      	ldrh	r2, [r7, #2]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001296:	e002      	b.n	800129e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001298:	887a      	ldrh	r2, [r7, #2]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	611a      	str	r2, [r3, #16]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d006      	beq.n	80012cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f806 	bl	80012d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40010400 	.word	0x40010400

080012d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e26c      	b.n	80017d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8087 	beq.w	800141a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800130c:	4b92      	ldr	r3, [pc, #584]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b04      	cmp	r3, #4
 8001316:	d00c      	beq.n	8001332 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001318:	4b8f      	ldr	r3, [pc, #572]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	2b08      	cmp	r3, #8
 8001322:	d112      	bne.n	800134a <HAL_RCC_OscConfig+0x5e>
 8001324:	4b8c      	ldr	r3, [pc, #560]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001330:	d10b      	bne.n	800134a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001332:	4b89      	ldr	r3, [pc, #548]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d06c      	beq.n	8001418 <HAL_RCC_OscConfig+0x12c>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d168      	bne.n	8001418 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e246      	b.n	80017d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001352:	d106      	bne.n	8001362 <HAL_RCC_OscConfig+0x76>
 8001354:	4b80      	ldr	r3, [pc, #512]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a7f      	ldr	r2, [pc, #508]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 800135a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	e02e      	b.n	80013c0 <HAL_RCC_OscConfig+0xd4>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0x98>
 800136a:	4b7b      	ldr	r3, [pc, #492]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a7a      	ldr	r2, [pc, #488]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	4b78      	ldr	r3, [pc, #480]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a77      	ldr	r2, [pc, #476]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 800137c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e01d      	b.n	80013c0 <HAL_RCC_OscConfig+0xd4>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800138c:	d10c      	bne.n	80013a8 <HAL_RCC_OscConfig+0xbc>
 800138e:	4b72      	ldr	r3, [pc, #456]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a71      	ldr	r2, [pc, #452]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4b6f      	ldr	r3, [pc, #444]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a6e      	ldr	r2, [pc, #440]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e00b      	b.n	80013c0 <HAL_RCC_OscConfig+0xd4>
 80013a8:	4b6b      	ldr	r3, [pc, #428]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a6a      	ldr	r2, [pc, #424]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b68      	ldr	r3, [pc, #416]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a67      	ldr	r2, [pc, #412]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d013      	beq.n	80013f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fcd8 	bl	8000d7c <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff fcd4 	bl	8000d7c <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	; 0x64
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e1fa      	b.n	80017d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e2:	4b5d      	ldr	r3, [pc, #372]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0xe4>
 80013ee:	e014      	b.n	800141a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fcc4 	bl	8000d7c <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff fcc0 	bl	8000d7c <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	; 0x64
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e1e6      	b.n	80017d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140a:	4b53      	ldr	r3, [pc, #332]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x10c>
 8001416:	e000      	b.n	800141a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d063      	beq.n	80014ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001426:	4b4c      	ldr	r3, [pc, #304]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00b      	beq.n	800144a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001432:	4b49      	ldr	r3, [pc, #292]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b08      	cmp	r3, #8
 800143c:	d11c      	bne.n	8001478 <HAL_RCC_OscConfig+0x18c>
 800143e:	4b46      	ldr	r3, [pc, #280]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d116      	bne.n	8001478 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144a:	4b43      	ldr	r3, [pc, #268]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d005      	beq.n	8001462 <HAL_RCC_OscConfig+0x176>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d001      	beq.n	8001462 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e1ba      	b.n	80017d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001462:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4939      	ldr	r1, [pc, #228]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001476:	e03a      	b.n	80014ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d020      	beq.n	80014c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001480:	4b36      	ldr	r3, [pc, #216]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001482:	2201      	movs	r2, #1
 8001484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001486:	f7ff fc79 	bl	8000d7c <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148e:	f7ff fc75 	bl	8000d7c <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e19b      	b.n	80017d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ac:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4927      	ldr	r1, [pc, #156]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]
 80014c0:	e015      	b.n	80014ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fc58 	bl	8000d7c <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d0:	f7ff fc54 	bl	8000d7c <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e17a      	b.n	80017d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d03a      	beq.n	8001570 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d019      	beq.n	8001536 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <HAL_RCC_OscConfig+0x274>)
 8001504:	2201      	movs	r2, #1
 8001506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001508:	f7ff fc38 	bl	8000d7c <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001510:	f7ff fc34 	bl	8000d7c <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e15a      	b.n	80017d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800152e:	2001      	movs	r0, #1
 8001530:	f000 faf6 	bl	8001b20 <RCC_Delay>
 8001534:	e01c      	b.n	8001570 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_RCC_OscConfig+0x274>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153c:	f7ff fc1e 	bl	8000d7c <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001542:	e00f      	b.n	8001564 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001544:	f7ff fc1a 	bl	8000d7c <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d908      	bls.n	8001564 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e140      	b.n	80017d8 <HAL_RCC_OscConfig+0x4ec>
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	42420000 	.word	0x42420000
 8001560:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001564:	4b9e      	ldr	r3, [pc, #632]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1e9      	bne.n	8001544 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 80a6 	beq.w	80016ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001582:	4b97      	ldr	r3, [pc, #604]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10d      	bne.n	80015aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	4b94      	ldr	r3, [pc, #592]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	4a93      	ldr	r2, [pc, #588]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001598:	61d3      	str	r3, [r2, #28]
 800159a:	4b91      	ldr	r3, [pc, #580]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015a6:	2301      	movs	r3, #1
 80015a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015aa:	4b8e      	ldr	r3, [pc, #568]	; (80017e4 <HAL_RCC_OscConfig+0x4f8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d118      	bne.n	80015e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b6:	4b8b      	ldr	r3, [pc, #556]	; (80017e4 <HAL_RCC_OscConfig+0x4f8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a8a      	ldr	r2, [pc, #552]	; (80017e4 <HAL_RCC_OscConfig+0x4f8>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015c2:	f7ff fbdb 	bl	8000d7c <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ca:	f7ff fbd7 	bl	8000d7c <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b64      	cmp	r3, #100	; 0x64
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e0fd      	b.n	80017d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015dc:	4b81      	ldr	r3, [pc, #516]	; (80017e4 <HAL_RCC_OscConfig+0x4f8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x312>
 80015f0:	4b7b      	ldr	r3, [pc, #492]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	4a7a      	ldr	r2, [pc, #488]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6213      	str	r3, [r2, #32]
 80015fc:	e02d      	b.n	800165a <HAL_RCC_OscConfig+0x36e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x334>
 8001606:	4b76      	ldr	r3, [pc, #472]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a75      	ldr	r2, [pc, #468]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 800160c:	f023 0301 	bic.w	r3, r3, #1
 8001610:	6213      	str	r3, [r2, #32]
 8001612:	4b73      	ldr	r3, [pc, #460]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	4a72      	ldr	r2, [pc, #456]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 8001618:	f023 0304 	bic.w	r3, r3, #4
 800161c:	6213      	str	r3, [r2, #32]
 800161e:	e01c      	b.n	800165a <HAL_RCC_OscConfig+0x36e>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b05      	cmp	r3, #5
 8001626:	d10c      	bne.n	8001642 <HAL_RCC_OscConfig+0x356>
 8001628:	4b6d      	ldr	r3, [pc, #436]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a6c      	ldr	r2, [pc, #432]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	4b6a      	ldr	r3, [pc, #424]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4a69      	ldr	r2, [pc, #420]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6213      	str	r3, [r2, #32]
 8001640:	e00b      	b.n	800165a <HAL_RCC_OscConfig+0x36e>
 8001642:	4b67      	ldr	r3, [pc, #412]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	4a66      	ldr	r2, [pc, #408]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	6213      	str	r3, [r2, #32]
 800164e:	4b64      	ldr	r3, [pc, #400]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4a63      	ldr	r2, [pc, #396]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 8001654:	f023 0304 	bic.w	r3, r3, #4
 8001658:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d015      	beq.n	800168e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001662:	f7ff fb8b 	bl	8000d7c <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001668:	e00a      	b.n	8001680 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f7ff fb87 	bl	8000d7c <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	f241 3288 	movw	r2, #5000	; 0x1388
 8001678:	4293      	cmp	r3, r2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e0ab      	b.n	80017d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001680:	4b57      	ldr	r3, [pc, #348]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0ee      	beq.n	800166a <HAL_RCC_OscConfig+0x37e>
 800168c:	e014      	b.n	80016b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168e:	f7ff fb75 	bl	8000d7c <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff fb71 	bl	8000d7c <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e095      	b.n	80017d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ac:	4b4c      	ldr	r3, [pc, #304]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1ee      	bne.n	8001696 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d105      	bne.n	80016ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016be:	4b48      	ldr	r3, [pc, #288]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	4a47      	ldr	r2, [pc, #284]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 80016c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 8081 	beq.w	80017d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016d4:	4b42      	ldr	r3, [pc, #264]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d061      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d146      	bne.n	8001776 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e8:	4b3f      	ldr	r3, [pc, #252]	; (80017e8 <HAL_RCC_OscConfig+0x4fc>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fb45 	bl	8000d7c <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f6:	f7ff fb41 	bl	8000d7c <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e067      	b.n	80017d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001708:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171c:	d108      	bne.n	8001730 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800171e:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	492d      	ldr	r1, [pc, #180]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001730:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a19      	ldr	r1, [r3, #32]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	430b      	orrs	r3, r1
 8001742:	4927      	ldr	r1, [pc, #156]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 8001744:	4313      	orrs	r3, r2
 8001746:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001748:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <HAL_RCC_OscConfig+0x4fc>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174e:	f7ff fb15 	bl	8000d7c <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001756:	f7ff fb11 	bl	8000d7c <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e037      	b.n	80017d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001768:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x46a>
 8001774:	e02f      	b.n	80017d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <HAL_RCC_OscConfig+0x4fc>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fafe 	bl	8000d7c <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001784:	f7ff fafa 	bl	8000d7c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e020      	b.n	80017d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x498>
 80017a2:	e018      	b.n	80017d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e013      	b.n	80017d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_RCC_OscConfig+0x4f4>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d106      	bne.n	80017d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d001      	beq.n	80017d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40007000 	.word	0x40007000
 80017e8:	42420060 	.word	0x42420060

080017ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0d0      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001800:	4b6a      	ldr	r3, [pc, #424]	; (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d910      	bls.n	8001830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b67      	ldr	r3, [pc, #412]	; (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 0207 	bic.w	r2, r3, #7
 8001816:	4965      	ldr	r1, [pc, #404]	; (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800181e:	4b63      	ldr	r3, [pc, #396]	; (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0b8      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d020      	beq.n	800187e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001848:	4b59      	ldr	r3, [pc, #356]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a58      	ldr	r2, [pc, #352]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001852:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001860:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4a52      	ldr	r2, [pc, #328]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800186a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800186c:	4b50      	ldr	r3, [pc, #320]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	494d      	ldr	r1, [pc, #308]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d040      	beq.n	800190c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	4b47      	ldr	r3, [pc, #284]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d115      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e07f      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d107      	bne.n	80018ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018aa:	4b41      	ldr	r3, [pc, #260]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e073      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ba:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e06b      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ca:	4b39      	ldr	r3, [pc, #228]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f023 0203 	bic.w	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4936      	ldr	r1, [pc, #216]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018dc:	f7ff fa4e 	bl	8000d7c <HAL_GetTick>
 80018e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e4:	f7ff fa4a 	bl	8000d7c <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e053      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fa:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 020c 	and.w	r2, r3, #12
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	429a      	cmp	r2, r3
 800190a:	d1eb      	bne.n	80018e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800190c:	4b27      	ldr	r3, [pc, #156]	; (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d210      	bcs.n	800193c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 0207 	bic.w	r2, r3, #7
 8001922:	4922      	ldr	r1, [pc, #136]	; (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e032      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4916      	ldr	r1, [pc, #88]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	4313      	orrs	r3, r2
 8001958:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d009      	beq.n	800197a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	490e      	ldr	r1, [pc, #56]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	4313      	orrs	r3, r2
 8001978:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800197a:	f000 f821 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 800197e:	4601      	mov	r1, r0
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 800198c:	5cd3      	ldrb	r3, [r2, r3]
 800198e:	fa21 f303 	lsr.w	r3, r1, r3
 8001992:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_RCC_ClockConfig+0x1d0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe ffae 	bl	80008fc <HAL_InitTick>

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40022000 	.word	0x40022000
 80019b0:	40021000 	.word	0x40021000
 80019b4:	080027d8 	.word	0x080027d8
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000004 	.word	0x20000004

080019c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c0:	b490      	push	{r4, r7}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019c6:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019c8:	1d3c      	adds	r4, r7, #4
 80019ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019d0:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019ea:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d002      	beq.n	8001a00 <HAL_RCC_GetSysClockFreq+0x40>
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d003      	beq.n	8001a06 <HAL_RCC_GetSysClockFreq+0x46>
 80019fe:	e02d      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a00:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a02:	623b      	str	r3, [r7, #32]
      break;
 8001a04:	e02d      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	0c9b      	lsrs	r3, r3, #18
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a12:	4413      	add	r3, r2
 8001a14:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a18:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d013      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	0c5b      	lsrs	r3, r3, #17
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a32:	4413      	add	r3, r2
 8001a34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	4a0f      	ldr	r2, [pc, #60]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a3e:	fb02 f203 	mul.w	r2, r2, r3
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4a:	e004      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	4a0c      	ldr	r2, [pc, #48]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a50:	fb02 f303 	mul.w	r3, r2, r3
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	623b      	str	r3, [r7, #32]
      break;
 8001a5a:	e002      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a5e:	623b      	str	r3, [r7, #32]
      break;
 8001a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a62:	6a3b      	ldr	r3, [r7, #32]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3728      	adds	r7, #40	; 0x28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc90      	pop	{r4, r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	080027b4 	.word	0x080027b4
 8001a74:	080027c4 	.word	0x080027c4
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	007a1200 	.word	0x007a1200
 8001a80:	003d0900 	.word	0x003d0900

08001a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a88:	4b02      	ldr	r3, [pc, #8]	; (8001a94 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	20000000 	.word	0x20000000

08001a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a9c:	f7ff fff2 	bl	8001a84 <HAL_RCC_GetHCLKFreq>
 8001aa0:	4601      	mov	r1, r0
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	0a1b      	lsrs	r3, r3, #8
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	4a03      	ldr	r2, [pc, #12]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aae:	5cd3      	ldrb	r3, [r2, r3]
 8001ab0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	080027e8 	.word	0x080027e8

08001ac0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	220f      	movs	r2, #15
 8001ace:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_RCC_GetClockConfig+0x58>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0203 	and.w	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_RCC_GetClockConfig+0x58>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_RCC_GetClockConfig+0x58>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <HAL_RCC_GetClockConfig+0x58>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_RCC_GetClockConfig+0x5c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0207 	and.w	r2, r3, #7
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40022000 	.word	0x40022000

08001b20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b28:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <RCC_Delay+0x34>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <RCC_Delay+0x38>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	0a5b      	lsrs	r3, r3, #9
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	fb02 f303 	mul.w	r3, r2, r3
 8001b3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b3c:	bf00      	nop
  }
  while (Delay --);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1e5a      	subs	r2, r3, #1
 8001b42:	60fa      	str	r2, [r7, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f9      	bne.n	8001b3c <RCC_Delay+0x1c>
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000000 	.word	0x20000000
 8001b58:	10624dd3 	.word	0x10624dd3

08001b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e01d      	b.n	8001baa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d106      	bne.n	8001b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f815 	bl	8001bb2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3304      	adds	r3, #4
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	f000 f962 	bl	8001e64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0201 	orr.w	r2, r2, #1
 8001bda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d007      	beq.n	8001bfe <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0201 	orr.w	r2, r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr

08001c0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d122      	bne.n	8001c66 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d11b      	bne.n	8001c66 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f06f 0202 	mvn.w	r2, #2
 8001c36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f8ed 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 8001c52:	e005      	b.n	8001c60 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f8e0 	bl	8001e1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f8ef 	bl	8001e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d122      	bne.n	8001cba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d11b      	bne.n	8001cba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f06f 0204 	mvn.w	r2, #4
 8001c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f8c3 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 8001ca6:	e005      	b.n	8001cb4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f8b6 	bl	8001e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8c5 	bl	8001e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d122      	bne.n	8001d0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d11b      	bne.n	8001d0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f06f 0208 	mvn.w	r2, #8
 8001cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f899 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 8001cfa:	e005      	b.n	8001d08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f88c 	bl	8001e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f89b 	bl	8001e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b10      	cmp	r3, #16
 8001d1a:	d122      	bne.n	8001d62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b10      	cmp	r3, #16
 8001d28:	d11b      	bne.n	8001d62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f06f 0210 	mvn.w	r2, #16
 8001d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2208      	movs	r2, #8
 8001d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f86f 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 8001d4e:	e005      	b.n	8001d5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f862 	bl	8001e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f871 	bl	8001e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d10e      	bne.n	8001d8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d107      	bne.n	8001d8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f06f 0201 	mvn.w	r2, #1
 8001d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7fe fd19 	bl	80007c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d98:	2b80      	cmp	r3, #128	; 0x80
 8001d9a:	d10e      	bne.n	8001dba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da6:	2b80      	cmp	r3, #128	; 0x80
 8001da8:	d107      	bne.n	8001dba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f8c0 	bl	8001f3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc4:	2b40      	cmp	r3, #64	; 0x40
 8001dc6:	d10e      	bne.n	8001de6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd2:	2b40      	cmp	r3, #64	; 0x40
 8001dd4:	d107      	bne.n	8001de6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f835 	bl	8001e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d10e      	bne.n	8001e12 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	d107      	bne.n	8001e12 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f06f 0220 	mvn.w	r2, #32
 8001e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f88b 	bl	8001f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr

08001e3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
	...

08001e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a29      	ldr	r2, [pc, #164]	; (8001f1c <TIM_Base_SetConfig+0xb8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00b      	beq.n	8001e94 <TIM_Base_SetConfig+0x30>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e82:	d007      	beq.n	8001e94 <TIM_Base_SetConfig+0x30>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a26      	ldr	r2, [pc, #152]	; (8001f20 <TIM_Base_SetConfig+0xbc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d003      	beq.n	8001e94 <TIM_Base_SetConfig+0x30>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a25      	ldr	r2, [pc, #148]	; (8001f24 <TIM_Base_SetConfig+0xc0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d108      	bne.n	8001ea6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <TIM_Base_SetConfig+0xb8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00b      	beq.n	8001ec6 <TIM_Base_SetConfig+0x62>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb4:	d007      	beq.n	8001ec6 <TIM_Base_SetConfig+0x62>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	; (8001f20 <TIM_Base_SetConfig+0xbc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d003      	beq.n	8001ec6 <TIM_Base_SetConfig+0x62>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a18      	ldr	r2, [pc, #96]	; (8001f24 <TIM_Base_SetConfig+0xc0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d108      	bne.n	8001ed8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <TIM_Base_SetConfig+0xb8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d103      	bne.n	8001f0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	615a      	str	r2, [r3, #20]
}
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	40012c00 	.word	0x40012c00
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40000800 	.word	0x40000800

08001f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <LL_DMA_ConfigTransfer>:
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <LL_DMA_ConfigTransfer+0x44>)
 8001f5e:	5cd3      	ldrb	r3, [r2, r3]
 8001f60:	461a      	mov	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4413      	add	r3, r2
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	3a01      	subs	r2, #1
 8001f74:	4906      	ldr	r1, [pc, #24]	; (8001f90 <LL_DMA_ConfigTransfer+0x44>)
 8001f76:	5c8a      	ldrb	r2, [r1, r2]
 8001f78:	4611      	mov	r1, r2
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	440a      	add	r2, r1
 8001f7e:	4611      	mov	r1, r2
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	080027f0 	.word	0x080027f0

08001f94 <LL_DMA_SetDataLength>:
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <LL_DMA_SetDataLength+0x40>)
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4413      	add	r3, r2
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	0c1b      	lsrs	r3, r3, #16
 8001fb2:	041b      	lsls	r3, r3, #16
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	3a01      	subs	r2, #1
 8001fb8:	4906      	ldr	r1, [pc, #24]	; (8001fd4 <LL_DMA_SetDataLength+0x40>)
 8001fba:	5c8a      	ldrb	r2, [r1, r2]
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	440a      	add	r2, r1
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	604b      	str	r3, [r1, #4]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	080027f0 	.word	0x080027f0

08001fd8 <LL_DMA_SetMemoryAddress>:
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	4a06      	ldr	r2, [pc, #24]	; (8002004 <LL_DMA_SetMemoryAddress+0x2c>)
 8001fea:	5cd3      	ldrb	r3, [r2, r3]
 8001fec:	461a      	mov	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	60d3      	str	r3, [r2, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	080027f0 	.word	0x080027f0

08002008 <LL_DMA_SetPeriphAddress>:
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	3b01      	subs	r3, #1
 8002018:	4a06      	ldr	r2, [pc, #24]	; (8002034 <LL_DMA_SetPeriphAddress+0x2c>)
 800201a:	5cd3      	ldrb	r3, [r2, r3]
 800201c:	461a      	mov	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4413      	add	r3, r2
 8002022:	461a      	mov	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6093      	str	r3, [r2, #8]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	080027f0 	.word	0x080027f0

08002038 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction | \
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction | \
 800204c:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 8002052:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8002058:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800205e:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 8002064:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction | \
 800206a:	4313      	orrs	r3, r2
 800206c:	461a      	mov	r2, r3
 800206e:	68b9      	ldr	r1, [r7, #8]
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f7ff ff6b 	bl	8001f4c <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	461a      	mov	r2, r3
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f7ff ffaa 	bl	8001fd8 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f7ff ffbb 	bl	8002008 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	461a      	mov	r2, r3
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f7ff ff7a 	bl	8001f94 <LL_DMA_SetDataLength>

  return SUCCESS;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80020f8:	b490      	push	{r4, r7}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	461a      	mov	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	0e1b      	lsrs	r3, r3, #24
 800210c:	4413      	add	r3, r2
 800210e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002110:	6822      	ldr	r2, [r4, #0]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	fab3 f383 	clz	r3, r3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	210f      	movs	r1, #15
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	401a      	ands	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	61bb      	str	r3, [r7, #24]
  return result;
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	4313      	orrs	r3, r2
 8002150:	6023      	str	r3, [r4, #0]
}
 8002152:	bf00      	nop
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bc90      	pop	{r4, r7}
 800215a:	4770      	bx	lr

0800215c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800215c:	b490      	push	{r4, r7}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	461a      	mov	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	0e1b      	lsrs	r3, r3, #24
 8002170:	4413      	add	r3, r2
 8002172:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002174:	6822      	ldr	r2, [r4, #0]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	613b      	str	r3, [r7, #16]
  return result;
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	fab3 f383 	clz	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	2103      	movs	r1, #3
 800218e:	fa01 f303 	lsl.w	r3, r1, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	401a      	ands	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	61bb      	str	r3, [r7, #24]
  return result;
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	4313      	orrs	r3, r2
 80021b4:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 80021b6:	bf00      	nop
 80021b8:	3720      	adds	r7, #32
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc90      	pop	{r4, r7}
 80021be:	4770      	bx	lr

080021c0 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 80021c0:	b490      	push	{r4, r7}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	461a      	mov	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	0e1b      	lsrs	r3, r3, #24
 80021d4:	4413      	add	r3, r2
 80021d6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80021d8:	6822      	ldr	r2, [r4, #0]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	613b      	str	r3, [r7, #16]
  return result;
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	2104      	movs	r1, #4
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	401a      	ands	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	61bb      	str	r3, [r7, #24]
  return result;
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	4313      	orrs	r3, r2
 8002218:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 800221a:	bf00      	nop
 800221c:	3720      	adds	r7, #32
 800221e:	46bd      	mov	sp, r7
 8002220:	bc90      	pop	{r4, r7}
 8002222:	4770      	bx	lr

08002224 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	43db      	mvns	r3, r3
 800223a:	401a      	ands	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	613b      	str	r3, [r7, #16]
  return result;
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	4619      	mov	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	408b      	lsls	r3, r1
 8002258:	431a      	orrs	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	60da      	str	r2, [r3, #12]
}
 800225e:	bf00      	nop
 8002260:	371c      	adds	r7, #28
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr

08002268 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	0c1b      	lsrs	r3, r3, #16
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	60fb      	str	r3, [r7, #12]
  return result;
 8002288:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8002292:	e040      	b.n	8002316 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8002294:	2201      	movs	r2, #1
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	409a      	lsls	r2, r3
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d036      	beq.n	8002310 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	2b07      	cmp	r3, #7
 80022a6:	d806      	bhi.n	80022b6 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80022a8:	f240 1201 	movw	r2, #257	; 0x101
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	61bb      	str	r3, [r7, #24]
 80022b4:	e008      	b.n	80022c8 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3b08      	subs	r3, #8
 80022ba:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022c6:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	461a      	mov	r2, r3
 80022ce:	69b9      	ldr	r1, [r7, #24]
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ff11 	bl	80020f8 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	461a      	mov	r2, r3
 80022dc:	69b9      	ldr	r1, [r7, #24]
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ffa0 	bl	8002224 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d003      	beq.n	80022f4 <LL_GPIO_Init+0x8c>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b09      	cmp	r3, #9
 80022f2:	d10d      	bne.n	8002310 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	461a      	mov	r2, r3
 80022fa:	69b9      	ldr	r1, [r7, #24]
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ff2d 	bl	800215c <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	461a      	mov	r2, r3
 8002308:	69b9      	ldr	r1, [r7, #24]
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ff58 	bl	80021c0 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	3301      	adds	r3, #1
 8002314:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	fa22 f303 	lsr.w	r3, r2, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1b8      	bne.n	8002294 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <LL_RCC_GetSysClkSource+0x14>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	40021000 	.word	0x40021000

08002344 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <LL_RCC_GetAHBPrescaler+0x14>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	40021000 	.word	0x40021000

0800235c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	40021000 	.word	0x40021000

08002374 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <LL_RCC_GetAPB2Prescaler+0x14>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	40021000 	.word	0x40021000

0800238c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <LL_RCC_PLL_GetMainSource+0x14>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	40021000 	.word	0x40021000

080023a4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	40021000 	.word	0x40021000

080023bc <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <LL_RCC_PLL_GetPrediv+0x18>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	0c5b      	lsrs	r3, r3, #17
 80023c6:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000

080023d8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80023e0:	f000 f820 	bl	8002424 <RCC_GetSystemClockFreq>
 80023e4:	4602      	mov	r2, r0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f83a 	bl	8002468 <RCC_GetHCLKClockFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f848 	bl	8002494 <RCC_GetPCLK1ClockFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f854 	bl	80024bc <RCC_GetPCLK2ClockFreq>
 8002414:	4602      	mov	r2, r0
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	60da      	str	r2, [r3, #12]
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800242e:	f7ff ff7d 	bl	800232c <LL_RCC_GetSysClkSource>
 8002432:	4603      	mov	r3, r0
 8002434:	2b04      	cmp	r3, #4
 8002436:	d006      	beq.n	8002446 <RCC_GetSystemClockFreq+0x22>
 8002438:	2b08      	cmp	r3, #8
 800243a:	d007      	beq.n	800244c <RCC_GetSystemClockFreq+0x28>
 800243c:	2b00      	cmp	r3, #0
 800243e:	d109      	bne.n	8002454 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <RCC_GetSystemClockFreq+0x40>)
 8002442:	607b      	str	r3, [r7, #4]
      break;
 8002444:	e009      	b.n	800245a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <RCC_GetSystemClockFreq+0x40>)
 8002448:	607b      	str	r3, [r7, #4]
      break;
 800244a:	e006      	b.n	800245a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800244c:	f000 f84a 	bl	80024e4 <RCC_PLL_GetFreqDomain_SYS>
 8002450:	6078      	str	r0, [r7, #4]
      break;
 8002452:	e002      	b.n	800245a <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <RCC_GetSystemClockFreq+0x40>)
 8002456:	607b      	str	r3, [r7, #4]
      break;
 8002458:	bf00      	nop
  }

  return frequency;
 800245a:	687b      	ldr	r3, [r7, #4]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	007a1200 	.word	0x007a1200

08002468 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002470:	f7ff ff68 	bl	8002344 <LL_RCC_GetAHBPrescaler>
 8002474:	4603      	mov	r3, r0
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	4a04      	ldr	r2, [pc, #16]	; (8002490 <RCC_GetHCLKClockFreq+0x28>)
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	461a      	mov	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	40d3      	lsrs	r3, r2
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	080027d8 	.word	0x080027d8

08002494 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800249c:	f7ff ff5e 	bl	800235c <LL_RCC_GetAPB1Prescaler>
 80024a0:	4603      	mov	r3, r0
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <RCC_GetPCLK1ClockFreq+0x24>)
 80024a6:	5cd3      	ldrb	r3, [r2, r3]
 80024a8:	461a      	mov	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	40d3      	lsrs	r3, r2
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	080027e8 	.word	0x080027e8

080024bc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80024c4:	f7ff ff56 	bl	8002374 <LL_RCC_GetAPB2Prescaler>
 80024c8:	4603      	mov	r3, r0
 80024ca:	0adb      	lsrs	r3, r3, #11
 80024cc:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <RCC_GetPCLK2ClockFreq+0x24>)
 80024ce:	5cd3      	ldrb	r3, [r2, r3]
 80024d0:	461a      	mov	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	40d3      	lsrs	r3, r2
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	080027e8 	.word	0x080027e8

080024e4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	2300      	movs	r3, #0
 80024f0:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80024f2:	f7ff ff4b 	bl	800238c <LL_RCC_PLL_GetMainSource>
 80024f6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <RCC_PLL_GetFreqDomain_SYS+0x22>
 80024fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002502:	d003      	beq.n	800250c <RCC_PLL_GetFreqDomain_SYS+0x28>
 8002504:	e00b      	b.n	800251e <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002506:	4b0d      	ldr	r3, [pc, #52]	; (800253c <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8002508:	607b      	str	r3, [r7, #4]
      break;
 800250a:	e00b      	b.n	8002524 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800250c:	f7ff ff56 	bl	80023bc <LL_RCC_PLL_GetPrediv>
 8002510:	4603      	mov	r3, r0
 8002512:	3301      	adds	r3, #1
 8002514:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	607b      	str	r3, [r7, #4]
      break;
 800251c:	e002      	b.n	8002524 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 800251e:	4b07      	ldr	r3, [pc, #28]	; (800253c <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8002520:	607b      	str	r3, [r7, #4]
      break;
 8002522:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8002524:	f7ff ff3e 	bl	80023a4 <LL_RCC_PLL_GetMultiplicator>
 8002528:	4603      	mov	r3, r0
 800252a:	0c9b      	lsrs	r3, r3, #18
 800252c:	3302      	adds	r3, #2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	fb02 f303 	mul.w	r3, r2, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	003d0900 	.word	0x003d0900
 8002540:	007a1200 	.word	0x007a1200

08002544 <LL_USART_IsEnabled>:
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002558:	bf0c      	ite	eq
 800255a:	2301      	moveq	r3, #1
 800255c:	2300      	movne	r3, #0
 800255e:	b2db      	uxtb	r3, r3
}
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr

0800256a <LL_USART_SetStopBitsLength>:
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	611a      	str	r2, [r3, #16]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr

0800258e <LL_USART_SetHWFlowCtrl>:
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	615a      	str	r2, [r3, #20]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
	...

080025b4 <LL_USART_SetBaudRate>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	009a      	lsls	r2, r3, #2
 80025ca:	441a      	add	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d4:	4a25      	ldr	r2, [pc, #148]	; (800266c <LL_USART_SetBaudRate+0xb8>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	b29b      	uxth	r3, r3
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	b299      	uxth	r1, r3
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	009a      	lsls	r2, r3, #2
 80025ec:	441a      	add	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80025f6:	4b1d      	ldr	r3, [pc, #116]	; (800266c <LL_USART_SetBaudRate+0xb8>)
 80025f8:	fba3 0302 	umull	r0, r3, r3, r2
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	2064      	movs	r0, #100	; 0x64
 8002600:	fb00 f303 	mul.w	r3, r0, r3
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	3332      	adds	r3, #50	; 0x32
 800260a:	4a18      	ldr	r2, [pc, #96]	; (800266c <LL_USART_SetBaudRate+0xb8>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	095b      	lsrs	r3, r3, #5
 8002612:	b29b      	uxth	r3, r3
 8002614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002618:	b29b      	uxth	r3, r3
 800261a:	440b      	add	r3, r1
 800261c:	b299      	uxth	r1, r3
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	009a      	lsls	r2, r3, #2
 8002628:	441a      	add	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <LL_USART_SetBaudRate+0xb8>)
 8002634:	fba3 0302 	umull	r0, r3, r3, r2
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	2064      	movs	r0, #100	; 0x64
 800263c:	fb00 f303 	mul.w	r3, r0, r3
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	3332      	adds	r3, #50	; 0x32
 8002646:	4a09      	ldr	r2, [pc, #36]	; (800266c <LL_USART_SetBaudRate+0xb8>)
 8002648:	fba2 2303 	umull	r2, r3, r2, r3
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	b29b      	uxth	r3, r3
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	b29b      	uxth	r3, r3
 8002656:	440b      	add	r3, r1
 8002658:	b29b      	uxth	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	609a      	str	r2, [r3, #8]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	51eb851f 	.word	0x51eb851f

08002670 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800267e:	2300      	movs	r3, #0
 8002680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ff5e 	bl	8002544 <LL_USART_IsEnabled>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d145      	bne.n	800271a <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002696:	f023 030c 	bic.w	r3, r3, #12
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	6851      	ldr	r1, [r2, #4]
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	68d2      	ldr	r2, [r2, #12]
 80026a2:	4311      	orrs	r1, r2
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	6912      	ldr	r2, [r2, #16]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4619      	mov	r1, r3
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff ff57 	bl	800256a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	4619      	mov	r1, r3
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff ff63 	bl	800258e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80026c8:	f107 0308 	add.w	r3, r7, #8
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fe83 	bl	80023d8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a13      	ldr	r2, [pc, #76]	; (8002724 <LL_USART_Init+0xb4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d102      	bne.n	80026e0 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	e00c      	b.n	80026fa <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a11      	ldr	r2, [pc, #68]	; (8002728 <LL_USART_Init+0xb8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d102      	bne.n	80026ee <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	61bb      	str	r3, [r7, #24]
 80026ec:	e005      	b.n	80026fa <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a0e      	ldr	r2, [pc, #56]	; (800272c <LL_USART_Init+0xbc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d101      	bne.n	80026fa <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00c      	beq.n	800271a <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002708:	2300      	movs	r3, #0
 800270a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	69b9      	ldr	r1, [r7, #24]
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff4d 	bl	80025b4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800271a:	7ffb      	ldrb	r3, [r7, #31]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3720      	adds	r7, #32
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40013800 	.word	0x40013800
 8002728:	40004400 	.word	0x40004400
 800272c:	40004800 	.word	0x40004800

08002730 <__libc_init_array>:
 8002730:	b570      	push	{r4, r5, r6, lr}
 8002732:	2500      	movs	r5, #0
 8002734:	4e0c      	ldr	r6, [pc, #48]	; (8002768 <__libc_init_array+0x38>)
 8002736:	4c0d      	ldr	r4, [pc, #52]	; (800276c <__libc_init_array+0x3c>)
 8002738:	1ba4      	subs	r4, r4, r6
 800273a:	10a4      	asrs	r4, r4, #2
 800273c:	42a5      	cmp	r5, r4
 800273e:	d109      	bne.n	8002754 <__libc_init_array+0x24>
 8002740:	f000 f822 	bl	8002788 <_init>
 8002744:	2500      	movs	r5, #0
 8002746:	4e0a      	ldr	r6, [pc, #40]	; (8002770 <__libc_init_array+0x40>)
 8002748:	4c0a      	ldr	r4, [pc, #40]	; (8002774 <__libc_init_array+0x44>)
 800274a:	1ba4      	subs	r4, r4, r6
 800274c:	10a4      	asrs	r4, r4, #2
 800274e:	42a5      	cmp	r5, r4
 8002750:	d105      	bne.n	800275e <__libc_init_array+0x2e>
 8002752:	bd70      	pop	{r4, r5, r6, pc}
 8002754:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002758:	4798      	blx	r3
 800275a:	3501      	adds	r5, #1
 800275c:	e7ee      	b.n	800273c <__libc_init_array+0xc>
 800275e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002762:	4798      	blx	r3
 8002764:	3501      	adds	r5, #1
 8002766:	e7f2      	b.n	800274e <__libc_init_array+0x1e>
 8002768:	080027f8 	.word	0x080027f8
 800276c:	080027f8 	.word	0x080027f8
 8002770:	080027f8 	.word	0x080027f8
 8002774:	080027fc 	.word	0x080027fc

08002778 <memset>:
 8002778:	4603      	mov	r3, r0
 800277a:	4402      	add	r2, r0
 800277c:	4293      	cmp	r3, r2
 800277e:	d100      	bne.n	8002782 <memset+0xa>
 8002780:	4770      	bx	lr
 8002782:	f803 1b01 	strb.w	r1, [r3], #1
 8002786:	e7f9      	b.n	800277c <memset+0x4>

08002788 <_init>:
 8002788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278a:	bf00      	nop
 800278c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278e:	bc08      	pop	{r3}
 8002790:	469e      	mov	lr, r3
 8002792:	4770      	bx	lr

08002794 <_fini>:
 8002794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002796:	bf00      	nop
 8002798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800279a:	bc08      	pop	{r3}
 800279c:	469e      	mov	lr, r3
 800279e:	4770      	bx	lr
