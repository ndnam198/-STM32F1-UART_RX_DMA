
UART_RX_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000347c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003588  08003588  00013588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003624  08003624  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003624  08003624  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003624  08003624  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003624  08003624  00013624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003628  08003628  00013628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800362c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000070  0800369c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  0800369c  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd8a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d1d  00000000  00000000  0002be23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf0  00000000  00000000  0002db40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af8  00000000  00000000  0002e730  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014b45  00000000  00000000  0002f228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aa9b  00000000  00000000  00043d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072528  00000000  00000000  0004e808  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c0d30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003414  00000000  00000000  000c0dac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003570 	.word	0x08003570

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003570 	.word	0x08003570

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800015e:	b08f      	sub	sp, #60	; 0x3c
 8000160:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE BEGIN 1 */
  pcReceive = ucRxBuffer;
 8000162:	4b6e      	ldr	r3, [pc, #440]	; (800031c <main+0x1c0>)
 8000164:	4a6e      	ldr	r2, [pc, #440]	; (8000320 <main+0x1c4>)
 8000166:	601a      	str	r2, [r3, #0]
  pcPrint = ucRxBuffer;
 8000168:	4b6e      	ldr	r3, [pc, #440]	; (8000324 <main+0x1c8>)
 800016a:	4a6d      	ldr	r2, [pc, #436]	; (8000320 <main+0x1c4>)
 800016c:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800016e:	f000 fcd1 	bl	8000b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000172:	f000 f8ed 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000176:	f000 f9ab 	bl	80004d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800017a:	f000 f983 	bl	8000484 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800017e:	f000 f92d 	bl	80003dc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000182:	f000 f955 	bl	8000430 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  offAllLed;
 8000186:	2201      	movs	r2, #1
 8000188:	2120      	movs	r1, #32
 800018a:	4867      	ldr	r0, [pc, #412]	; (8000328 <main+0x1cc>)
 800018c:	f001 f9b4 	bl	80014f8 <HAL_GPIO_WritePin>
 8000190:	2201      	movs	r2, #1
 8000192:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000196:	4865      	ldr	r0, [pc, #404]	; (800032c <main+0x1d0>)
 8000198:	f001 f9ae 	bl	80014f8 <HAL_GPIO_WritePin>
 800019c:	2201      	movs	r2, #1
 800019e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001a2:	4862      	ldr	r0, [pc, #392]	; (800032c <main+0x1d0>)
 80001a4:	f001 f9a8 	bl	80014f8 <HAL_GPIO_WritePin>
 80001a8:	2201      	movs	r2, #1
 80001aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ae:	485e      	ldr	r0, [pc, #376]	; (8000328 <main+0x1cc>)
 80001b0:	f001 f9a2 	bl	80014f8 <HAL_GPIO_WritePin>
//  HAL_UART_Receive_DMA(&huart3, (uint8_t *)&receive_data, 1);
  HAL_UART_Receive_DMA(&huart2, (uint8_t *)ucRxBuffer, defineUART_RX_BUFFER_LENGTH);
 80001b4:	2264      	movs	r2, #100	; 0x64
 80001b6:	495a      	ldr	r1, [pc, #360]	; (8000320 <main+0x1c4>)
 80001b8:	485d      	ldr	r0, [pc, #372]	; (8000330 <main+0x1d4>)
 80001ba:	f002 f919 	bl	80023f0 <HAL_UART_Receive_DMA>
  ucBufferLen = strlen((char*) ucRxBuffer);
 80001be:	4858      	ldr	r0, [pc, #352]	; (8000320 <main+0x1c4>)
 80001c0:	f7ff ffc4 	bl	800014c <strlen>
 80001c4:	4603      	mov	r3, r0
 80001c6:	b2da      	uxtb	r2, r3
 80001c8:	4b5a      	ldr	r3, [pc, #360]	; (8000334 <main+0x1d8>)
 80001ca:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */
//    HAL_UART_Transmit_IT(&huart2, (uint8_t *)&send_data, 1);
//    HAL_Delay(1000);
//    send_data++;
	  ucTemp = strlen((char*) ucRxBuffer);
 80001cc:	4854      	ldr	r0, [pc, #336]	; (8000320 <main+0x1c4>)
 80001ce:	f7ff ffbd 	bl	800014c <strlen>
 80001d2:	4603      	mov	r3, r0
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	4b58      	ldr	r3, [pc, #352]	; (8000338 <main+0x1dc>)
 80001d8:	701a      	strb	r2, [r3, #0]
	  if(ucTemp > 100){
 80001da:	4b57      	ldr	r3, [pc, #348]	; (8000338 <main+0x1dc>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	2b64      	cmp	r3, #100	; 0x64
 80001e0:	d907      	bls.n	80001f2 <main+0x96>
		  memset((char*)ucRxBuffer, 0, defineUART_RX_BUFFER_LENGTH);
 80001e2:	2264      	movs	r2, #100	; 0x64
 80001e4:	2100      	movs	r1, #0
 80001e6:	484e      	ldr	r0, [pc, #312]	; (8000320 <main+0x1c4>)
 80001e8:	f002 fda8 	bl	8002d3c <memset>
		  ucTemp = 0;
 80001ec:	4b52      	ldr	r3, [pc, #328]	; (8000338 <main+0x1dc>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	701a      	strb	r2, [r3, #0]
	  }
	  if(ucTemp > ucBufferLen){
 80001f2:	4b51      	ldr	r3, [pc, #324]	; (8000338 <main+0x1dc>)
 80001f4:	781a      	ldrb	r2, [r3, #0]
 80001f6:	4b4f      	ldr	r3, [pc, #316]	; (8000334 <main+0x1d8>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d943      	bls.n	8000286 <main+0x12a>
		  vUARTSend(huart2, (uint8_t *)"\r\nReceive a string from UART2: \r\n");
 80001fe:	4e4c      	ldr	r6, [pc, #304]	; (8000330 <main+0x1d4>)
 8000200:	4b4e      	ldr	r3, [pc, #312]	; (800033c <main+0x1e0>)
 8000202:	930c      	str	r3, [sp, #48]	; 0x30
 8000204:	466d      	mov	r5, sp
 8000206:	f106 0410 	add.w	r4, r6, #16
 800020a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800020c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800020e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000212:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000216:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800021a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800021e:	f000 f9f3 	bl	8000608 <vUARTSend>
		  vUARTSend(huart2, (uint8_t *)ucRxBuffer+ucBufferLen);
 8000222:	4b44      	ldr	r3, [pc, #272]	; (8000334 <main+0x1d8>)
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	461a      	mov	r2, r3
 8000228:	4b3d      	ldr	r3, [pc, #244]	; (8000320 <main+0x1c4>)
 800022a:	4413      	add	r3, r2
 800022c:	4e40      	ldr	r6, [pc, #256]	; (8000330 <main+0x1d4>)
 800022e:	930c      	str	r3, [sp, #48]	; 0x30
 8000230:	466d      	mov	r5, sp
 8000232:	f106 0410 	add.w	r4, r6, #16
 8000236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000238:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800023a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800023c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800023e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000242:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000246:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800024a:	f000 f9dd 	bl	8000608 <vUARTSend>
		  vUARTSend(huart2, (uint8_t *)"\r\n\r\n");
 800024e:	4e38      	ldr	r6, [pc, #224]	; (8000330 <main+0x1d4>)
 8000250:	4b3b      	ldr	r3, [pc, #236]	; (8000340 <main+0x1e4>)
 8000252:	930c      	str	r3, [sp, #48]	; 0x30
 8000254:	466d      	mov	r5, sp
 8000256:	f106 0410 	add.w	r4, r6, #16
 800025a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800025c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800025e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000262:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000266:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800026a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800026e:	f000 f9cb 	bl	8000608 <vUARTSend>

		  ucBufferLen = ucTemp;
 8000272:	4b31      	ldr	r3, [pc, #196]	; (8000338 <main+0x1dc>)
 8000274:	781a      	ldrb	r2, [r3, #0]
 8000276:	4b2f      	ldr	r3, [pc, #188]	; (8000334 <main+0x1d8>)
 8000278:	701a      	strb	r2, [r3, #0]
		  toggleLed2;
 800027a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800027e:	482b      	ldr	r0, [pc, #172]	; (800032c <main+0x1d0>)
 8000280:	f001 f952 	bl	8001528 <HAL_GPIO_TogglePin>
 8000284:	e02e      	b.n	80002e4 <main+0x188>
	  }
	  else if(ucTemp < ucBufferLen){
 8000286:	4b2c      	ldr	r3, [pc, #176]	; (8000338 <main+0x1dc>)
 8000288:	781a      	ldrb	r2, [r3, #0]
 800028a:	4b2a      	ldr	r3, [pc, #168]	; (8000334 <main+0x1d8>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	429a      	cmp	r2, r3
 8000290:	d228      	bcs.n	80002e4 <main+0x188>
		  vUARTSend(huart2, (uint8_t *)"\r\nReceive a string from UART2: \r\n");
 8000292:	4e27      	ldr	r6, [pc, #156]	; (8000330 <main+0x1d4>)
 8000294:	4b29      	ldr	r3, [pc, #164]	; (800033c <main+0x1e0>)
 8000296:	930c      	str	r3, [sp, #48]	; 0x30
 8000298:	466d      	mov	r5, sp
 800029a:	f106 0410 	add.w	r4, r6, #16
 800029e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002aa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80002ae:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80002b2:	f000 f9a9 	bl	8000608 <vUARTSend>
		  sprintf((char *)ucGeneralString, "\"%s%s\"\r\n", ucRxBuffer+ucBufferLen, ucRxBuffer+ucTemp);
 80002b6:	4b1f      	ldr	r3, [pc, #124]	; (8000334 <main+0x1d8>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	461a      	mov	r2, r3
 80002bc:	4b18      	ldr	r3, [pc, #96]	; (8000320 <main+0x1c4>)
 80002be:	441a      	add	r2, r3
 80002c0:	4b1d      	ldr	r3, [pc, #116]	; (8000338 <main+0x1dc>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	4619      	mov	r1, r3
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <main+0x1c4>)
 80002c8:	440b      	add	r3, r1
 80002ca:	491e      	ldr	r1, [pc, #120]	; (8000344 <main+0x1e8>)
 80002cc:	481e      	ldr	r0, [pc, #120]	; (8000348 <main+0x1ec>)
 80002ce:	f002 fd3d 	bl	8002d4c <siprintf>
		  ucBufferLen = ucTemp;
 80002d2:	4b19      	ldr	r3, [pc, #100]	; (8000338 <main+0x1dc>)
 80002d4:	781a      	ldrb	r2, [r3, #0]
 80002d6:	4b17      	ldr	r3, [pc, #92]	; (8000334 <main+0x1d8>)
 80002d8:	701a      	strb	r2, [r3, #0]
		  toggleLed3;
 80002da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002de:	4813      	ldr	r0, [pc, #76]	; (800032c <main+0x1d0>)
 80002e0:	f001 f922 	bl	8001528 <HAL_GPIO_TogglePin>
	  }



	  vUARTSend(huart2, (uint8_t *)"*");
 80002e4:	4e12      	ldr	r6, [pc, #72]	; (8000330 <main+0x1d4>)
 80002e6:	4b19      	ldr	r3, [pc, #100]	; (800034c <main+0x1f0>)
 80002e8:	930c      	str	r3, [sp, #48]	; 0x30
 80002ea:	466d      	mov	r5, sp
 80002ec:	f106 0410 	add.w	r4, r6, #16
 80002f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002fc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000300:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000304:	f000 f980 	bl	8000608 <vUARTSend>
	  toggleLed2;
 8000308:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800030c:	4807      	ldr	r0, [pc, #28]	; (800032c <main+0x1d0>)
 800030e:	f001 f90b 	bl	8001528 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000312:	20c8      	movs	r0, #200	; 0xc8
 8000314:	f000 fc30 	bl	8000b78 <HAL_Delay>
	  ucTemp = strlen((char*) ucRxBuffer);
 8000318:	e758      	b.n	80001cc <main+0x70>
 800031a:	bf00      	nop
 800031c:	200001c4 	.word	0x200001c4
 8000320:	2000008c 	.word	0x2000008c
 8000324:	200002d4 	.word	0x200002d4
 8000328:	40010c00 	.word	0x40010c00
 800032c:	40010800 	.word	0x40010800
 8000330:	20000294 	.word	0x20000294
 8000334:	20000290 	.word	0x20000290
 8000338:	20000291 	.word	0x20000291
 800033c:	08003588 	.word	0x08003588
 8000340:	080035ac 	.word	0x080035ac
 8000344:	080035b4 	.word	0x080035b4
 8000348:	200001c8 	.word	0x200001c8
 800034c:	080035c0 	.word	0x080035c0

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b090      	sub	sp, #64	; 0x40
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0318 	add.w	r3, r7, #24
 800035a:	2228      	movs	r2, #40	; 0x28
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f002 fcec 	bl	8002d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000372:	2301      	movs	r3, #1
 8000374:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800037a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000380:	2301      	movs	r3, #1
 8000382:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000384:	2302      	movs	r3, #2
 8000386:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800038c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800038e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000392:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000394:	f107 0318 	add.w	r3, r7, #24
 8000398:	4618      	mov	r0, r3
 800039a:	f001 f8ff 	bl	800159c <HAL_RCC_OscConfig>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003a4:	f000 f92a 	bl	80005fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a8:	230f      	movs	r3, #15
 80003aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ac:	2302      	movs	r3, #2
 80003ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2102      	movs	r1, #2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 fb6a 	bl	8001a9c <HAL_RCC_ClockConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ce:	f000 f915 	bl	80005fc <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3740      	adds	r7, #64	; 0x40
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003e2:	4a12      	ldr	r2, [pc, #72]	; (800042c <MX_USART2_UART_Init+0x50>)
 80003e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000400:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 8000402:	220c      	movs	r2, #12
 8000404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000406:	4b08      	ldr	r3, [pc, #32]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000412:	4805      	ldr	r0, [pc, #20]	; (8000428 <MX_USART2_UART_Init+0x4c>)
 8000414:	f001 ff06 	bl	8002224 <HAL_UART_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800041e:	f000 f8ed 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000294 	.word	0x20000294
 800042c:	40004400 	.word	0x40004400

08000430 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_USART3_UART_Init+0x4c>)
 8000436:	4a12      	ldr	r2, [pc, #72]	; (8000480 <MX_USART3_UART_Init+0x50>)
 8000438:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800043a:	4b10      	ldr	r3, [pc, #64]	; (800047c <MX_USART3_UART_Init+0x4c>)
 800043c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000440:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_USART3_UART_Init+0x4c>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_USART3_UART_Init+0x4c>)
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <MX_USART3_UART_Init+0x4c>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000454:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_USART3_UART_Init+0x4c>)
 8000456:	220c      	movs	r2, #12
 8000458:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <MX_USART3_UART_Init+0x4c>)
 800045c:	2200      	movs	r2, #0
 800045e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_USART3_UART_Init+0x4c>)
 8000462:	2200      	movs	r2, #0
 8000464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000466:	4805      	ldr	r0, [pc, #20]	; (800047c <MX_USART3_UART_Init+0x4c>)
 8000468:	f001 fedc 	bl	8002224 <HAL_UART_Init>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000472:	f000 f8c3 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000184 	.word	0x20000184
 8000480:	40004800 	.word	0x40004800

08000484 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800048a:	4b10      	ldr	r3, [pc, #64]	; (80004cc <MX_DMA_Init+0x48>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a0f      	ldr	r2, [pc, #60]	; (80004cc <MX_DMA_Init+0x48>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <MX_DMA_Init+0x48>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2100      	movs	r1, #0
 80004a6:	200d      	movs	r0, #13
 80004a8:	f000 fc3d 	bl	8000d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80004ac:	200d      	movs	r0, #13
 80004ae:	f000 fc56 	bl	8000d5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2100      	movs	r1, #0
 80004b6:	2010      	movs	r0, #16
 80004b8:	f000 fc35 	bl	8000d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004bc:	2010      	movs	r0, #16
 80004be:	f000 fc4e 	bl	8000d5e <HAL_NVIC_EnableIRQ>

}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0310 	add.w	r3, r7, #16
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004e4:	4b33      	ldr	r3, [pc, #204]	; (80005b4 <MX_GPIO_Init+0xe4>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a32      	ldr	r2, [pc, #200]	; (80005b4 <MX_GPIO_Init+0xe4>)
 80004ea:	f043 0320 	orr.w	r3, r3, #32
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b30      	ldr	r3, [pc, #192]	; (80005b4 <MX_GPIO_Init+0xe4>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0320 	and.w	r3, r3, #32
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	4b2d      	ldr	r3, [pc, #180]	; (80005b4 <MX_GPIO_Init+0xe4>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a2c      	ldr	r2, [pc, #176]	; (80005b4 <MX_GPIO_Init+0xe4>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <MX_GPIO_Init+0xe4>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000514:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <MX_GPIO_Init+0xe4>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a26      	ldr	r2, [pc, #152]	; (80005b4 <MX_GPIO_Init+0xe4>)
 800051a:	f043 0308 	orr.w	r3, r3, #8
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b24      	ldr	r3, [pc, #144]	; (80005b4 <MX_GPIO_Init+0xe4>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0308 	and.w	r3, r3, #8
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_3_Pin|USER_LED_2_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000532:	4821      	ldr	r0, [pc, #132]	; (80005b8 <MX_GPIO_Init+0xe8>)
 8000534:	f000 ffe0 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USER_LED_1_Pin|USER_LED_4_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800053e:	481f      	ldr	r0, [pc, #124]	; (80005bc <MX_GPIO_Init+0xec>)
 8000540:	f000 ffda 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BT_UP_Pin BT_CENTER_Pin BT_DOWN_Pin */
  GPIO_InitStruct.Pin = BT_UP_Pin|BT_CENTER_Pin|BT_DOWN_Pin;
 8000544:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800054a:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <MX_GPIO_Init+0xf0>)
 800054c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800054e:	2301      	movs	r3, #1
 8000550:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000552:	f107 0310 	add.w	r3, r7, #16
 8000556:	4619      	mov	r1, r3
 8000558:	4817      	ldr	r0, [pc, #92]	; (80005b8 <MX_GPIO_Init+0xe8>)
 800055a:	f000 fe73 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_3_Pin USER_LED_2_Pin */
  GPIO_InitStruct.Pin = USER_LED_3_Pin|USER_LED_2_Pin;
 800055e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000564:	2301      	movs	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056c:	2302      	movs	r3, #2
 800056e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	4619      	mov	r1, r3
 8000576:	4810      	ldr	r0, [pc, #64]	; (80005b8 <MX_GPIO_Init+0xe8>)
 8000578:	f000 fe64 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_1_Pin USER_LED_4_Pin */
  GPIO_InitStruct.Pin = USER_LED_1_Pin|USER_LED_4_Pin;
 800057c:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000582:	2301      	movs	r3, #1
 8000584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2302      	movs	r3, #2
 800058c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	4619      	mov	r1, r3
 8000594:	4809      	ldr	r0, [pc, #36]	; (80005bc <MX_GPIO_Init+0xec>)
 8000596:	f000 fe55 	bl	8001244 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2103      	movs	r1, #3
 800059e:	2017      	movs	r0, #23
 80005a0:	f000 fbc1 	bl	8000d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005a4:	2017      	movs	r0, #23
 80005a6:	f000 fbda 	bl	8000d5e <HAL_NVIC_EnableIRQ>

}
 80005aa:	bf00      	nop
 80005ac:	3720      	adds	r7, #32
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010800 	.word	0x40010800
 80005bc:	40010c00 	.word	0x40010c00
 80005c0:	10210000 	.word	0x10210000

080005c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
//    HAL_UART_Transmit_IT(&huart3, (uint8_t *)&receive_data, 1);
  }

  if(huart->Instance == huart2.Instance){
  }
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
	...

080005d8 <HAL_TIM_PeriodElapsedCallback>:
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d101      	bne.n	80005ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005ea:	f000 faa9 	bl	8000b40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40000800 	.word	0x40000800

080005fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <vUARTSend>:
#include "myLib.h"

void vUARTSend(UART_HandleTypeDef huart ,uint8_t *String){
 8000608:	b084      	sub	sp, #16
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
 800060e:	f107 0c08 	add.w	ip, r7, #8
 8000612:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart, (uint8_t *)String, strlen((char*)String), defineUART_TX_DELAY);
 8000616:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000618:	f7ff fd98 	bl	800014c <strlen>
 800061c:	4603      	mov	r3, r0
 800061e:	b29a      	uxth	r2, r3
 8000620:	230a      	movs	r3, #10
 8000622:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000624:	f107 0008 	add.w	r0, r7, #8
 8000628:	f001 fe49 	bl	80022be <HAL_UART_Transmit>
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <HAL_MspInit+0x5c>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	4a14      	ldr	r2, [pc, #80]	; (8000694 <HAL_MspInit+0x5c>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6193      	str	r3, [r2, #24]
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_MspInit+0x5c>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_MspInit+0x5c>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_MspInit+0x5c>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	61d3      	str	r3, [r2, #28]
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_MspInit+0x5c>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <HAL_MspInit+0x60>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <HAL_MspInit+0x60>)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	40021000 	.word	0x40021000
 8000698:	40010000 	.word	0x40010000

0800069c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0318 	add.w	r3, r7, #24
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a65      	ldr	r2, [pc, #404]	; (800084c <HAL_UART_MspInit+0x1b0>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d15e      	bne.n	800077a <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006bc:	4b64      	ldr	r3, [pc, #400]	; (8000850 <HAL_UART_MspInit+0x1b4>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	4a63      	ldr	r2, [pc, #396]	; (8000850 <HAL_UART_MspInit+0x1b4>)
 80006c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c6:	61d3      	str	r3, [r2, #28]
 80006c8:	4b61      	ldr	r3, [pc, #388]	; (8000850 <HAL_UART_MspInit+0x1b4>)
 80006ca:	69db      	ldr	r3, [r3, #28]
 80006cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b5e      	ldr	r3, [pc, #376]	; (8000850 <HAL_UART_MspInit+0x1b4>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a5d      	ldr	r2, [pc, #372]	; (8000850 <HAL_UART_MspInit+0x1b4>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b5b      	ldr	r3, [pc, #364]	; (8000850 <HAL_UART_MspInit+0x1b4>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006ec:	2304      	movs	r3, #4
 80006ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f4:	2303      	movs	r3, #3
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 0318 	add.w	r3, r7, #24
 80006fc:	4619      	mov	r1, r3
 80006fe:	4855      	ldr	r0, [pc, #340]	; (8000854 <HAL_UART_MspInit+0x1b8>)
 8000700:	f000 fda0 	bl	8001244 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000704:	2308      	movs	r3, #8
 8000706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000710:	f107 0318 	add.w	r3, r7, #24
 8000714:	4619      	mov	r1, r3
 8000716:	484f      	ldr	r0, [pc, #316]	; (8000854 <HAL_UART_MspInit+0x1b8>)
 8000718:	f000 fd94 	bl	8001244 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800071c:	4b4e      	ldr	r3, [pc, #312]	; (8000858 <HAL_UART_MspInit+0x1bc>)
 800071e:	4a4f      	ldr	r2, [pc, #316]	; (800085c <HAL_UART_MspInit+0x1c0>)
 8000720:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000722:	4b4d      	ldr	r3, [pc, #308]	; (8000858 <HAL_UART_MspInit+0x1bc>)
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000728:	4b4b      	ldr	r3, [pc, #300]	; (8000858 <HAL_UART_MspInit+0x1bc>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800072e:	4b4a      	ldr	r3, [pc, #296]	; (8000858 <HAL_UART_MspInit+0x1bc>)
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000734:	4b48      	ldr	r3, [pc, #288]	; (8000858 <HAL_UART_MspInit+0x1bc>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800073a:	4b47      	ldr	r3, [pc, #284]	; (8000858 <HAL_UART_MspInit+0x1bc>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000740:	4b45      	ldr	r3, [pc, #276]	; (8000858 <HAL_UART_MspInit+0x1bc>)
 8000742:	2220      	movs	r2, #32
 8000744:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000746:	4b44      	ldr	r3, [pc, #272]	; (8000858 <HAL_UART_MspInit+0x1bc>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800074c:	4842      	ldr	r0, [pc, #264]	; (8000858 <HAL_UART_MspInit+0x1bc>)
 800074e:	f000 fb15 	bl	8000d7c <HAL_DMA_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000758:	f7ff ff50 	bl	80005fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a3e      	ldr	r2, [pc, #248]	; (8000858 <HAL_UART_MspInit+0x1bc>)
 8000760:	635a      	str	r2, [r3, #52]	; 0x34
 8000762:	4a3d      	ldr	r2, [pc, #244]	; (8000858 <HAL_UART_MspInit+0x1bc>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2100      	movs	r1, #0
 800076c:	2026      	movs	r0, #38	; 0x26
 800076e:	f000 fada 	bl	8000d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000772:	2026      	movs	r0, #38	; 0x26
 8000774:	f000 faf3 	bl	8000d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000778:	e064      	b.n	8000844 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART3)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a38      	ldr	r2, [pc, #224]	; (8000860 <HAL_UART_MspInit+0x1c4>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d15f      	bne.n	8000844 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000784:	4b32      	ldr	r3, [pc, #200]	; (8000850 <HAL_UART_MspInit+0x1b4>)
 8000786:	69db      	ldr	r3, [r3, #28]
 8000788:	4a31      	ldr	r2, [pc, #196]	; (8000850 <HAL_UART_MspInit+0x1b4>)
 800078a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800078e:	61d3      	str	r3, [r2, #28]
 8000790:	4b2f      	ldr	r3, [pc, #188]	; (8000850 <HAL_UART_MspInit+0x1b4>)
 8000792:	69db      	ldr	r3, [r3, #28]
 8000794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079c:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <HAL_UART_MspInit+0x1b4>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a2b      	ldr	r2, [pc, #172]	; (8000850 <HAL_UART_MspInit+0x1b4>)
 80007a2:	f043 0308 	orr.w	r3, r3, #8
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <HAL_UART_MspInit+0x1b4>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0308 	and.w	r3, r3, #8
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007be:	2303      	movs	r3, #3
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	f107 0318 	add.w	r3, r7, #24
 80007c6:	4619      	mov	r1, r3
 80007c8:	4826      	ldr	r0, [pc, #152]	; (8000864 <HAL_UART_MspInit+0x1c8>)
 80007ca:	f000 fd3b 	bl	8001244 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	f107 0318 	add.w	r3, r7, #24
 80007e0:	4619      	mov	r1, r3
 80007e2:	4820      	ldr	r0, [pc, #128]	; (8000864 <HAL_UART_MspInit+0x1c8>)
 80007e4:	f000 fd2e 	bl	8001244 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <HAL_UART_MspInit+0x1cc>)
 80007ea:	4a20      	ldr	r2, [pc, #128]	; (800086c <HAL_UART_MspInit+0x1d0>)
 80007ec:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <HAL_UART_MspInit+0x1cc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <HAL_UART_MspInit+0x1cc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007fa:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <HAL_UART_MspInit+0x1cc>)
 80007fc:	2280      	movs	r2, #128	; 0x80
 80007fe:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <HAL_UART_MspInit+0x1cc>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <HAL_UART_MspInit+0x1cc>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <HAL_UART_MspInit+0x1cc>)
 800080e:	2220      	movs	r2, #32
 8000810:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <HAL_UART_MspInit+0x1cc>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000818:	4813      	ldr	r0, [pc, #76]	; (8000868 <HAL_UART_MspInit+0x1cc>)
 800081a:	f000 faaf 	bl	8000d7c <HAL_DMA_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8000824:	f7ff feea 	bl	80005fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <HAL_UART_MspInit+0x1cc>)
 800082c:	635a      	str	r2, [r3, #52]	; 0x34
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_UART_MspInit+0x1cc>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2027      	movs	r0, #39	; 0x27
 800083a:	f000 fa74 	bl	8000d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800083e:	2027      	movs	r0, #39	; 0x27
 8000840:	f000 fa8d 	bl	8000d5e <HAL_NVIC_EnableIRQ>
}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40004400 	.word	0x40004400
 8000850:	40021000 	.word	0x40021000
 8000854:	40010800 	.word	0x40010800
 8000858:	200000fc 	.word	0x200000fc
 800085c:	4002006c 	.word	0x4002006c
 8000860:	40004800 	.word	0x40004800
 8000864:	40010c00 	.word	0x40010c00
 8000868:	20000140 	.word	0x20000140
 800086c:	40020030 	.word	0x40020030

08000870 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	; 0x30
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000880:	2200      	movs	r2, #0
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	201e      	movs	r0, #30
 8000886:	f000 fa4e 	bl	8000d26 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800088a:	201e      	movs	r0, #30
 800088c:	f000 fa67 	bl	8000d5e <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <HAL_InitTick+0xa0>)
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	4a1e      	ldr	r2, [pc, #120]	; (8000910 <HAL_InitTick+0xa0>)
 8000896:	f043 0304 	orr.w	r3, r3, #4
 800089a:	61d3      	str	r3, [r2, #28]
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <HAL_InitTick+0xa0>)
 800089e:	69db      	ldr	r3, [r3, #28]
 80008a0:	f003 0304 	and.w	r3, r3, #4
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a8:	f107 0210 	add.w	r2, r7, #16
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 fa70 	bl	8001d98 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008b8:	f001 fa46 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 80008bc:	4603      	mov	r3, r0
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c4:	4a13      	ldr	r2, [pc, #76]	; (8000914 <HAL_InitTick+0xa4>)
 80008c6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ca:	0c9b      	lsrs	r3, r3, #18
 80008cc:	3b01      	subs	r3, #1
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_InitTick+0xa8>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <HAL_InitTick+0xac>)
 80008d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_InitTick+0xa8>)
 80008d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008dc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <HAL_InitTick+0xa8>)
 80008e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_InitTick+0xa8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_InitTick+0xa8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <HAL_InitTick+0xa8>)
 80008f2:	f001 fa9f 	bl	8001e34 <HAL_TIM_Base_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d104      	bne.n	8000906 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80008fc:	4806      	ldr	r0, [pc, #24]	; (8000918 <HAL_InitTick+0xa8>)
 80008fe:	f001 facd 	bl	8001e9c <HAL_TIM_Base_Start_IT>
 8000902:	4603      	mov	r3, r0
 8000904:	e000      	b.n	8000908 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3730      	adds	r7, #48	; 0x30
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40021000 	.word	0x40021000
 8000914:	431bde83 	.word	0x431bde83
 8000918:	200002d8 	.word	0x200002d8
 800091c:	40000800 	.word	0x40000800

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <HardFault_Handler+0x4>

08000932 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <MemManage_Handler+0x4>

08000938 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <BusFault_Handler+0x4>

0800093e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <UsageFault_Handler+0x4>

08000944 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <DMA1_Channel3_IRQHandler+0x10>)
 800097a:	f000 fb2f 	bl	8000fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000140 	.word	0x20000140

08000988 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <DMA1_Channel6_IRQHandler+0x10>)
 800098e:	f000 fb25 	bl	8000fdc <HAL_DMA_IRQHandler>
  //     break;
  //   }
  // }
  
  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000fc 	.word	0x200000fc

0800099c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80009a0:	2040      	movs	r0, #64	; 0x40
 80009a2:	f000 fdd9 	bl	8001558 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80009a6:	2080      	movs	r0, #128	; 0x80
 80009a8:	f000 fdd6 	bl	8001558 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80009ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009b0:	f000 fdd2 	bl	8001558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <TIM4_IRQHandler+0x10>)
 80009be:	f001 fa90 	bl	8001ee2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200002d8 	.word	0x200002d8

080009cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <USART2_IRQHandler+0x10>)
 80009d2:	f001 fd8d 	bl	80024f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000294 	.word	0x20000294

080009e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <USART3_IRQHandler+0x10>)
 80009e6:	f001 fd83 	bl	80024f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000184 	.word	0x20000184

080009f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009fc:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <_sbrk+0x5c>)
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <_sbrk+0x60>)
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d102      	bne.n	8000a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <_sbrk+0x64>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <_sbrk+0x68>)
 8000a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <_sbrk+0x64>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d207      	bcs.n	8000a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a24:	f002 f960 	bl	8002ce8 <__errno>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	230c      	movs	r3, #12
 8000a2c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a32:	e009      	b.n	8000a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <_sbrk+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3a:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <_sbrk+0x64>)
 8000a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a46:	68fb      	ldr	r3, [r7, #12]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20005000 	.word	0x20005000
 8000a54:	00000400 	.word	0x00000400
 8000a58:	200000f0 	.word	0x200000f0
 8000a5c:	20000320 	.word	0x20000320

08000a60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <SystemInit+0x5c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a14      	ldr	r2, [pc, #80]	; (8000abc <SystemInit+0x5c>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <SystemInit+0x5c>)
 8000a72:	685a      	ldr	r2, [r3, #4]
 8000a74:	4911      	ldr	r1, [pc, #68]	; (8000abc <SystemInit+0x5c>)
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <SystemInit+0x60>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <SystemInit+0x5c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <SystemInit+0x5c>)
 8000a82:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a8a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <SystemInit+0x5c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <SystemInit+0x5c>)
 8000a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a96:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <SystemInit+0x5c>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	4a07      	ldr	r2, [pc, #28]	; (8000abc <SystemInit+0x5c>)
 8000a9e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000aa2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <SystemInit+0x5c>)
 8000aa6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000aaa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <SystemInit+0x64>)
 8000aae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ab2:	609a      	str	r2, [r3, #8]
#endif 
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	f8ff0000 	.word	0xf8ff0000
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ac8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000aca:	e003      	b.n	8000ad4 <LoopCopyDataInit>

08000acc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ace:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ad0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ad2:	3104      	adds	r1, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ad4:	480a      	ldr	r0, [pc, #40]	; (8000b00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ad8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ada:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000adc:	d3f6      	bcc.n	8000acc <CopyDataInit>
  ldr r2, =_sbss
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ae0:	e002      	b.n	8000ae8 <LoopFillZerobss>

08000ae2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ae4:	f842 3b04 	str.w	r3, [r2], #4

08000ae8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000aea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000aec:	d3f9      	bcc.n	8000ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aee:	f7ff ffb7 	bl	8000a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af2:	f002 f8ff 	bl	8002cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af6:	f7ff fb31 	bl	800015c <main>
  bx lr
 8000afa:	4770      	bx	lr
  ldr r3, =_sidata
 8000afc:	0800362c 	.word	0x0800362c
  ldr r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b04:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000b08:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000b0c:	20000320 	.word	0x20000320

08000b10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC1_2_IRQHandler>
	...

08000b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_Init+0x28>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_Init+0x28>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 f8f3 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f7ff fea0 	bl	8000870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b30:	f7ff fd82 	bl	8000638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40022000 	.word	0x40022000

08000b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x1c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x20>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <HAL_IncTick+0x20>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000318 	.word	0x20000318

08000b64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <HAL_GetTick+0x10>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	20000318 	.word	0x20000318

08000b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff fff0 	bl	8000b64 <HAL_GetTick>
 8000b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_Delay+0x40>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9e:	bf00      	nop
 8000ba0:	f7ff ffe0 	bl	8000b64 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000008 	.word	0x20000008

08000bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db0b      	blt.n	8000c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	4906      	ldr	r1, [pc, #24]	; (8000c54 <__NVIC_EnableIRQ+0x34>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff4f 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d38:	f7ff ff64 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	6978      	ldr	r0, [r7, #20]
 8000d44:	f7ff ffb2 	bl	8000cac <NVIC_EncodePriority>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff81 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff57 	bl	8000c20 <__NVIC_EnableIRQ>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e043      	b.n	8000e1a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <HAL_DMA_Init+0xa8>)
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a22      	ldr	r2, [pc, #136]	; (8000e28 <HAL_DMA_Init+0xac>)
 8000d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	009a      	lsls	r2, r3, #2
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a1f      	ldr	r2, [pc, #124]	; (8000e2c <HAL_DMA_Init+0xb0>)
 8000dae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2202      	movs	r2, #2
 8000db4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000dc6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000dca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	bffdfff8 	.word	0xbffdfff8
 8000e28:	cccccccd 	.word	0xcccccccd
 8000e2c:	40020000 	.word	0x40020000

08000e30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d101      	bne.n	8000e50 <HAL_DMA_Start_IT+0x20>
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	e04a      	b.n	8000ee6 <HAL_DMA_Start_IT+0xb6>
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2201      	movs	r2, #1
 8000e54:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d13a      	bne.n	8000ed8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2202      	movs	r2, #2
 8000e66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0201 	bic.w	r2, r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	f000 f9ae 	bl	80011e8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d008      	beq.n	8000ea6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 020e 	orr.w	r2, r2, #14
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	e00f      	b.n	8000ec6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 0204 	bic.w	r2, r2, #4
 8000eb4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f042 020a 	orr.w	r2, r2, #10
 8000ec4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f042 0201 	orr.w	r2, r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	e005      	b.n	8000ee4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d005      	beq.n	8000f12 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2204      	movs	r2, #4
 8000f0a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	e051      	b.n	8000fb6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 020e 	bic.w	r2, r2, #14
 8000f20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 0201 	bic.w	r2, r2, #1
 8000f30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a22      	ldr	r2, [pc, #136]	; (8000fc0 <HAL_DMA_Abort_IT+0xd0>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d029      	beq.n	8000f90 <HAL_DMA_Abort_IT+0xa0>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a20      	ldr	r2, [pc, #128]	; (8000fc4 <HAL_DMA_Abort_IT+0xd4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d022      	beq.n	8000f8c <HAL_DMA_Abort_IT+0x9c>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a1f      	ldr	r2, [pc, #124]	; (8000fc8 <HAL_DMA_Abort_IT+0xd8>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d01a      	beq.n	8000f86 <HAL_DMA_Abort_IT+0x96>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a1d      	ldr	r2, [pc, #116]	; (8000fcc <HAL_DMA_Abort_IT+0xdc>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d012      	beq.n	8000f80 <HAL_DMA_Abort_IT+0x90>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <HAL_DMA_Abort_IT+0xe0>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d00a      	beq.n	8000f7a <HAL_DMA_Abort_IT+0x8a>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a1a      	ldr	r2, [pc, #104]	; (8000fd4 <HAL_DMA_Abort_IT+0xe4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d102      	bne.n	8000f74 <HAL_DMA_Abort_IT+0x84>
 8000f6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f72:	e00e      	b.n	8000f92 <HAL_DMA_Abort_IT+0xa2>
 8000f74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f78:	e00b      	b.n	8000f92 <HAL_DMA_Abort_IT+0xa2>
 8000f7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f7e:	e008      	b.n	8000f92 <HAL_DMA_Abort_IT+0xa2>
 8000f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f84:	e005      	b.n	8000f92 <HAL_DMA_Abort_IT+0xa2>
 8000f86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f8a:	e002      	b.n	8000f92 <HAL_DMA_Abort_IT+0xa2>
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	e000      	b.n	8000f92 <HAL_DMA_Abort_IT+0xa2>
 8000f90:	2301      	movs	r3, #1
 8000f92:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <HAL_DMA_Abort_IT+0xe8>)
 8000f94:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	4798      	blx	r3
    } 
  }
  return status;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40020008 	.word	0x40020008
 8000fc4:	4002001c 	.word	0x4002001c
 8000fc8:	40020030 	.word	0x40020030
 8000fcc:	40020044 	.word	0x40020044
 8000fd0:	40020058 	.word	0x40020058
 8000fd4:	4002006c 	.word	0x4002006c
 8000fd8:	40020000 	.word	0x40020000

08000fdc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4013      	ands	r3, r2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d04f      	beq.n	80010a4 <HAL_DMA_IRQHandler+0xc8>
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	2b00      	cmp	r3, #0
 800100c:	d04a      	beq.n	80010a4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0320 	and.w	r3, r3, #32
 8001018:	2b00      	cmp	r3, #0
 800101a:	d107      	bne.n	800102c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0204 	bic.w	r2, r2, #4
 800102a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a66      	ldr	r2, [pc, #408]	; (80011cc <HAL_DMA_IRQHandler+0x1f0>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d029      	beq.n	800108a <HAL_DMA_IRQHandler+0xae>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a65      	ldr	r2, [pc, #404]	; (80011d0 <HAL_DMA_IRQHandler+0x1f4>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d022      	beq.n	8001086 <HAL_DMA_IRQHandler+0xaa>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a63      	ldr	r2, [pc, #396]	; (80011d4 <HAL_DMA_IRQHandler+0x1f8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d01a      	beq.n	8001080 <HAL_DMA_IRQHandler+0xa4>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a62      	ldr	r2, [pc, #392]	; (80011d8 <HAL_DMA_IRQHandler+0x1fc>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d012      	beq.n	800107a <HAL_DMA_IRQHandler+0x9e>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a60      	ldr	r2, [pc, #384]	; (80011dc <HAL_DMA_IRQHandler+0x200>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d00a      	beq.n	8001074 <HAL_DMA_IRQHandler+0x98>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a5f      	ldr	r2, [pc, #380]	; (80011e0 <HAL_DMA_IRQHandler+0x204>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d102      	bne.n	800106e <HAL_DMA_IRQHandler+0x92>
 8001068:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800106c:	e00e      	b.n	800108c <HAL_DMA_IRQHandler+0xb0>
 800106e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001072:	e00b      	b.n	800108c <HAL_DMA_IRQHandler+0xb0>
 8001074:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001078:	e008      	b.n	800108c <HAL_DMA_IRQHandler+0xb0>
 800107a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800107e:	e005      	b.n	800108c <HAL_DMA_IRQHandler+0xb0>
 8001080:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001084:	e002      	b.n	800108c <HAL_DMA_IRQHandler+0xb0>
 8001086:	2340      	movs	r3, #64	; 0x40
 8001088:	e000      	b.n	800108c <HAL_DMA_IRQHandler+0xb0>
 800108a:	2304      	movs	r3, #4
 800108c:	4a55      	ldr	r2, [pc, #340]	; (80011e4 <HAL_DMA_IRQHandler+0x208>)
 800108e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 8094 	beq.w	80011c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80010a2:	e08e      	b.n	80011c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	2202      	movs	r2, #2
 80010aa:	409a      	lsls	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4013      	ands	r3, r2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d056      	beq.n	8001162 <HAL_DMA_IRQHandler+0x186>
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d051      	beq.n	8001162 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0320 	and.w	r3, r3, #32
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10b      	bne.n	80010e4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 020a 	bic.w	r2, r2, #10
 80010da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a38      	ldr	r2, [pc, #224]	; (80011cc <HAL_DMA_IRQHandler+0x1f0>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d029      	beq.n	8001142 <HAL_DMA_IRQHandler+0x166>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a37      	ldr	r2, [pc, #220]	; (80011d0 <HAL_DMA_IRQHandler+0x1f4>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d022      	beq.n	800113e <HAL_DMA_IRQHandler+0x162>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a35      	ldr	r2, [pc, #212]	; (80011d4 <HAL_DMA_IRQHandler+0x1f8>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d01a      	beq.n	8001138 <HAL_DMA_IRQHandler+0x15c>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a34      	ldr	r2, [pc, #208]	; (80011d8 <HAL_DMA_IRQHandler+0x1fc>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d012      	beq.n	8001132 <HAL_DMA_IRQHandler+0x156>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a32      	ldr	r2, [pc, #200]	; (80011dc <HAL_DMA_IRQHandler+0x200>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d00a      	beq.n	800112c <HAL_DMA_IRQHandler+0x150>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a31      	ldr	r2, [pc, #196]	; (80011e0 <HAL_DMA_IRQHandler+0x204>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d102      	bne.n	8001126 <HAL_DMA_IRQHandler+0x14a>
 8001120:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001124:	e00e      	b.n	8001144 <HAL_DMA_IRQHandler+0x168>
 8001126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800112a:	e00b      	b.n	8001144 <HAL_DMA_IRQHandler+0x168>
 800112c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001130:	e008      	b.n	8001144 <HAL_DMA_IRQHandler+0x168>
 8001132:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001136:	e005      	b.n	8001144 <HAL_DMA_IRQHandler+0x168>
 8001138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113c:	e002      	b.n	8001144 <HAL_DMA_IRQHandler+0x168>
 800113e:	2320      	movs	r3, #32
 8001140:	e000      	b.n	8001144 <HAL_DMA_IRQHandler+0x168>
 8001142:	2302      	movs	r3, #2
 8001144:	4a27      	ldr	r2, [pc, #156]	; (80011e4 <HAL_DMA_IRQHandler+0x208>)
 8001146:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	2b00      	cmp	r3, #0
 8001156:	d034      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001160:	e02f      	b.n	80011c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	2208      	movs	r2, #8
 8001168:	409a      	lsls	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4013      	ands	r3, r2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d028      	beq.n	80011c4 <HAL_DMA_IRQHandler+0x1e8>
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	f003 0308 	and.w	r3, r3, #8
 8001178:	2b00      	cmp	r3, #0
 800117a:	d023      	beq.n	80011c4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 020e 	bic.w	r2, r2, #14
 800118a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001194:	2101      	movs	r1, #1
 8001196:	fa01 f202 	lsl.w	r2, r1, r2
 800119a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d004      	beq.n	80011c4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	4798      	blx	r3
    }
  }
  return;
 80011c2:	bf00      	nop
 80011c4:	bf00      	nop
}
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40020008 	.word	0x40020008
 80011d0:	4002001c 	.word	0x4002001c
 80011d4:	40020030 	.word	0x40020030
 80011d8:	40020044 	.word	0x40020044
 80011dc:	40020058 	.word	0x40020058
 80011e0:	4002006c 	.word	0x4002006c
 80011e4:	40020000 	.word	0x40020000

080011e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011fe:	2101      	movs	r1, #1
 8001200:	fa01 f202 	lsl.w	r2, r1, r2
 8001204:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b10      	cmp	r3, #16
 8001214:	d108      	bne.n	8001228 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001226:	e007      	b.n	8001238 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	60da      	str	r2, [r3, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
	...

08001244 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001244:	b480      	push	{r7}
 8001246:	b08b      	sub	sp, #44	; 0x2c
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001256:	e127      	b.n	80014a8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001258:	2201      	movs	r2, #1
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	69fa      	ldr	r2, [r7, #28]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	429a      	cmp	r2, r3
 8001272:	f040 8116 	bne.w	80014a2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b12      	cmp	r3, #18
 800127c:	d034      	beq.n	80012e8 <HAL_GPIO_Init+0xa4>
 800127e:	2b12      	cmp	r3, #18
 8001280:	d80d      	bhi.n	800129e <HAL_GPIO_Init+0x5a>
 8001282:	2b02      	cmp	r3, #2
 8001284:	d02b      	beq.n	80012de <HAL_GPIO_Init+0x9a>
 8001286:	2b02      	cmp	r3, #2
 8001288:	d804      	bhi.n	8001294 <HAL_GPIO_Init+0x50>
 800128a:	2b00      	cmp	r3, #0
 800128c:	d031      	beq.n	80012f2 <HAL_GPIO_Init+0xae>
 800128e:	2b01      	cmp	r3, #1
 8001290:	d01c      	beq.n	80012cc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001292:	e048      	b.n	8001326 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001294:	2b03      	cmp	r3, #3
 8001296:	d043      	beq.n	8001320 <HAL_GPIO_Init+0xdc>
 8001298:	2b11      	cmp	r3, #17
 800129a:	d01b      	beq.n	80012d4 <HAL_GPIO_Init+0x90>
          break;
 800129c:	e043      	b.n	8001326 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800129e:	4a89      	ldr	r2, [pc, #548]	; (80014c4 <HAL_GPIO_Init+0x280>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d026      	beq.n	80012f2 <HAL_GPIO_Init+0xae>
 80012a4:	4a87      	ldr	r2, [pc, #540]	; (80014c4 <HAL_GPIO_Init+0x280>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d806      	bhi.n	80012b8 <HAL_GPIO_Init+0x74>
 80012aa:	4a87      	ldr	r2, [pc, #540]	; (80014c8 <HAL_GPIO_Init+0x284>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d020      	beq.n	80012f2 <HAL_GPIO_Init+0xae>
 80012b0:	4a86      	ldr	r2, [pc, #536]	; (80014cc <HAL_GPIO_Init+0x288>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d01d      	beq.n	80012f2 <HAL_GPIO_Init+0xae>
          break;
 80012b6:	e036      	b.n	8001326 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012b8:	4a85      	ldr	r2, [pc, #532]	; (80014d0 <HAL_GPIO_Init+0x28c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d019      	beq.n	80012f2 <HAL_GPIO_Init+0xae>
 80012be:	4a85      	ldr	r2, [pc, #532]	; (80014d4 <HAL_GPIO_Init+0x290>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d016      	beq.n	80012f2 <HAL_GPIO_Init+0xae>
 80012c4:	4a84      	ldr	r2, [pc, #528]	; (80014d8 <HAL_GPIO_Init+0x294>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d013      	beq.n	80012f2 <HAL_GPIO_Init+0xae>
          break;
 80012ca:	e02c      	b.n	8001326 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	623b      	str	r3, [r7, #32]
          break;
 80012d2:	e028      	b.n	8001326 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	3304      	adds	r3, #4
 80012da:	623b      	str	r3, [r7, #32]
          break;
 80012dc:	e023      	b.n	8001326 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	3308      	adds	r3, #8
 80012e4:	623b      	str	r3, [r7, #32]
          break;
 80012e6:	e01e      	b.n	8001326 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	330c      	adds	r3, #12
 80012ee:	623b      	str	r3, [r7, #32]
          break;
 80012f0:	e019      	b.n	8001326 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012fa:	2304      	movs	r3, #4
 80012fc:	623b      	str	r3, [r7, #32]
          break;
 80012fe:	e012      	b.n	8001326 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d105      	bne.n	8001314 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001308:	2308      	movs	r3, #8
 800130a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69fa      	ldr	r2, [r7, #28]
 8001310:	611a      	str	r2, [r3, #16]
          break;
 8001312:	e008      	b.n	8001326 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001314:	2308      	movs	r3, #8
 8001316:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	615a      	str	r2, [r3, #20]
          break;
 800131e:	e002      	b.n	8001326 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
          break;
 8001324:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2bff      	cmp	r3, #255	; 0xff
 800132a:	d801      	bhi.n	8001330 <HAL_GPIO_Init+0xec>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	e001      	b.n	8001334 <HAL_GPIO_Init+0xf0>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3304      	adds	r3, #4
 8001334:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	2bff      	cmp	r3, #255	; 0xff
 800133a:	d802      	bhi.n	8001342 <HAL_GPIO_Init+0xfe>
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	e002      	b.n	8001348 <HAL_GPIO_Init+0x104>
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	3b08      	subs	r3, #8
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	210f      	movs	r1, #15
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	401a      	ands	r2, r3
 800135a:	6a39      	ldr	r1, [r7, #32]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	431a      	orrs	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 8096 	beq.w	80014a2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001376:	4b59      	ldr	r3, [pc, #356]	; (80014dc <HAL_GPIO_Init+0x298>)
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	4a58      	ldr	r2, [pc, #352]	; (80014dc <HAL_GPIO_Init+0x298>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6193      	str	r3, [r2, #24]
 8001382:	4b56      	ldr	r3, [pc, #344]	; (80014dc <HAL_GPIO_Init+0x298>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800138e:	4a54      	ldr	r2, [pc, #336]	; (80014e0 <HAL_GPIO_Init+0x29c>)
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3302      	adds	r3, #2
 8001396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	4013      	ands	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4b      	ldr	r2, [pc, #300]	; (80014e4 <HAL_GPIO_Init+0x2a0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d013      	beq.n	80013e2 <HAL_GPIO_Init+0x19e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4a      	ldr	r2, [pc, #296]	; (80014e8 <HAL_GPIO_Init+0x2a4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00d      	beq.n	80013de <HAL_GPIO_Init+0x19a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a49      	ldr	r2, [pc, #292]	; (80014ec <HAL_GPIO_Init+0x2a8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d007      	beq.n	80013da <HAL_GPIO_Init+0x196>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a48      	ldr	r2, [pc, #288]	; (80014f0 <HAL_GPIO_Init+0x2ac>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_GPIO_Init+0x192>
 80013d2:	2303      	movs	r3, #3
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x1a0>
 80013d6:	2304      	movs	r3, #4
 80013d8:	e004      	b.n	80013e4 <HAL_GPIO_Init+0x1a0>
 80013da:	2302      	movs	r3, #2
 80013dc:	e002      	b.n	80013e4 <HAL_GPIO_Init+0x1a0>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <HAL_GPIO_Init+0x1a0>
 80013e2:	2300      	movs	r3, #0
 80013e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e6:	f002 0203 	and.w	r2, r2, #3
 80013ea:	0092      	lsls	r2, r2, #2
 80013ec:	4093      	lsls	r3, r2
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013f4:	493a      	ldr	r1, [pc, #232]	; (80014e0 <HAL_GPIO_Init+0x29c>)
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	089b      	lsrs	r3, r3, #2
 80013fa:	3302      	adds	r3, #2
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d006      	beq.n	800141c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800140e:	4b39      	ldr	r3, [pc, #228]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4938      	ldr	r1, [pc, #224]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	600b      	str	r3, [r1, #0]
 800141a:	e006      	b.n	800142a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800141c:	4b35      	ldr	r3, [pc, #212]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	43db      	mvns	r3, r3
 8001424:	4933      	ldr	r1, [pc, #204]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 8001426:	4013      	ands	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d006      	beq.n	8001444 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001436:	4b2f      	ldr	r3, [pc, #188]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	492e      	ldr	r1, [pc, #184]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	604b      	str	r3, [r1, #4]
 8001442:	e006      	b.n	8001452 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001444:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	43db      	mvns	r3, r3
 800144c:	4929      	ldr	r1, [pc, #164]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 800144e:	4013      	ands	r3, r2
 8001450:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800145e:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	4924      	ldr	r1, [pc, #144]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	608b      	str	r3, [r1, #8]
 800146a:	e006      	b.n	800147a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800146c:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	43db      	mvns	r3, r3
 8001474:	491f      	ldr	r1, [pc, #124]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 8001476:	4013      	ands	r3, r2
 8001478:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d006      	beq.n	8001494 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	491a      	ldr	r1, [pc, #104]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	60cb      	str	r3, [r1, #12]
 8001492:	e006      	b.n	80014a2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	43db      	mvns	r3, r3
 800149c:	4915      	ldr	r1, [pc, #84]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 800149e:	4013      	ands	r3, r2
 80014a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	3301      	adds	r3, #1
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	fa22 f303 	lsr.w	r3, r2, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f47f aed0 	bne.w	8001258 <HAL_GPIO_Init+0x14>
  }
}
 80014b8:	bf00      	nop
 80014ba:	372c      	adds	r7, #44	; 0x2c
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	10210000 	.word	0x10210000
 80014c8:	10110000 	.word	0x10110000
 80014cc:	10120000 	.word	0x10120000
 80014d0:	10310000 	.word	0x10310000
 80014d4:	10320000 	.word	0x10320000
 80014d8:	10220000 	.word	0x10220000
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40010000 	.word	0x40010000
 80014e4:	40010800 	.word	0x40010800
 80014e8:	40010c00 	.word	0x40010c00
 80014ec:	40011000 	.word	0x40011000
 80014f0:	40011400 	.word	0x40011400
 80014f4:	40010400 	.word	0x40010400

080014f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
 8001504:	4613      	mov	r3, r2
 8001506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001508:	787b      	ldrb	r3, [r7, #1]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150e:	887a      	ldrh	r2, [r7, #2]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001514:	e003      	b.n	800151e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001516:	887b      	ldrh	r3, [r7, #2]
 8001518:	041a      	lsls	r2, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	611a      	str	r2, [r3, #16]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	887b      	ldrh	r3, [r7, #2]
 800153a:	4013      	ands	r3, r2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001540:	887a      	ldrh	r2, [r7, #2]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001546:	e002      	b.n	800154e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001548:	887a      	ldrh	r2, [r7, #2]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	611a      	str	r2, [r3, #16]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001564:	695a      	ldr	r2, [r3, #20]
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	4013      	ands	r3, r2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d006      	beq.n	800157c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	4618      	mov	r0, r3
 8001578:	f000 f806 	bl	8001588 <HAL_GPIO_EXTI_Callback>
  }
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40010400 	.word	0x40010400

08001588 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e26c      	b.n	8001a88 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 8087 	beq.w	80016ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015bc:	4b92      	ldr	r3, [pc, #584]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d00c      	beq.n	80015e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015c8:	4b8f      	ldr	r3, [pc, #572]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d112      	bne.n	80015fa <HAL_RCC_OscConfig+0x5e>
 80015d4:	4b8c      	ldr	r3, [pc, #560]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e0:	d10b      	bne.n	80015fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e2:	4b89      	ldr	r3, [pc, #548]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d06c      	beq.n	80016c8 <HAL_RCC_OscConfig+0x12c>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d168      	bne.n	80016c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e246      	b.n	8001a88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001602:	d106      	bne.n	8001612 <HAL_RCC_OscConfig+0x76>
 8001604:	4b80      	ldr	r3, [pc, #512]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a7f      	ldr	r2, [pc, #508]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 800160a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	e02e      	b.n	8001670 <HAL_RCC_OscConfig+0xd4>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10c      	bne.n	8001634 <HAL_RCC_OscConfig+0x98>
 800161a:	4b7b      	ldr	r3, [pc, #492]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a7a      	ldr	r2, [pc, #488]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	4b78      	ldr	r3, [pc, #480]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a77      	ldr	r2, [pc, #476]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 800162c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e01d      	b.n	8001670 <HAL_RCC_OscConfig+0xd4>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0xbc>
 800163e:	4b72      	ldr	r3, [pc, #456]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a71      	ldr	r2, [pc, #452]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	4b6f      	ldr	r3, [pc, #444]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a6e      	ldr	r2, [pc, #440]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0xd4>
 8001658:	4b6b      	ldr	r3, [pc, #428]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a6a      	ldr	r2, [pc, #424]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 800165e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b68      	ldr	r3, [pc, #416]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a67      	ldr	r2, [pc, #412]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 800166a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d013      	beq.n	80016a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fa74 	bl	8000b64 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001680:	f7ff fa70 	bl	8000b64 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	; 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e1fa      	b.n	8001a88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	4b5d      	ldr	r3, [pc, #372]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0xe4>
 800169e:	e014      	b.n	80016ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fa60 	bl	8000b64 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a8:	f7ff fa5c 	bl	8000b64 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	; 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e1e6      	b.n	8001a88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ba:	4b53      	ldr	r3, [pc, #332]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x10c>
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d063      	beq.n	800179e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016d6:	4b4c      	ldr	r3, [pc, #304]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00b      	beq.n	80016fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016e2:	4b49      	ldr	r3, [pc, #292]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d11c      	bne.n	8001728 <HAL_RCC_OscConfig+0x18c>
 80016ee:	4b46      	ldr	r3, [pc, #280]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d116      	bne.n	8001728 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fa:	4b43      	ldr	r3, [pc, #268]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d005      	beq.n	8001712 <HAL_RCC_OscConfig+0x176>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d001      	beq.n	8001712 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e1ba      	b.n	8001a88 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001712:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	4939      	ldr	r1, [pc, #228]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001722:	4313      	orrs	r3, r2
 8001724:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001726:	e03a      	b.n	800179e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d020      	beq.n	8001772 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001730:	4b36      	ldr	r3, [pc, #216]	; (800180c <HAL_RCC_OscConfig+0x270>)
 8001732:	2201      	movs	r2, #1
 8001734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001736:	f7ff fa15 	bl	8000b64 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173e:	f7ff fa11 	bl	8000b64 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e19b      	b.n	8001a88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001750:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175c:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	4927      	ldr	r1, [pc, #156]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 800176c:	4313      	orrs	r3, r2
 800176e:	600b      	str	r3, [r1, #0]
 8001770:	e015      	b.n	800179e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001772:	4b26      	ldr	r3, [pc, #152]	; (800180c <HAL_RCC_OscConfig+0x270>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff f9f4 	bl	8000b64 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001780:	f7ff f9f0 	bl	8000b64 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e17a      	b.n	8001a88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001792:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d03a      	beq.n	8001820 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d019      	beq.n	80017e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b8:	f7ff f9d4 	bl	8000b64 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c0:	f7ff f9d0 	bl	8000b64 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e15a      	b.n	8001a88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017de:	2001      	movs	r0, #1
 80017e0:	f000 fb0a 	bl	8001df8 <RCC_Delay>
 80017e4:	e01c      	b.n	8001820 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ec:	f7ff f9ba 	bl	8000b64 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f2:	e00f      	b.n	8001814 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f4:	f7ff f9b6 	bl	8000b64 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d908      	bls.n	8001814 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e140      	b.n	8001a88 <HAL_RCC_OscConfig+0x4ec>
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000
 800180c:	42420000 	.word	0x42420000
 8001810:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001814:	4b9e      	ldr	r3, [pc, #632]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1e9      	bne.n	80017f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 80a6 	beq.w	800197a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001832:	4b97      	ldr	r3, [pc, #604]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10d      	bne.n	800185a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	4b94      	ldr	r3, [pc, #592]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	4a93      	ldr	r2, [pc, #588]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 8001844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001848:	61d3      	str	r3, [r2, #28]
 800184a:	4b91      	ldr	r3, [pc, #580]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001856:	2301      	movs	r3, #1
 8001858:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185a:	4b8e      	ldr	r3, [pc, #568]	; (8001a94 <HAL_RCC_OscConfig+0x4f8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d118      	bne.n	8001898 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001866:	4b8b      	ldr	r3, [pc, #556]	; (8001a94 <HAL_RCC_OscConfig+0x4f8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a8a      	ldr	r2, [pc, #552]	; (8001a94 <HAL_RCC_OscConfig+0x4f8>)
 800186c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001872:	f7ff f977 	bl	8000b64 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800187a:	f7ff f973 	bl	8000b64 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b64      	cmp	r3, #100	; 0x64
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e0fd      	b.n	8001a88 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188c:	4b81      	ldr	r3, [pc, #516]	; (8001a94 <HAL_RCC_OscConfig+0x4f8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d106      	bne.n	80018ae <HAL_RCC_OscConfig+0x312>
 80018a0:	4b7b      	ldr	r3, [pc, #492]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4a7a      	ldr	r2, [pc, #488]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6213      	str	r3, [r2, #32]
 80018ac:	e02d      	b.n	800190a <HAL_RCC_OscConfig+0x36e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x334>
 80018b6:	4b76      	ldr	r3, [pc, #472]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	4a75      	ldr	r2, [pc, #468]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	6213      	str	r3, [r2, #32]
 80018c2:	4b73      	ldr	r3, [pc, #460]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4a72      	ldr	r2, [pc, #456]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 80018c8:	f023 0304 	bic.w	r3, r3, #4
 80018cc:	6213      	str	r3, [r2, #32]
 80018ce:	e01c      	b.n	800190a <HAL_RCC_OscConfig+0x36e>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	2b05      	cmp	r3, #5
 80018d6:	d10c      	bne.n	80018f2 <HAL_RCC_OscConfig+0x356>
 80018d8:	4b6d      	ldr	r3, [pc, #436]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	4a6c      	ldr	r2, [pc, #432]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 80018de:	f043 0304 	orr.w	r3, r3, #4
 80018e2:	6213      	str	r3, [r2, #32]
 80018e4:	4b6a      	ldr	r3, [pc, #424]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4a69      	ldr	r2, [pc, #420]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6213      	str	r3, [r2, #32]
 80018f0:	e00b      	b.n	800190a <HAL_RCC_OscConfig+0x36e>
 80018f2:	4b67      	ldr	r3, [pc, #412]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	4a66      	ldr	r2, [pc, #408]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 80018f8:	f023 0301 	bic.w	r3, r3, #1
 80018fc:	6213      	str	r3, [r2, #32]
 80018fe:	4b64      	ldr	r3, [pc, #400]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4a63      	ldr	r2, [pc, #396]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 8001904:	f023 0304 	bic.w	r3, r3, #4
 8001908:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d015      	beq.n	800193e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001912:	f7ff f927 	bl	8000b64 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001918:	e00a      	b.n	8001930 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191a:	f7ff f923 	bl	8000b64 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	f241 3288 	movw	r2, #5000	; 0x1388
 8001928:	4293      	cmp	r3, r2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e0ab      	b.n	8001a88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001930:	4b57      	ldr	r3, [pc, #348]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0ee      	beq.n	800191a <HAL_RCC_OscConfig+0x37e>
 800193c:	e014      	b.n	8001968 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193e:	f7ff f911 	bl	8000b64 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001944:	e00a      	b.n	800195c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001946:	f7ff f90d 	bl	8000b64 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	f241 3288 	movw	r2, #5000	; 0x1388
 8001954:	4293      	cmp	r3, r2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e095      	b.n	8001a88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800195c:	4b4c      	ldr	r3, [pc, #304]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1ee      	bne.n	8001946 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001968:	7dfb      	ldrb	r3, [r7, #23]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d105      	bne.n	800197a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800196e:	4b48      	ldr	r3, [pc, #288]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	4a47      	ldr	r2, [pc, #284]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 8001974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001978:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8081 	beq.w	8001a86 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001984:	4b42      	ldr	r3, [pc, #264]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 030c 	and.w	r3, r3, #12
 800198c:	2b08      	cmp	r3, #8
 800198e:	d061      	beq.n	8001a54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d146      	bne.n	8001a26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001998:	4b3f      	ldr	r3, [pc, #252]	; (8001a98 <HAL_RCC_OscConfig+0x4fc>)
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff f8e1 	bl	8000b64 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a6:	f7ff f8dd 	bl	8000b64 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e067      	b.n	8001a88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b8:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1f0      	bne.n	80019a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019cc:	d108      	bne.n	80019e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ce:	4b30      	ldr	r3, [pc, #192]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	492d      	ldr	r1, [pc, #180]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e0:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a19      	ldr	r1, [r3, #32]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	430b      	orrs	r3, r1
 80019f2:	4927      	ldr	r1, [pc, #156]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f8:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <HAL_RCC_OscConfig+0x4fc>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff f8b1 	bl	8000b64 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a06:	f7ff f8ad 	bl	8000b64 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e037      	b.n	8001a88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a18:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x46a>
 8001a24:	e02f      	b.n	8001a86 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a26:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <HAL_RCC_OscConfig+0x4fc>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff f89a 	bl	8000b64 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a34:	f7ff f896 	bl	8000b64 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e020      	b.n	8001a88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x498>
 8001a52:	e018      	b.n	8001a86 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e013      	b.n	8001a88 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_RCC_OscConfig+0x4f4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d106      	bne.n	8001a82 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d001      	beq.n	8001a86 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40007000 	.word	0x40007000
 8001a98:	42420060 	.word	0x42420060

08001a9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0d0      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b6a      	ldr	r3, [pc, #424]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d910      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b67      	ldr	r3, [pc, #412]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 0207 	bic.w	r2, r3, #7
 8001ac6:	4965      	ldr	r1, [pc, #404]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b63      	ldr	r3, [pc, #396]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0b8      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d020      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af8:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4a58      	ldr	r2, [pc, #352]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b10:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4a52      	ldr	r2, [pc, #328]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b1c:	4b50      	ldr	r3, [pc, #320]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	494d      	ldr	r1, [pc, #308]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d040      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d115      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e07f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5a:	4b41      	ldr	r3, [pc, #260]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e073      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e06b      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7a:	4b39      	ldr	r3, [pc, #228]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f023 0203 	bic.w	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4936      	ldr	r1, [pc, #216]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b8c:	f7fe ffea 	bl	8000b64 <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b94:	f7fe ffe6 	bl	8000b64 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e053      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 020c 	and.w	r2, r3, #12
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d1eb      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d210      	bcs.n	8001bec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 0207 	bic.w	r2, r3, #7
 8001bd2:	4922      	ldr	r1, [pc, #136]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e032      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4916      	ldr	r1, [pc, #88]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	490e      	ldr	r1, [pc, #56]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c2a:	f000 f821 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001c2e:	4601      	mov	r1, r0
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3c:	5cd3      	ldrb	r3, [r2, r3]
 8001c3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001c42:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x1cc>)
 8001c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_RCC_ClockConfig+0x1d0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fe10 	bl	8000870 <HAL_InitTick>

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	080035d8 	.word	0x080035d8
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000004 	.word	0x20000004

08001c70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	b490      	push	{r4, r7}
 8001c72:	b08a      	sub	sp, #40	; 0x28
 8001c74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c76:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c78:	1d3c      	adds	r4, r7, #4
 8001c7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c80:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c9a:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d002      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d003      	beq.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x46>
 8001cae:	e02d      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cb0:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cb2:	623b      	str	r3, [r7, #32]
      break;
 8001cb4:	e02d      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	0c9b      	lsrs	r3, r3, #18
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cc8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	0c5b      	lsrs	r3, r3, #17
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ce8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	4a0f      	ldr	r2, [pc, #60]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cee:	fb02 f203 	mul.w	r2, r2, r3
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfa:	e004      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	4a0c      	ldr	r2, [pc, #48]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d00:	fb02 f303 	mul.w	r3, r2, r3
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	623b      	str	r3, [r7, #32]
      break;
 8001d0a:	e002      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d0e:	623b      	str	r3, [r7, #32]
      break;
 8001d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d12:	6a3b      	ldr	r3, [r7, #32]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3728      	adds	r7, #40	; 0x28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc90      	pop	{r4, r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	080035c4 	.word	0x080035c4
 8001d24:	080035d4 	.word	0x080035d4
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	007a1200 	.word	0x007a1200
 8001d30:	003d0900 	.word	0x003d0900

08001d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d38:	4b02      	ldr	r3, [pc, #8]	; (8001d44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	20000000 	.word	0x20000000

08001d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d4c:	f7ff fff2 	bl	8001d34 <HAL_RCC_GetHCLKFreq>
 8001d50:	4601      	mov	r1, r0
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	4a03      	ldr	r2, [pc, #12]	; (8001d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d5e:	5cd3      	ldrb	r3, [r2, r3]
 8001d60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	080035e8 	.word	0x080035e8

08001d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d74:	f7ff ffde 	bl	8001d34 <HAL_RCC_GetHCLKFreq>
 8001d78:	4601      	mov	r1, r0
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	0adb      	lsrs	r3, r3, #11
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	4a03      	ldr	r2, [pc, #12]	; (8001d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d86:	5cd3      	ldrb	r3, [r2, r3]
 8001d88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	080035e8 	.word	0x080035e8

08001d98 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	220f      	movs	r2, #15
 8001da6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_RCC_GetClockConfig+0x58>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0203 	and.w	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001db4:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_RCC_GetClockConfig+0x58>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_RCC_GetClockConfig+0x58>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HAL_RCC_GetClockConfig+0x58>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	08db      	lsrs	r3, r3, #3
 8001dd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0207 	and.w	r2, r3, #7
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40022000 	.word	0x40022000

08001df8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e00:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <RCC_Delay+0x34>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <RCC_Delay+0x38>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	0a5b      	lsrs	r3, r3, #9
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	fb02 f303 	mul.w	r3, r2, r3
 8001e12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e14:	bf00      	nop
  }
  while (Delay --);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1e5a      	subs	r2, r3, #1
 8001e1a:	60fa      	str	r2, [r7, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f9      	bne.n	8001e14 <RCC_Delay+0x1c>
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	10624dd3 	.word	0x10624dd3

08001e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e01d      	b.n	8001e82 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f815 	bl	8001e8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3304      	adds	r3, #4
 8001e70:	4619      	mov	r1, r3
 8001e72:	4610      	mov	r0, r2
 8001e74:	f000 f962 	bl	800213c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d007      	beq.n	8001ed6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0201 	orr.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d122      	bne.n	8001f3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d11b      	bne.n	8001f3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f06f 0202 	mvn.w	r2, #2
 8001f0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f8ed 	bl	8002104 <HAL_TIM_IC_CaptureCallback>
 8001f2a:	e005      	b.n	8001f38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f8e0 	bl	80020f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8ef 	bl	8002116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d122      	bne.n	8001f92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d11b      	bne.n	8001f92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f06f 0204 	mvn.w	r2, #4
 8001f62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f8c3 	bl	8002104 <HAL_TIM_IC_CaptureCallback>
 8001f7e:	e005      	b.n	8001f8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f8b6 	bl	80020f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8c5 	bl	8002116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d122      	bne.n	8001fe6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d11b      	bne.n	8001fe6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f06f 0208 	mvn.w	r2, #8
 8001fb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2204      	movs	r2, #4
 8001fbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f899 	bl	8002104 <HAL_TIM_IC_CaptureCallback>
 8001fd2:	e005      	b.n	8001fe0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f88c 	bl	80020f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f89b 	bl	8002116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b10      	cmp	r3, #16
 8001ff2:	d122      	bne.n	800203a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b10      	cmp	r3, #16
 8002000:	d11b      	bne.n	800203a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f06f 0210 	mvn.w	r2, #16
 800200a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2208      	movs	r2, #8
 8002010:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f86f 	bl	8002104 <HAL_TIM_IC_CaptureCallback>
 8002026:	e005      	b.n	8002034 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f862 	bl	80020f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f871 	bl	8002116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	d10e      	bne.n	8002066 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b01      	cmp	r3, #1
 8002054:	d107      	bne.n	8002066 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f06f 0201 	mvn.w	r2, #1
 800205e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7fe fab9 	bl	80005d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002070:	2b80      	cmp	r3, #128	; 0x80
 8002072:	d10e      	bne.n	8002092 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207e:	2b80      	cmp	r3, #128	; 0x80
 8002080:	d107      	bne.n	8002092 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800208a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f8c0 	bl	8002212 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209c:	2b40      	cmp	r3, #64	; 0x40
 800209e:	d10e      	bne.n	80020be <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020aa:	2b40      	cmp	r3, #64	; 0x40
 80020ac:	d107      	bne.n	80020be <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f835 	bl	8002128 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d10e      	bne.n	80020ea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	d107      	bne.n	80020ea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f06f 0220 	mvn.w	r2, #32
 80020e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f88b 	bl	8002200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
	...

0800213c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a29      	ldr	r2, [pc, #164]	; (80021f4 <TIM_Base_SetConfig+0xb8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d00b      	beq.n	800216c <TIM_Base_SetConfig+0x30>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800215a:	d007      	beq.n	800216c <TIM_Base_SetConfig+0x30>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a26      	ldr	r2, [pc, #152]	; (80021f8 <TIM_Base_SetConfig+0xbc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d003      	beq.n	800216c <TIM_Base_SetConfig+0x30>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a25      	ldr	r2, [pc, #148]	; (80021fc <TIM_Base_SetConfig+0xc0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d108      	bne.n	800217e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a1c      	ldr	r2, [pc, #112]	; (80021f4 <TIM_Base_SetConfig+0xb8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00b      	beq.n	800219e <TIM_Base_SetConfig+0x62>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218c:	d007      	beq.n	800219e <TIM_Base_SetConfig+0x62>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a19      	ldr	r2, [pc, #100]	; (80021f8 <TIM_Base_SetConfig+0xbc>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d003      	beq.n	800219e <TIM_Base_SetConfig+0x62>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a18      	ldr	r2, [pc, #96]	; (80021fc <TIM_Base_SetConfig+0xc0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d108      	bne.n	80021b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a07      	ldr	r2, [pc, #28]	; (80021f4 <TIM_Base_SetConfig+0xb8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d103      	bne.n	80021e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	615a      	str	r2, [r3, #20]
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	40012c00 	.word	0x40012c00
 80021f8:	40000400 	.word	0x40000400
 80021fc:	40000800 	.word	0x40000800

08002200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr

08002212 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e03f      	b.n	80022b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d106      	bne.n	8002250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7fe fa26 	bl	800069c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2224      	movs	r2, #36	; 0x24
 8002254:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002266:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 fc63 	bl	8002b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800227c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695a      	ldr	r2, [r3, #20]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800228c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800229c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b088      	sub	sp, #32
 80022c2:	af02      	add	r7, sp, #8
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	4613      	mov	r3, r2
 80022cc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b20      	cmp	r3, #32
 80022dc:	f040 8083 	bne.w	80023e6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_UART_Transmit+0x2e>
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e07b      	b.n	80023e8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_UART_Transmit+0x40>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e074      	b.n	80023e8 <HAL_UART_Transmit+0x12a>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2221      	movs	r2, #33	; 0x21
 8002310:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002314:	f7fe fc26 	bl	8000b64 <HAL_GetTick>
 8002318:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	88fa      	ldrh	r2, [r7, #6]
 800231e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	88fa      	ldrh	r2, [r7, #6]
 8002324:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002326:	e042      	b.n	80023ae <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800233e:	d122      	bne.n	8002386 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2200      	movs	r2, #0
 8002348:	2180      	movs	r1, #128	; 0x80
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 fa73 	bl	8002836 <UART_WaitOnFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e046      	b.n	80023e8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800236c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	3302      	adds	r3, #2
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	e017      	b.n	80023ae <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	3301      	adds	r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	e013      	b.n	80023ae <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2200      	movs	r2, #0
 800238e:	2180      	movs	r1, #128	; 0x80
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 fa50 	bl	8002836 <UART_WaitOnFlagUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e023      	b.n	80023e8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	60ba      	str	r2, [r7, #8]
 80023a6:	781a      	ldrb	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1b7      	bne.n	8002328 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2200      	movs	r2, #0
 80023c0:	2140      	movs	r1, #64	; 0x40
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 fa37 	bl	8002836 <UART_WaitOnFlagUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e00a      	b.n	80023e8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2220      	movs	r2, #32
 80023d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e000      	b.n	80023e8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80023e6:	2302      	movs	r3, #2
  }
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	4613      	mov	r3, r2
 80023fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b20      	cmp	r3, #32
 8002408:	d166      	bne.n	80024d8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <HAL_UART_Receive_DMA+0x26>
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e05f      	b.n	80024da <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_UART_Receive_DMA+0x38>
 8002424:	2302      	movs	r3, #2
 8002426:	e058      	b.n	80024da <HAL_UART_Receive_DMA+0xea>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	88fa      	ldrh	r2, [r7, #6]
 800243a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2222      	movs	r2, #34	; 0x22
 8002446:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244e:	4a25      	ldr	r2, [pc, #148]	; (80024e4 <HAL_UART_Receive_DMA+0xf4>)
 8002450:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002456:	4a24      	ldr	r2, [pc, #144]	; (80024e8 <HAL_UART_Receive_DMA+0xf8>)
 8002458:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245e:	4a23      	ldr	r2, [pc, #140]	; (80024ec <HAL_UART_Receive_DMA+0xfc>)
 8002460:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002466:	2200      	movs	r2, #0
 8002468:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800246a:	f107 0308 	add.w	r3, r7, #8
 800246e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	3304      	adds	r3, #4
 800247a:	4619      	mov	r1, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	f7fe fcd5 	bl	8000e30 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024b2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695a      	ldr	r2, [r3, #20]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0201 	orr.w	r2, r2, #1
 80024c2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024d2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e000      	b.n	80024da <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80024d8:	2302      	movs	r3, #2
  }
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	0800271f 	.word	0x0800271f
 80024e8:	08002787 	.word	0x08002787
 80024ec:	080027a3 	.word	0x080027a3

080024f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002510:	2300      	movs	r3, #0
 8002512:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10d      	bne.n	8002542 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_UART_IRQHandler+0x52>
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 fa78 	bl	8002a30 <UART_Receive_IT>
      return;
 8002540:	e0cc      	b.n	80026dc <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80ab 	beq.w	80026a0 <HAL_UART_IRQHandler+0x1b0>
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d105      	bne.n	8002560 <HAL_UART_IRQHandler+0x70>
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 80a0 	beq.w	80026a0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <HAL_UART_IRQHandler+0x90>
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002578:	f043 0201 	orr.w	r2, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <HAL_UART_IRQHandler+0xb0>
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002598:	f043 0202 	orr.w	r2, r3, #2
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_UART_IRQHandler+0xd0>
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b8:	f043 0204 	orr.w	r2, r3, #4
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_UART_IRQHandler+0xf0>
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	f043 0208 	orr.w	r2, r3, #8
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d078      	beq.n	80026da <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <HAL_UART_IRQHandler+0x112>
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 fa17 	bl	8002a30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf14      	ite	ne
 8002610:	2301      	movne	r3, #1
 8002612:	2300      	moveq	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d102      	bne.n	800262a <HAL_UART_IRQHandler+0x13a>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d031      	beq.n	800268e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f962 	bl	80028f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d023      	beq.n	8002686 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800264c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	2b00      	cmp	r3, #0
 8002654:	d013      	beq.n	800267e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265a:	4a22      	ldr	r2, [pc, #136]	; (80026e4 <HAL_UART_IRQHandler+0x1f4>)
 800265c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fc44 	bl	8000ef0 <HAL_DMA_Abort_IT>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d016      	beq.n	800269c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002678:	4610      	mov	r0, r2
 800267a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800267c:	e00e      	b.n	800269c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f844 	bl	800270c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002684:	e00a      	b.n	800269c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f840 	bl	800270c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800268c:	e006      	b.n	800269c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f83c 	bl	800270c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800269a:	e01e      	b.n	80026da <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800269c:	bf00      	nop
    return;
 800269e:	e01c      	b.n	80026da <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_UART_IRQHandler+0x1cc>
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f94e 	bl	8002956 <UART_Transmit_IT>
    return;
 80026ba:	e00f      	b.n	80026dc <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_UART_IRQHandler+0x1ec>
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f995 	bl	8002a00 <UART_EndTransmit_IT>
    return;
 80026d6:	bf00      	nop
 80026d8:	e000      	b.n	80026dc <HAL_UART_IRQHandler+0x1ec>
    return;
 80026da:	bf00      	nop
  }
}
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	0800292f 	.word	0x0800292f

080026e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr

0800271e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d11e      	bne.n	8002778 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800274e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695a      	ldr	r2, [r3, #20]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800276e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7fd ff23 	bl	80005c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f7ff ffb0 	bl	80026fa <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027be:	2b00      	cmp	r3, #0
 80027c0:	bf14      	ite	ne
 80027c2:	2301      	movne	r3, #1
 80027c4:	2300      	moveq	r3, #0
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b21      	cmp	r3, #33	; 0x21
 80027d4:	d108      	bne.n	80027e8 <UART_DMAError+0x46>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2200      	movs	r2, #0
 80027e0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80027e2:	68b8      	ldr	r0, [r7, #8]
 80027e4:	f000 f871 	bl	80028ca <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	bf14      	ite	ne
 80027f6:	2301      	movne	r3, #1
 80027f8:	2300      	moveq	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b22      	cmp	r3, #34	; 0x22
 8002808:	d108      	bne.n	800281c <UART_DMAError+0x7a>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2200      	movs	r2, #0
 8002814:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002816:	68b8      	ldr	r0, [r7, #8]
 8002818:	f000 f86c 	bl	80028f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002820:	f043 0210 	orr.w	r2, r3, #16
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002828:	68b8      	ldr	r0, [r7, #8]
 800282a:	f7ff ff6f 	bl	800270c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	603b      	str	r3, [r7, #0]
 8002842:	4613      	mov	r3, r2
 8002844:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002846:	e02c      	b.n	80028a2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284e:	d028      	beq.n	80028a2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <UART_WaitOnFlagUntilTimeout+0x30>
 8002856:	f7fe f985 	bl	8000b64 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	429a      	cmp	r2, r3
 8002864:	d21d      	bcs.n	80028a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002874:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0201 	bic.w	r2, r2, #1
 8002884:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e00f      	b.n	80028c2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4013      	ands	r3, r2
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	bf0c      	ite	eq
 80028b2:	2301      	moveq	r3, #1
 80028b4:	2300      	movne	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d0c3      	beq.n	8002848 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80028e0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800290a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0201 	bic.w	r2, r2, #1
 800291a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f7ff fedf 	bl	800270c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b21      	cmp	r3, #33	; 0x21
 8002968:	d144      	bne.n	80029f4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002972:	d11a      	bne.n	80029aa <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002988:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d105      	bne.n	800299e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	1c9a      	adds	r2, r3, #2
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	621a      	str	r2, [r3, #32]
 800299c:	e00e      	b.n	80029bc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	621a      	str	r2, [r3, #32]
 80029a8:	e008      	b.n	80029bc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	1c59      	adds	r1, r3, #1
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6211      	str	r1, [r2, #32]
 80029b4:	781a      	ldrb	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	4619      	mov	r1, r3
 80029ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10f      	bne.n	80029f0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e000      	b.n	80029f6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff fe61 	bl	80026e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b22      	cmp	r3, #34	; 0x22
 8002a42:	d171      	bne.n	8002b28 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4c:	d123      	bne.n	8002a96 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a52:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10e      	bne.n	8002a7a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a72:	1c9a      	adds	r2, r3, #2
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	629a      	str	r2, [r3, #40]	; 0x28
 8002a78:	e029      	b.n	8002ace <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
 8002a94:	e01b      	b.n	8002ace <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10a      	bne.n	8002ab4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6858      	ldr	r0, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	1c59      	adds	r1, r3, #1
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6291      	str	r1, [r2, #40]	; 0x28
 8002aae:	b2c2      	uxtb	r2, r0
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	e00c      	b.n	8002ace <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	1c58      	adds	r0, r3, #1
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	6288      	str	r0, [r1, #40]	; 0x28
 8002ac6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	4619      	mov	r1, r3
 8002adc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d120      	bne.n	8002b24 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0220 	bic.w	r2, r2, #32
 8002af0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695a      	ldr	r2, [r3, #20]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fd fd52 	bl	80005c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e002      	b.n	8002b2a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	e000      	b.n	8002b2a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002b28:	2302      	movs	r3, #2
  }
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b6e:	f023 030c 	bic.w	r3, r3, #12
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	68f9      	ldr	r1, [r7, #12]
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a52      	ldr	r2, [pc, #328]	; (8002ce0 <UART_SetConfig+0x1ac>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d14e      	bne.n	8002c3a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b9c:	f7ff f8e8 	bl	8001d70 <HAL_RCC_GetPCLK2Freq>
 8002ba0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	009a      	lsls	r2, r3, #2
 8002bac:	441a      	add	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb8:	4a4a      	ldr	r2, [pc, #296]	; (8002ce4 <UART_SetConfig+0x1b0>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	0119      	lsls	r1, r3, #4
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	009a      	lsls	r2, r3, #2
 8002bcc:	441a      	add	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bd8:	4b42      	ldr	r3, [pc, #264]	; (8002ce4 <UART_SetConfig+0x1b0>)
 8002bda:	fba3 0302 	umull	r0, r3, r3, r2
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	2064      	movs	r0, #100	; 0x64
 8002be2:	fb00 f303 	mul.w	r3, r0, r3
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	3332      	adds	r3, #50	; 0x32
 8002bec:	4a3d      	ldr	r2, [pc, #244]	; (8002ce4 <UART_SetConfig+0x1b0>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf8:	4419      	add	r1, r3
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	009a      	lsls	r2, r3, #2
 8002c04:	441a      	add	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c10:	4b34      	ldr	r3, [pc, #208]	; (8002ce4 <UART_SetConfig+0x1b0>)
 8002c12:	fba3 0302 	umull	r0, r3, r3, r2
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	2064      	movs	r0, #100	; 0x64
 8002c1a:	fb00 f303 	mul.w	r3, r0, r3
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	3332      	adds	r3, #50	; 0x32
 8002c24:	4a2f      	ldr	r2, [pc, #188]	; (8002ce4 <UART_SetConfig+0x1b0>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	f003 020f 	and.w	r2, r3, #15
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	440a      	add	r2, r1
 8002c36:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002c38:	e04d      	b.n	8002cd6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c3a:	f7ff f885 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 8002c3e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	009a      	lsls	r2, r3, #2
 8002c4a:	441a      	add	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	4a23      	ldr	r2, [pc, #140]	; (8002ce4 <UART_SetConfig+0x1b0>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	095b      	lsrs	r3, r3, #5
 8002c5e:	0119      	lsls	r1, r3, #4
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	009a      	lsls	r2, r3, #2
 8002c6a:	441a      	add	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c76:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <UART_SetConfig+0x1b0>)
 8002c78:	fba3 0302 	umull	r0, r3, r3, r2
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	2064      	movs	r0, #100	; 0x64
 8002c80:	fb00 f303 	mul.w	r3, r0, r3
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	3332      	adds	r3, #50	; 0x32
 8002c8a:	4a16      	ldr	r2, [pc, #88]	; (8002ce4 <UART_SetConfig+0x1b0>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c96:	4419      	add	r1, r3
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009a      	lsls	r2, r3, #2
 8002ca2:	441a      	add	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cae:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <UART_SetConfig+0x1b0>)
 8002cb0:	fba3 0302 	umull	r0, r3, r3, r2
 8002cb4:	095b      	lsrs	r3, r3, #5
 8002cb6:	2064      	movs	r0, #100	; 0x64
 8002cb8:	fb00 f303 	mul.w	r3, r0, r3
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	3332      	adds	r3, #50	; 0x32
 8002cc2:	4a08      	ldr	r2, [pc, #32]	; (8002ce4 <UART_SetConfig+0x1b0>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	095b      	lsrs	r3, r3, #5
 8002cca:	f003 020f 	and.w	r2, r3, #15
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	440a      	add	r2, r1
 8002cd4:	609a      	str	r2, [r3, #8]
}
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40013800 	.word	0x40013800
 8002ce4:	51eb851f 	.word	0x51eb851f

08002ce8 <__errno>:
 8002ce8:	4b01      	ldr	r3, [pc, #4]	; (8002cf0 <__errno+0x8>)
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	2000000c 	.word	0x2000000c

08002cf4 <__libc_init_array>:
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	2500      	movs	r5, #0
 8002cf8:	4e0c      	ldr	r6, [pc, #48]	; (8002d2c <__libc_init_array+0x38>)
 8002cfa:	4c0d      	ldr	r4, [pc, #52]	; (8002d30 <__libc_init_array+0x3c>)
 8002cfc:	1ba4      	subs	r4, r4, r6
 8002cfe:	10a4      	asrs	r4, r4, #2
 8002d00:	42a5      	cmp	r5, r4
 8002d02:	d109      	bne.n	8002d18 <__libc_init_array+0x24>
 8002d04:	f000 fc34 	bl	8003570 <_init>
 8002d08:	2500      	movs	r5, #0
 8002d0a:	4e0a      	ldr	r6, [pc, #40]	; (8002d34 <__libc_init_array+0x40>)
 8002d0c:	4c0a      	ldr	r4, [pc, #40]	; (8002d38 <__libc_init_array+0x44>)
 8002d0e:	1ba4      	subs	r4, r4, r6
 8002d10:	10a4      	asrs	r4, r4, #2
 8002d12:	42a5      	cmp	r5, r4
 8002d14:	d105      	bne.n	8002d22 <__libc_init_array+0x2e>
 8002d16:	bd70      	pop	{r4, r5, r6, pc}
 8002d18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d1c:	4798      	blx	r3
 8002d1e:	3501      	adds	r5, #1
 8002d20:	e7ee      	b.n	8002d00 <__libc_init_array+0xc>
 8002d22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d26:	4798      	blx	r3
 8002d28:	3501      	adds	r5, #1
 8002d2a:	e7f2      	b.n	8002d12 <__libc_init_array+0x1e>
 8002d2c:	08003624 	.word	0x08003624
 8002d30:	08003624 	.word	0x08003624
 8002d34:	08003624 	.word	0x08003624
 8002d38:	08003628 	.word	0x08003628

08002d3c <memset>:
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4402      	add	r2, r0
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d100      	bne.n	8002d46 <memset+0xa>
 8002d44:	4770      	bx	lr
 8002d46:	f803 1b01 	strb.w	r1, [r3], #1
 8002d4a:	e7f9      	b.n	8002d40 <memset+0x4>

08002d4c <siprintf>:
 8002d4c:	b40e      	push	{r1, r2, r3}
 8002d4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d52:	b500      	push	{lr}
 8002d54:	b09c      	sub	sp, #112	; 0x70
 8002d56:	ab1d      	add	r3, sp, #116	; 0x74
 8002d58:	9002      	str	r0, [sp, #8]
 8002d5a:	9006      	str	r0, [sp, #24]
 8002d5c:	9107      	str	r1, [sp, #28]
 8002d5e:	9104      	str	r1, [sp, #16]
 8002d60:	4808      	ldr	r0, [pc, #32]	; (8002d84 <siprintf+0x38>)
 8002d62:	4909      	ldr	r1, [pc, #36]	; (8002d88 <siprintf+0x3c>)
 8002d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d68:	9105      	str	r1, [sp, #20]
 8002d6a:	6800      	ldr	r0, [r0, #0]
 8002d6c:	a902      	add	r1, sp, #8
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	f000 f866 	bl	8002e40 <_svfiprintf_r>
 8002d74:	2200      	movs	r2, #0
 8002d76:	9b02      	ldr	r3, [sp, #8]
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	b01c      	add	sp, #112	; 0x70
 8002d7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d80:	b003      	add	sp, #12
 8002d82:	4770      	bx	lr
 8002d84:	2000000c 	.word	0x2000000c
 8002d88:	ffff0208 	.word	0xffff0208

08002d8c <__ssputs_r>:
 8002d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d90:	688e      	ldr	r6, [r1, #8]
 8002d92:	4682      	mov	sl, r0
 8002d94:	429e      	cmp	r6, r3
 8002d96:	460c      	mov	r4, r1
 8002d98:	4690      	mov	r8, r2
 8002d9a:	4699      	mov	r9, r3
 8002d9c:	d837      	bhi.n	8002e0e <__ssputs_r+0x82>
 8002d9e:	898a      	ldrh	r2, [r1, #12]
 8002da0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002da4:	d031      	beq.n	8002e0a <__ssputs_r+0x7e>
 8002da6:	2302      	movs	r3, #2
 8002da8:	6825      	ldr	r5, [r4, #0]
 8002daa:	6909      	ldr	r1, [r1, #16]
 8002dac:	1a6f      	subs	r7, r5, r1
 8002dae:	6965      	ldr	r5, [r4, #20]
 8002db0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002db4:	fb95 f5f3 	sdiv	r5, r5, r3
 8002db8:	f109 0301 	add.w	r3, r9, #1
 8002dbc:	443b      	add	r3, r7
 8002dbe:	429d      	cmp	r5, r3
 8002dc0:	bf38      	it	cc
 8002dc2:	461d      	movcc	r5, r3
 8002dc4:	0553      	lsls	r3, r2, #21
 8002dc6:	d530      	bpl.n	8002e2a <__ssputs_r+0x9e>
 8002dc8:	4629      	mov	r1, r5
 8002dca:	f000 fb37 	bl	800343c <_malloc_r>
 8002dce:	4606      	mov	r6, r0
 8002dd0:	b950      	cbnz	r0, 8002de8 <__ssputs_r+0x5c>
 8002dd2:	230c      	movs	r3, #12
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	f8ca 3000 	str.w	r3, [sl]
 8002ddc:	89a3      	ldrh	r3, [r4, #12]
 8002dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002de2:	81a3      	strh	r3, [r4, #12]
 8002de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002de8:	463a      	mov	r2, r7
 8002dea:	6921      	ldr	r1, [r4, #16]
 8002dec:	f000 fab6 	bl	800335c <memcpy>
 8002df0:	89a3      	ldrh	r3, [r4, #12]
 8002df2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dfa:	81a3      	strh	r3, [r4, #12]
 8002dfc:	6126      	str	r6, [r4, #16]
 8002dfe:	443e      	add	r6, r7
 8002e00:	6026      	str	r6, [r4, #0]
 8002e02:	464e      	mov	r6, r9
 8002e04:	6165      	str	r5, [r4, #20]
 8002e06:	1bed      	subs	r5, r5, r7
 8002e08:	60a5      	str	r5, [r4, #8]
 8002e0a:	454e      	cmp	r6, r9
 8002e0c:	d900      	bls.n	8002e10 <__ssputs_r+0x84>
 8002e0e:	464e      	mov	r6, r9
 8002e10:	4632      	mov	r2, r6
 8002e12:	4641      	mov	r1, r8
 8002e14:	6820      	ldr	r0, [r4, #0]
 8002e16:	f000 faac 	bl	8003372 <memmove>
 8002e1a:	68a3      	ldr	r3, [r4, #8]
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	1b9b      	subs	r3, r3, r6
 8002e20:	60a3      	str	r3, [r4, #8]
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	441e      	add	r6, r3
 8002e26:	6026      	str	r6, [r4, #0]
 8002e28:	e7dc      	b.n	8002de4 <__ssputs_r+0x58>
 8002e2a:	462a      	mov	r2, r5
 8002e2c:	f000 fb60 	bl	80034f0 <_realloc_r>
 8002e30:	4606      	mov	r6, r0
 8002e32:	2800      	cmp	r0, #0
 8002e34:	d1e2      	bne.n	8002dfc <__ssputs_r+0x70>
 8002e36:	6921      	ldr	r1, [r4, #16]
 8002e38:	4650      	mov	r0, sl
 8002e3a:	f000 fab3 	bl	80033a4 <_free_r>
 8002e3e:	e7c8      	b.n	8002dd2 <__ssputs_r+0x46>

08002e40 <_svfiprintf_r>:
 8002e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e44:	461d      	mov	r5, r3
 8002e46:	898b      	ldrh	r3, [r1, #12]
 8002e48:	b09d      	sub	sp, #116	; 0x74
 8002e4a:	061f      	lsls	r7, r3, #24
 8002e4c:	4680      	mov	r8, r0
 8002e4e:	460c      	mov	r4, r1
 8002e50:	4616      	mov	r6, r2
 8002e52:	d50f      	bpl.n	8002e74 <_svfiprintf_r+0x34>
 8002e54:	690b      	ldr	r3, [r1, #16]
 8002e56:	b96b      	cbnz	r3, 8002e74 <_svfiprintf_r+0x34>
 8002e58:	2140      	movs	r1, #64	; 0x40
 8002e5a:	f000 faef 	bl	800343c <_malloc_r>
 8002e5e:	6020      	str	r0, [r4, #0]
 8002e60:	6120      	str	r0, [r4, #16]
 8002e62:	b928      	cbnz	r0, 8002e70 <_svfiprintf_r+0x30>
 8002e64:	230c      	movs	r3, #12
 8002e66:	f8c8 3000 	str.w	r3, [r8]
 8002e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6e:	e0c8      	b.n	8003002 <_svfiprintf_r+0x1c2>
 8002e70:	2340      	movs	r3, #64	; 0x40
 8002e72:	6163      	str	r3, [r4, #20]
 8002e74:	2300      	movs	r3, #0
 8002e76:	9309      	str	r3, [sp, #36]	; 0x24
 8002e78:	2320      	movs	r3, #32
 8002e7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e7e:	2330      	movs	r3, #48	; 0x30
 8002e80:	f04f 0b01 	mov.w	fp, #1
 8002e84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e88:	9503      	str	r5, [sp, #12]
 8002e8a:	4637      	mov	r7, r6
 8002e8c:	463d      	mov	r5, r7
 8002e8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002e92:	b10b      	cbz	r3, 8002e98 <_svfiprintf_r+0x58>
 8002e94:	2b25      	cmp	r3, #37	; 0x25
 8002e96:	d13e      	bne.n	8002f16 <_svfiprintf_r+0xd6>
 8002e98:	ebb7 0a06 	subs.w	sl, r7, r6
 8002e9c:	d00b      	beq.n	8002eb6 <_svfiprintf_r+0x76>
 8002e9e:	4653      	mov	r3, sl
 8002ea0:	4632      	mov	r2, r6
 8002ea2:	4621      	mov	r1, r4
 8002ea4:	4640      	mov	r0, r8
 8002ea6:	f7ff ff71 	bl	8002d8c <__ssputs_r>
 8002eaa:	3001      	adds	r0, #1
 8002eac:	f000 80a4 	beq.w	8002ff8 <_svfiprintf_r+0x1b8>
 8002eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002eb2:	4453      	add	r3, sl
 8002eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8002eb6:	783b      	ldrb	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 809d 	beq.w	8002ff8 <_svfiprintf_r+0x1b8>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ec8:	9304      	str	r3, [sp, #16]
 8002eca:	9307      	str	r3, [sp, #28]
 8002ecc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ed0:	931a      	str	r3, [sp, #104]	; 0x68
 8002ed2:	462f      	mov	r7, r5
 8002ed4:	2205      	movs	r2, #5
 8002ed6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002eda:	4850      	ldr	r0, [pc, #320]	; (800301c <_svfiprintf_r+0x1dc>)
 8002edc:	f000 fa30 	bl	8003340 <memchr>
 8002ee0:	9b04      	ldr	r3, [sp, #16]
 8002ee2:	b9d0      	cbnz	r0, 8002f1a <_svfiprintf_r+0xda>
 8002ee4:	06d9      	lsls	r1, r3, #27
 8002ee6:	bf44      	itt	mi
 8002ee8:	2220      	movmi	r2, #32
 8002eea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002eee:	071a      	lsls	r2, r3, #28
 8002ef0:	bf44      	itt	mi
 8002ef2:	222b      	movmi	r2, #43	; 0x2b
 8002ef4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ef8:	782a      	ldrb	r2, [r5, #0]
 8002efa:	2a2a      	cmp	r2, #42	; 0x2a
 8002efc:	d015      	beq.n	8002f2a <_svfiprintf_r+0xea>
 8002efe:	462f      	mov	r7, r5
 8002f00:	2000      	movs	r0, #0
 8002f02:	250a      	movs	r5, #10
 8002f04:	9a07      	ldr	r2, [sp, #28]
 8002f06:	4639      	mov	r1, r7
 8002f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f0c:	3b30      	subs	r3, #48	; 0x30
 8002f0e:	2b09      	cmp	r3, #9
 8002f10:	d94d      	bls.n	8002fae <_svfiprintf_r+0x16e>
 8002f12:	b1b8      	cbz	r0, 8002f44 <_svfiprintf_r+0x104>
 8002f14:	e00f      	b.n	8002f36 <_svfiprintf_r+0xf6>
 8002f16:	462f      	mov	r7, r5
 8002f18:	e7b8      	b.n	8002e8c <_svfiprintf_r+0x4c>
 8002f1a:	4a40      	ldr	r2, [pc, #256]	; (800301c <_svfiprintf_r+0x1dc>)
 8002f1c:	463d      	mov	r5, r7
 8002f1e:	1a80      	subs	r0, r0, r2
 8002f20:	fa0b f000 	lsl.w	r0, fp, r0
 8002f24:	4318      	orrs	r0, r3
 8002f26:	9004      	str	r0, [sp, #16]
 8002f28:	e7d3      	b.n	8002ed2 <_svfiprintf_r+0x92>
 8002f2a:	9a03      	ldr	r2, [sp, #12]
 8002f2c:	1d11      	adds	r1, r2, #4
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	9103      	str	r1, [sp, #12]
 8002f32:	2a00      	cmp	r2, #0
 8002f34:	db01      	blt.n	8002f3a <_svfiprintf_r+0xfa>
 8002f36:	9207      	str	r2, [sp, #28]
 8002f38:	e004      	b.n	8002f44 <_svfiprintf_r+0x104>
 8002f3a:	4252      	negs	r2, r2
 8002f3c:	f043 0302 	orr.w	r3, r3, #2
 8002f40:	9207      	str	r2, [sp, #28]
 8002f42:	9304      	str	r3, [sp, #16]
 8002f44:	783b      	ldrb	r3, [r7, #0]
 8002f46:	2b2e      	cmp	r3, #46	; 0x2e
 8002f48:	d10c      	bne.n	8002f64 <_svfiprintf_r+0x124>
 8002f4a:	787b      	ldrb	r3, [r7, #1]
 8002f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8002f4e:	d133      	bne.n	8002fb8 <_svfiprintf_r+0x178>
 8002f50:	9b03      	ldr	r3, [sp, #12]
 8002f52:	3702      	adds	r7, #2
 8002f54:	1d1a      	adds	r2, r3, #4
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	9203      	str	r2, [sp, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bfb8      	it	lt
 8002f5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f62:	9305      	str	r3, [sp, #20]
 8002f64:	4d2e      	ldr	r5, [pc, #184]	; (8003020 <_svfiprintf_r+0x1e0>)
 8002f66:	2203      	movs	r2, #3
 8002f68:	7839      	ldrb	r1, [r7, #0]
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	f000 f9e8 	bl	8003340 <memchr>
 8002f70:	b138      	cbz	r0, 8002f82 <_svfiprintf_r+0x142>
 8002f72:	2340      	movs	r3, #64	; 0x40
 8002f74:	1b40      	subs	r0, r0, r5
 8002f76:	fa03 f000 	lsl.w	r0, r3, r0
 8002f7a:	9b04      	ldr	r3, [sp, #16]
 8002f7c:	3701      	adds	r7, #1
 8002f7e:	4303      	orrs	r3, r0
 8002f80:	9304      	str	r3, [sp, #16]
 8002f82:	7839      	ldrb	r1, [r7, #0]
 8002f84:	2206      	movs	r2, #6
 8002f86:	4827      	ldr	r0, [pc, #156]	; (8003024 <_svfiprintf_r+0x1e4>)
 8002f88:	1c7e      	adds	r6, r7, #1
 8002f8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f8e:	f000 f9d7 	bl	8003340 <memchr>
 8002f92:	2800      	cmp	r0, #0
 8002f94:	d038      	beq.n	8003008 <_svfiprintf_r+0x1c8>
 8002f96:	4b24      	ldr	r3, [pc, #144]	; (8003028 <_svfiprintf_r+0x1e8>)
 8002f98:	bb13      	cbnz	r3, 8002fe0 <_svfiprintf_r+0x1a0>
 8002f9a:	9b03      	ldr	r3, [sp, #12]
 8002f9c:	3307      	adds	r3, #7
 8002f9e:	f023 0307 	bic.w	r3, r3, #7
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	9303      	str	r3, [sp, #12]
 8002fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fa8:	444b      	add	r3, r9
 8002faa:	9309      	str	r3, [sp, #36]	; 0x24
 8002fac:	e76d      	b.n	8002e8a <_svfiprintf_r+0x4a>
 8002fae:	fb05 3202 	mla	r2, r5, r2, r3
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	460f      	mov	r7, r1
 8002fb6:	e7a6      	b.n	8002f06 <_svfiprintf_r+0xc6>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	250a      	movs	r5, #10
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	3701      	adds	r7, #1
 8002fc0:	9305      	str	r3, [sp, #20]
 8002fc2:	4638      	mov	r0, r7
 8002fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fc8:	3a30      	subs	r2, #48	; 0x30
 8002fca:	2a09      	cmp	r2, #9
 8002fcc:	d903      	bls.n	8002fd6 <_svfiprintf_r+0x196>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0c8      	beq.n	8002f64 <_svfiprintf_r+0x124>
 8002fd2:	9105      	str	r1, [sp, #20]
 8002fd4:	e7c6      	b.n	8002f64 <_svfiprintf_r+0x124>
 8002fd6:	fb05 2101 	mla	r1, r5, r1, r2
 8002fda:	2301      	movs	r3, #1
 8002fdc:	4607      	mov	r7, r0
 8002fde:	e7f0      	b.n	8002fc2 <_svfiprintf_r+0x182>
 8002fe0:	ab03      	add	r3, sp, #12
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	4622      	mov	r2, r4
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <_svfiprintf_r+0x1ec>)
 8002fe8:	a904      	add	r1, sp, #16
 8002fea:	4640      	mov	r0, r8
 8002fec:	f3af 8000 	nop.w
 8002ff0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002ff4:	4681      	mov	r9, r0
 8002ff6:	d1d6      	bne.n	8002fa6 <_svfiprintf_r+0x166>
 8002ff8:	89a3      	ldrh	r3, [r4, #12]
 8002ffa:	065b      	lsls	r3, r3, #25
 8002ffc:	f53f af35 	bmi.w	8002e6a <_svfiprintf_r+0x2a>
 8003000:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003002:	b01d      	add	sp, #116	; 0x74
 8003004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003008:	ab03      	add	r3, sp, #12
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	4622      	mov	r2, r4
 800300e:	4b07      	ldr	r3, [pc, #28]	; (800302c <_svfiprintf_r+0x1ec>)
 8003010:	a904      	add	r1, sp, #16
 8003012:	4640      	mov	r0, r8
 8003014:	f000 f882 	bl	800311c <_printf_i>
 8003018:	e7ea      	b.n	8002ff0 <_svfiprintf_r+0x1b0>
 800301a:	bf00      	nop
 800301c:	080035f0 	.word	0x080035f0
 8003020:	080035f6 	.word	0x080035f6
 8003024:	080035fa 	.word	0x080035fa
 8003028:	00000000 	.word	0x00000000
 800302c:	08002d8d 	.word	0x08002d8d

08003030 <_printf_common>:
 8003030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003034:	4691      	mov	r9, r2
 8003036:	461f      	mov	r7, r3
 8003038:	688a      	ldr	r2, [r1, #8]
 800303a:	690b      	ldr	r3, [r1, #16]
 800303c:	4606      	mov	r6, r0
 800303e:	4293      	cmp	r3, r2
 8003040:	bfb8      	it	lt
 8003042:	4613      	movlt	r3, r2
 8003044:	f8c9 3000 	str.w	r3, [r9]
 8003048:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800304c:	460c      	mov	r4, r1
 800304e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003052:	b112      	cbz	r2, 800305a <_printf_common+0x2a>
 8003054:	3301      	adds	r3, #1
 8003056:	f8c9 3000 	str.w	r3, [r9]
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	0699      	lsls	r1, r3, #26
 800305e:	bf42      	ittt	mi
 8003060:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003064:	3302      	addmi	r3, #2
 8003066:	f8c9 3000 	strmi.w	r3, [r9]
 800306a:	6825      	ldr	r5, [r4, #0]
 800306c:	f015 0506 	ands.w	r5, r5, #6
 8003070:	d107      	bne.n	8003082 <_printf_common+0x52>
 8003072:	f104 0a19 	add.w	sl, r4, #25
 8003076:	68e3      	ldr	r3, [r4, #12]
 8003078:	f8d9 2000 	ldr.w	r2, [r9]
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	42ab      	cmp	r3, r5
 8003080:	dc29      	bgt.n	80030d6 <_printf_common+0xa6>
 8003082:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003086:	6822      	ldr	r2, [r4, #0]
 8003088:	3300      	adds	r3, #0
 800308a:	bf18      	it	ne
 800308c:	2301      	movne	r3, #1
 800308e:	0692      	lsls	r2, r2, #26
 8003090:	d42e      	bmi.n	80030f0 <_printf_common+0xc0>
 8003092:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003096:	4639      	mov	r1, r7
 8003098:	4630      	mov	r0, r6
 800309a:	47c0      	blx	r8
 800309c:	3001      	adds	r0, #1
 800309e:	d021      	beq.n	80030e4 <_printf_common+0xb4>
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	68e5      	ldr	r5, [r4, #12]
 80030a4:	f003 0306 	and.w	r3, r3, #6
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	bf18      	it	ne
 80030ac:	2500      	movne	r5, #0
 80030ae:	f8d9 2000 	ldr.w	r2, [r9]
 80030b2:	f04f 0900 	mov.w	r9, #0
 80030b6:	bf08      	it	eq
 80030b8:	1aad      	subeq	r5, r5, r2
 80030ba:	68a3      	ldr	r3, [r4, #8]
 80030bc:	6922      	ldr	r2, [r4, #16]
 80030be:	bf08      	it	eq
 80030c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030c4:	4293      	cmp	r3, r2
 80030c6:	bfc4      	itt	gt
 80030c8:	1a9b      	subgt	r3, r3, r2
 80030ca:	18ed      	addgt	r5, r5, r3
 80030cc:	341a      	adds	r4, #26
 80030ce:	454d      	cmp	r5, r9
 80030d0:	d11a      	bne.n	8003108 <_printf_common+0xd8>
 80030d2:	2000      	movs	r0, #0
 80030d4:	e008      	b.n	80030e8 <_printf_common+0xb8>
 80030d6:	2301      	movs	r3, #1
 80030d8:	4652      	mov	r2, sl
 80030da:	4639      	mov	r1, r7
 80030dc:	4630      	mov	r0, r6
 80030de:	47c0      	blx	r8
 80030e0:	3001      	adds	r0, #1
 80030e2:	d103      	bne.n	80030ec <_printf_common+0xbc>
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295
 80030e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030ec:	3501      	adds	r5, #1
 80030ee:	e7c2      	b.n	8003076 <_printf_common+0x46>
 80030f0:	2030      	movs	r0, #48	; 0x30
 80030f2:	18e1      	adds	r1, r4, r3
 80030f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030fe:	4422      	add	r2, r4
 8003100:	3302      	adds	r3, #2
 8003102:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003106:	e7c4      	b.n	8003092 <_printf_common+0x62>
 8003108:	2301      	movs	r3, #1
 800310a:	4622      	mov	r2, r4
 800310c:	4639      	mov	r1, r7
 800310e:	4630      	mov	r0, r6
 8003110:	47c0      	blx	r8
 8003112:	3001      	adds	r0, #1
 8003114:	d0e6      	beq.n	80030e4 <_printf_common+0xb4>
 8003116:	f109 0901 	add.w	r9, r9, #1
 800311a:	e7d8      	b.n	80030ce <_printf_common+0x9e>

0800311c <_printf_i>:
 800311c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003120:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003124:	460c      	mov	r4, r1
 8003126:	7e09      	ldrb	r1, [r1, #24]
 8003128:	b085      	sub	sp, #20
 800312a:	296e      	cmp	r1, #110	; 0x6e
 800312c:	4617      	mov	r7, r2
 800312e:	4606      	mov	r6, r0
 8003130:	4698      	mov	r8, r3
 8003132:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003134:	f000 80b3 	beq.w	800329e <_printf_i+0x182>
 8003138:	d822      	bhi.n	8003180 <_printf_i+0x64>
 800313a:	2963      	cmp	r1, #99	; 0x63
 800313c:	d036      	beq.n	80031ac <_printf_i+0x90>
 800313e:	d80a      	bhi.n	8003156 <_printf_i+0x3a>
 8003140:	2900      	cmp	r1, #0
 8003142:	f000 80b9 	beq.w	80032b8 <_printf_i+0x19c>
 8003146:	2958      	cmp	r1, #88	; 0x58
 8003148:	f000 8083 	beq.w	8003252 <_printf_i+0x136>
 800314c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003150:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003154:	e032      	b.n	80031bc <_printf_i+0xa0>
 8003156:	2964      	cmp	r1, #100	; 0x64
 8003158:	d001      	beq.n	800315e <_printf_i+0x42>
 800315a:	2969      	cmp	r1, #105	; 0x69
 800315c:	d1f6      	bne.n	800314c <_printf_i+0x30>
 800315e:	6820      	ldr	r0, [r4, #0]
 8003160:	6813      	ldr	r3, [r2, #0]
 8003162:	0605      	lsls	r5, r0, #24
 8003164:	f103 0104 	add.w	r1, r3, #4
 8003168:	d52a      	bpl.n	80031c0 <_printf_i+0xa4>
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6011      	str	r1, [r2, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	da03      	bge.n	800317a <_printf_i+0x5e>
 8003172:	222d      	movs	r2, #45	; 0x2d
 8003174:	425b      	negs	r3, r3
 8003176:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800317a:	486f      	ldr	r0, [pc, #444]	; (8003338 <_printf_i+0x21c>)
 800317c:	220a      	movs	r2, #10
 800317e:	e039      	b.n	80031f4 <_printf_i+0xd8>
 8003180:	2973      	cmp	r1, #115	; 0x73
 8003182:	f000 809d 	beq.w	80032c0 <_printf_i+0x1a4>
 8003186:	d808      	bhi.n	800319a <_printf_i+0x7e>
 8003188:	296f      	cmp	r1, #111	; 0x6f
 800318a:	d020      	beq.n	80031ce <_printf_i+0xb2>
 800318c:	2970      	cmp	r1, #112	; 0x70
 800318e:	d1dd      	bne.n	800314c <_printf_i+0x30>
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	f043 0320 	orr.w	r3, r3, #32
 8003196:	6023      	str	r3, [r4, #0]
 8003198:	e003      	b.n	80031a2 <_printf_i+0x86>
 800319a:	2975      	cmp	r1, #117	; 0x75
 800319c:	d017      	beq.n	80031ce <_printf_i+0xb2>
 800319e:	2978      	cmp	r1, #120	; 0x78
 80031a0:	d1d4      	bne.n	800314c <_printf_i+0x30>
 80031a2:	2378      	movs	r3, #120	; 0x78
 80031a4:	4865      	ldr	r0, [pc, #404]	; (800333c <_printf_i+0x220>)
 80031a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031aa:	e055      	b.n	8003258 <_printf_i+0x13c>
 80031ac:	6813      	ldr	r3, [r2, #0]
 80031ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031b2:	1d19      	adds	r1, r3, #4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6011      	str	r1, [r2, #0]
 80031b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031bc:	2301      	movs	r3, #1
 80031be:	e08c      	b.n	80032da <_printf_i+0x1be>
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80031c6:	6011      	str	r1, [r2, #0]
 80031c8:	bf18      	it	ne
 80031ca:	b21b      	sxthne	r3, r3
 80031cc:	e7cf      	b.n	800316e <_printf_i+0x52>
 80031ce:	6813      	ldr	r3, [r2, #0]
 80031d0:	6825      	ldr	r5, [r4, #0]
 80031d2:	1d18      	adds	r0, r3, #4
 80031d4:	6010      	str	r0, [r2, #0]
 80031d6:	0628      	lsls	r0, r5, #24
 80031d8:	d501      	bpl.n	80031de <_printf_i+0xc2>
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	e002      	b.n	80031e4 <_printf_i+0xc8>
 80031de:	0668      	lsls	r0, r5, #25
 80031e0:	d5fb      	bpl.n	80031da <_printf_i+0xbe>
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	296f      	cmp	r1, #111	; 0x6f
 80031e6:	bf14      	ite	ne
 80031e8:	220a      	movne	r2, #10
 80031ea:	2208      	moveq	r2, #8
 80031ec:	4852      	ldr	r0, [pc, #328]	; (8003338 <_printf_i+0x21c>)
 80031ee:	2100      	movs	r1, #0
 80031f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031f4:	6865      	ldr	r5, [r4, #4]
 80031f6:	2d00      	cmp	r5, #0
 80031f8:	60a5      	str	r5, [r4, #8]
 80031fa:	f2c0 8095 	blt.w	8003328 <_printf_i+0x20c>
 80031fe:	6821      	ldr	r1, [r4, #0]
 8003200:	f021 0104 	bic.w	r1, r1, #4
 8003204:	6021      	str	r1, [r4, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d13d      	bne.n	8003286 <_printf_i+0x16a>
 800320a:	2d00      	cmp	r5, #0
 800320c:	f040 808e 	bne.w	800332c <_printf_i+0x210>
 8003210:	4665      	mov	r5, ip
 8003212:	2a08      	cmp	r2, #8
 8003214:	d10b      	bne.n	800322e <_printf_i+0x112>
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	07db      	lsls	r3, r3, #31
 800321a:	d508      	bpl.n	800322e <_printf_i+0x112>
 800321c:	6923      	ldr	r3, [r4, #16]
 800321e:	6862      	ldr	r2, [r4, #4]
 8003220:	429a      	cmp	r2, r3
 8003222:	bfde      	ittt	le
 8003224:	2330      	movle	r3, #48	; 0x30
 8003226:	f805 3c01 	strble.w	r3, [r5, #-1]
 800322a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800322e:	ebac 0305 	sub.w	r3, ip, r5
 8003232:	6123      	str	r3, [r4, #16]
 8003234:	f8cd 8000 	str.w	r8, [sp]
 8003238:	463b      	mov	r3, r7
 800323a:	aa03      	add	r2, sp, #12
 800323c:	4621      	mov	r1, r4
 800323e:	4630      	mov	r0, r6
 8003240:	f7ff fef6 	bl	8003030 <_printf_common>
 8003244:	3001      	adds	r0, #1
 8003246:	d14d      	bne.n	80032e4 <_printf_i+0x1c8>
 8003248:	f04f 30ff 	mov.w	r0, #4294967295
 800324c:	b005      	add	sp, #20
 800324e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003252:	4839      	ldr	r0, [pc, #228]	; (8003338 <_printf_i+0x21c>)
 8003254:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003258:	6813      	ldr	r3, [r2, #0]
 800325a:	6821      	ldr	r1, [r4, #0]
 800325c:	1d1d      	adds	r5, r3, #4
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6015      	str	r5, [r2, #0]
 8003262:	060a      	lsls	r2, r1, #24
 8003264:	d50b      	bpl.n	800327e <_printf_i+0x162>
 8003266:	07ca      	lsls	r2, r1, #31
 8003268:	bf44      	itt	mi
 800326a:	f041 0120 	orrmi.w	r1, r1, #32
 800326e:	6021      	strmi	r1, [r4, #0]
 8003270:	b91b      	cbnz	r3, 800327a <_printf_i+0x15e>
 8003272:	6822      	ldr	r2, [r4, #0]
 8003274:	f022 0220 	bic.w	r2, r2, #32
 8003278:	6022      	str	r2, [r4, #0]
 800327a:	2210      	movs	r2, #16
 800327c:	e7b7      	b.n	80031ee <_printf_i+0xd2>
 800327e:	064d      	lsls	r5, r1, #25
 8003280:	bf48      	it	mi
 8003282:	b29b      	uxthmi	r3, r3
 8003284:	e7ef      	b.n	8003266 <_printf_i+0x14a>
 8003286:	4665      	mov	r5, ip
 8003288:	fbb3 f1f2 	udiv	r1, r3, r2
 800328c:	fb02 3311 	mls	r3, r2, r1, r3
 8003290:	5cc3      	ldrb	r3, [r0, r3]
 8003292:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003296:	460b      	mov	r3, r1
 8003298:	2900      	cmp	r1, #0
 800329a:	d1f5      	bne.n	8003288 <_printf_i+0x16c>
 800329c:	e7b9      	b.n	8003212 <_printf_i+0xf6>
 800329e:	6813      	ldr	r3, [r2, #0]
 80032a0:	6825      	ldr	r5, [r4, #0]
 80032a2:	1d18      	adds	r0, r3, #4
 80032a4:	6961      	ldr	r1, [r4, #20]
 80032a6:	6010      	str	r0, [r2, #0]
 80032a8:	0628      	lsls	r0, r5, #24
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	d501      	bpl.n	80032b2 <_printf_i+0x196>
 80032ae:	6019      	str	r1, [r3, #0]
 80032b0:	e002      	b.n	80032b8 <_printf_i+0x19c>
 80032b2:	066a      	lsls	r2, r5, #25
 80032b4:	d5fb      	bpl.n	80032ae <_printf_i+0x192>
 80032b6:	8019      	strh	r1, [r3, #0]
 80032b8:	2300      	movs	r3, #0
 80032ba:	4665      	mov	r5, ip
 80032bc:	6123      	str	r3, [r4, #16]
 80032be:	e7b9      	b.n	8003234 <_printf_i+0x118>
 80032c0:	6813      	ldr	r3, [r2, #0]
 80032c2:	1d19      	adds	r1, r3, #4
 80032c4:	6011      	str	r1, [r2, #0]
 80032c6:	681d      	ldr	r5, [r3, #0]
 80032c8:	6862      	ldr	r2, [r4, #4]
 80032ca:	2100      	movs	r1, #0
 80032cc:	4628      	mov	r0, r5
 80032ce:	f000 f837 	bl	8003340 <memchr>
 80032d2:	b108      	cbz	r0, 80032d8 <_printf_i+0x1bc>
 80032d4:	1b40      	subs	r0, r0, r5
 80032d6:	6060      	str	r0, [r4, #4]
 80032d8:	6863      	ldr	r3, [r4, #4]
 80032da:	6123      	str	r3, [r4, #16]
 80032dc:	2300      	movs	r3, #0
 80032de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032e2:	e7a7      	b.n	8003234 <_printf_i+0x118>
 80032e4:	6923      	ldr	r3, [r4, #16]
 80032e6:	462a      	mov	r2, r5
 80032e8:	4639      	mov	r1, r7
 80032ea:	4630      	mov	r0, r6
 80032ec:	47c0      	blx	r8
 80032ee:	3001      	adds	r0, #1
 80032f0:	d0aa      	beq.n	8003248 <_printf_i+0x12c>
 80032f2:	6823      	ldr	r3, [r4, #0]
 80032f4:	079b      	lsls	r3, r3, #30
 80032f6:	d413      	bmi.n	8003320 <_printf_i+0x204>
 80032f8:	68e0      	ldr	r0, [r4, #12]
 80032fa:	9b03      	ldr	r3, [sp, #12]
 80032fc:	4298      	cmp	r0, r3
 80032fe:	bfb8      	it	lt
 8003300:	4618      	movlt	r0, r3
 8003302:	e7a3      	b.n	800324c <_printf_i+0x130>
 8003304:	2301      	movs	r3, #1
 8003306:	464a      	mov	r2, r9
 8003308:	4639      	mov	r1, r7
 800330a:	4630      	mov	r0, r6
 800330c:	47c0      	blx	r8
 800330e:	3001      	adds	r0, #1
 8003310:	d09a      	beq.n	8003248 <_printf_i+0x12c>
 8003312:	3501      	adds	r5, #1
 8003314:	68e3      	ldr	r3, [r4, #12]
 8003316:	9a03      	ldr	r2, [sp, #12]
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	42ab      	cmp	r3, r5
 800331c:	dcf2      	bgt.n	8003304 <_printf_i+0x1e8>
 800331e:	e7eb      	b.n	80032f8 <_printf_i+0x1dc>
 8003320:	2500      	movs	r5, #0
 8003322:	f104 0919 	add.w	r9, r4, #25
 8003326:	e7f5      	b.n	8003314 <_printf_i+0x1f8>
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ac      	bne.n	8003286 <_printf_i+0x16a>
 800332c:	7803      	ldrb	r3, [r0, #0]
 800332e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003332:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003336:	e76c      	b.n	8003212 <_printf_i+0xf6>
 8003338:	08003601 	.word	0x08003601
 800333c:	08003612 	.word	0x08003612

08003340 <memchr>:
 8003340:	b510      	push	{r4, lr}
 8003342:	b2c9      	uxtb	r1, r1
 8003344:	4402      	add	r2, r0
 8003346:	4290      	cmp	r0, r2
 8003348:	4603      	mov	r3, r0
 800334a:	d101      	bne.n	8003350 <memchr+0x10>
 800334c:	2300      	movs	r3, #0
 800334e:	e003      	b.n	8003358 <memchr+0x18>
 8003350:	781c      	ldrb	r4, [r3, #0]
 8003352:	3001      	adds	r0, #1
 8003354:	428c      	cmp	r4, r1
 8003356:	d1f6      	bne.n	8003346 <memchr+0x6>
 8003358:	4618      	mov	r0, r3
 800335a:	bd10      	pop	{r4, pc}

0800335c <memcpy>:
 800335c:	b510      	push	{r4, lr}
 800335e:	1e43      	subs	r3, r0, #1
 8003360:	440a      	add	r2, r1
 8003362:	4291      	cmp	r1, r2
 8003364:	d100      	bne.n	8003368 <memcpy+0xc>
 8003366:	bd10      	pop	{r4, pc}
 8003368:	f811 4b01 	ldrb.w	r4, [r1], #1
 800336c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003370:	e7f7      	b.n	8003362 <memcpy+0x6>

08003372 <memmove>:
 8003372:	4288      	cmp	r0, r1
 8003374:	b510      	push	{r4, lr}
 8003376:	eb01 0302 	add.w	r3, r1, r2
 800337a:	d807      	bhi.n	800338c <memmove+0x1a>
 800337c:	1e42      	subs	r2, r0, #1
 800337e:	4299      	cmp	r1, r3
 8003380:	d00a      	beq.n	8003398 <memmove+0x26>
 8003382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003386:	f802 4f01 	strb.w	r4, [r2, #1]!
 800338a:	e7f8      	b.n	800337e <memmove+0xc>
 800338c:	4283      	cmp	r3, r0
 800338e:	d9f5      	bls.n	800337c <memmove+0xa>
 8003390:	1881      	adds	r1, r0, r2
 8003392:	1ad2      	subs	r2, r2, r3
 8003394:	42d3      	cmn	r3, r2
 8003396:	d100      	bne.n	800339a <memmove+0x28>
 8003398:	bd10      	pop	{r4, pc}
 800339a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800339e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80033a2:	e7f7      	b.n	8003394 <memmove+0x22>

080033a4 <_free_r>:
 80033a4:	b538      	push	{r3, r4, r5, lr}
 80033a6:	4605      	mov	r5, r0
 80033a8:	2900      	cmp	r1, #0
 80033aa:	d043      	beq.n	8003434 <_free_r+0x90>
 80033ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033b0:	1f0c      	subs	r4, r1, #4
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bfb8      	it	lt
 80033b6:	18e4      	addlt	r4, r4, r3
 80033b8:	f000 f8d0 	bl	800355c <__malloc_lock>
 80033bc:	4a1e      	ldr	r2, [pc, #120]	; (8003438 <_free_r+0x94>)
 80033be:	6813      	ldr	r3, [r2, #0]
 80033c0:	4610      	mov	r0, r2
 80033c2:	b933      	cbnz	r3, 80033d2 <_free_r+0x2e>
 80033c4:	6063      	str	r3, [r4, #4]
 80033c6:	6014      	str	r4, [r2, #0]
 80033c8:	4628      	mov	r0, r5
 80033ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033ce:	f000 b8c6 	b.w	800355e <__malloc_unlock>
 80033d2:	42a3      	cmp	r3, r4
 80033d4:	d90b      	bls.n	80033ee <_free_r+0x4a>
 80033d6:	6821      	ldr	r1, [r4, #0]
 80033d8:	1862      	adds	r2, r4, r1
 80033da:	4293      	cmp	r3, r2
 80033dc:	bf01      	itttt	eq
 80033de:	681a      	ldreq	r2, [r3, #0]
 80033e0:	685b      	ldreq	r3, [r3, #4]
 80033e2:	1852      	addeq	r2, r2, r1
 80033e4:	6022      	streq	r2, [r4, #0]
 80033e6:	6063      	str	r3, [r4, #4]
 80033e8:	6004      	str	r4, [r0, #0]
 80033ea:	e7ed      	b.n	80033c8 <_free_r+0x24>
 80033ec:	4613      	mov	r3, r2
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	b10a      	cbz	r2, 80033f6 <_free_r+0x52>
 80033f2:	42a2      	cmp	r2, r4
 80033f4:	d9fa      	bls.n	80033ec <_free_r+0x48>
 80033f6:	6819      	ldr	r1, [r3, #0]
 80033f8:	1858      	adds	r0, r3, r1
 80033fa:	42a0      	cmp	r0, r4
 80033fc:	d10b      	bne.n	8003416 <_free_r+0x72>
 80033fe:	6820      	ldr	r0, [r4, #0]
 8003400:	4401      	add	r1, r0
 8003402:	1858      	adds	r0, r3, r1
 8003404:	4282      	cmp	r2, r0
 8003406:	6019      	str	r1, [r3, #0]
 8003408:	d1de      	bne.n	80033c8 <_free_r+0x24>
 800340a:	6810      	ldr	r0, [r2, #0]
 800340c:	6852      	ldr	r2, [r2, #4]
 800340e:	4401      	add	r1, r0
 8003410:	6019      	str	r1, [r3, #0]
 8003412:	605a      	str	r2, [r3, #4]
 8003414:	e7d8      	b.n	80033c8 <_free_r+0x24>
 8003416:	d902      	bls.n	800341e <_free_r+0x7a>
 8003418:	230c      	movs	r3, #12
 800341a:	602b      	str	r3, [r5, #0]
 800341c:	e7d4      	b.n	80033c8 <_free_r+0x24>
 800341e:	6820      	ldr	r0, [r4, #0]
 8003420:	1821      	adds	r1, r4, r0
 8003422:	428a      	cmp	r2, r1
 8003424:	bf01      	itttt	eq
 8003426:	6811      	ldreq	r1, [r2, #0]
 8003428:	6852      	ldreq	r2, [r2, #4]
 800342a:	1809      	addeq	r1, r1, r0
 800342c:	6021      	streq	r1, [r4, #0]
 800342e:	6062      	str	r2, [r4, #4]
 8003430:	605c      	str	r4, [r3, #4]
 8003432:	e7c9      	b.n	80033c8 <_free_r+0x24>
 8003434:	bd38      	pop	{r3, r4, r5, pc}
 8003436:	bf00      	nop
 8003438:	200000f4 	.word	0x200000f4

0800343c <_malloc_r>:
 800343c:	b570      	push	{r4, r5, r6, lr}
 800343e:	1ccd      	adds	r5, r1, #3
 8003440:	f025 0503 	bic.w	r5, r5, #3
 8003444:	3508      	adds	r5, #8
 8003446:	2d0c      	cmp	r5, #12
 8003448:	bf38      	it	cc
 800344a:	250c      	movcc	r5, #12
 800344c:	2d00      	cmp	r5, #0
 800344e:	4606      	mov	r6, r0
 8003450:	db01      	blt.n	8003456 <_malloc_r+0x1a>
 8003452:	42a9      	cmp	r1, r5
 8003454:	d903      	bls.n	800345e <_malloc_r+0x22>
 8003456:	230c      	movs	r3, #12
 8003458:	6033      	str	r3, [r6, #0]
 800345a:	2000      	movs	r0, #0
 800345c:	bd70      	pop	{r4, r5, r6, pc}
 800345e:	f000 f87d 	bl	800355c <__malloc_lock>
 8003462:	4a21      	ldr	r2, [pc, #132]	; (80034e8 <_malloc_r+0xac>)
 8003464:	6814      	ldr	r4, [r2, #0]
 8003466:	4621      	mov	r1, r4
 8003468:	b991      	cbnz	r1, 8003490 <_malloc_r+0x54>
 800346a:	4c20      	ldr	r4, [pc, #128]	; (80034ec <_malloc_r+0xb0>)
 800346c:	6823      	ldr	r3, [r4, #0]
 800346e:	b91b      	cbnz	r3, 8003478 <_malloc_r+0x3c>
 8003470:	4630      	mov	r0, r6
 8003472:	f000 f863 	bl	800353c <_sbrk_r>
 8003476:	6020      	str	r0, [r4, #0]
 8003478:	4629      	mov	r1, r5
 800347a:	4630      	mov	r0, r6
 800347c:	f000 f85e 	bl	800353c <_sbrk_r>
 8003480:	1c43      	adds	r3, r0, #1
 8003482:	d124      	bne.n	80034ce <_malloc_r+0x92>
 8003484:	230c      	movs	r3, #12
 8003486:	4630      	mov	r0, r6
 8003488:	6033      	str	r3, [r6, #0]
 800348a:	f000 f868 	bl	800355e <__malloc_unlock>
 800348e:	e7e4      	b.n	800345a <_malloc_r+0x1e>
 8003490:	680b      	ldr	r3, [r1, #0]
 8003492:	1b5b      	subs	r3, r3, r5
 8003494:	d418      	bmi.n	80034c8 <_malloc_r+0x8c>
 8003496:	2b0b      	cmp	r3, #11
 8003498:	d90f      	bls.n	80034ba <_malloc_r+0x7e>
 800349a:	600b      	str	r3, [r1, #0]
 800349c:	18cc      	adds	r4, r1, r3
 800349e:	50cd      	str	r5, [r1, r3]
 80034a0:	4630      	mov	r0, r6
 80034a2:	f000 f85c 	bl	800355e <__malloc_unlock>
 80034a6:	f104 000b 	add.w	r0, r4, #11
 80034aa:	1d23      	adds	r3, r4, #4
 80034ac:	f020 0007 	bic.w	r0, r0, #7
 80034b0:	1ac3      	subs	r3, r0, r3
 80034b2:	d0d3      	beq.n	800345c <_malloc_r+0x20>
 80034b4:	425a      	negs	r2, r3
 80034b6:	50e2      	str	r2, [r4, r3]
 80034b8:	e7d0      	b.n	800345c <_malloc_r+0x20>
 80034ba:	684b      	ldr	r3, [r1, #4]
 80034bc:	428c      	cmp	r4, r1
 80034be:	bf16      	itet	ne
 80034c0:	6063      	strne	r3, [r4, #4]
 80034c2:	6013      	streq	r3, [r2, #0]
 80034c4:	460c      	movne	r4, r1
 80034c6:	e7eb      	b.n	80034a0 <_malloc_r+0x64>
 80034c8:	460c      	mov	r4, r1
 80034ca:	6849      	ldr	r1, [r1, #4]
 80034cc:	e7cc      	b.n	8003468 <_malloc_r+0x2c>
 80034ce:	1cc4      	adds	r4, r0, #3
 80034d0:	f024 0403 	bic.w	r4, r4, #3
 80034d4:	42a0      	cmp	r0, r4
 80034d6:	d005      	beq.n	80034e4 <_malloc_r+0xa8>
 80034d8:	1a21      	subs	r1, r4, r0
 80034da:	4630      	mov	r0, r6
 80034dc:	f000 f82e 	bl	800353c <_sbrk_r>
 80034e0:	3001      	adds	r0, #1
 80034e2:	d0cf      	beq.n	8003484 <_malloc_r+0x48>
 80034e4:	6025      	str	r5, [r4, #0]
 80034e6:	e7db      	b.n	80034a0 <_malloc_r+0x64>
 80034e8:	200000f4 	.word	0x200000f4
 80034ec:	200000f8 	.word	0x200000f8

080034f0 <_realloc_r>:
 80034f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f2:	4607      	mov	r7, r0
 80034f4:	4614      	mov	r4, r2
 80034f6:	460e      	mov	r6, r1
 80034f8:	b921      	cbnz	r1, 8003504 <_realloc_r+0x14>
 80034fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80034fe:	4611      	mov	r1, r2
 8003500:	f7ff bf9c 	b.w	800343c <_malloc_r>
 8003504:	b922      	cbnz	r2, 8003510 <_realloc_r+0x20>
 8003506:	f7ff ff4d 	bl	80033a4 <_free_r>
 800350a:	4625      	mov	r5, r4
 800350c:	4628      	mov	r0, r5
 800350e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003510:	f000 f826 	bl	8003560 <_malloc_usable_size_r>
 8003514:	42a0      	cmp	r0, r4
 8003516:	d20f      	bcs.n	8003538 <_realloc_r+0x48>
 8003518:	4621      	mov	r1, r4
 800351a:	4638      	mov	r0, r7
 800351c:	f7ff ff8e 	bl	800343c <_malloc_r>
 8003520:	4605      	mov	r5, r0
 8003522:	2800      	cmp	r0, #0
 8003524:	d0f2      	beq.n	800350c <_realloc_r+0x1c>
 8003526:	4631      	mov	r1, r6
 8003528:	4622      	mov	r2, r4
 800352a:	f7ff ff17 	bl	800335c <memcpy>
 800352e:	4631      	mov	r1, r6
 8003530:	4638      	mov	r0, r7
 8003532:	f7ff ff37 	bl	80033a4 <_free_r>
 8003536:	e7e9      	b.n	800350c <_realloc_r+0x1c>
 8003538:	4635      	mov	r5, r6
 800353a:	e7e7      	b.n	800350c <_realloc_r+0x1c>

0800353c <_sbrk_r>:
 800353c:	b538      	push	{r3, r4, r5, lr}
 800353e:	2300      	movs	r3, #0
 8003540:	4c05      	ldr	r4, [pc, #20]	; (8003558 <_sbrk_r+0x1c>)
 8003542:	4605      	mov	r5, r0
 8003544:	4608      	mov	r0, r1
 8003546:	6023      	str	r3, [r4, #0]
 8003548:	f7fd fa54 	bl	80009f4 <_sbrk>
 800354c:	1c43      	adds	r3, r0, #1
 800354e:	d102      	bne.n	8003556 <_sbrk_r+0x1a>
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	b103      	cbz	r3, 8003556 <_sbrk_r+0x1a>
 8003554:	602b      	str	r3, [r5, #0]
 8003556:	bd38      	pop	{r3, r4, r5, pc}
 8003558:	2000031c 	.word	0x2000031c

0800355c <__malloc_lock>:
 800355c:	4770      	bx	lr

0800355e <__malloc_unlock>:
 800355e:	4770      	bx	lr

08003560 <_malloc_usable_size_r>:
 8003560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003564:	1f18      	subs	r0, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	bfbc      	itt	lt
 800356a:	580b      	ldrlt	r3, [r1, r0]
 800356c:	18c0      	addlt	r0, r0, r3
 800356e:	4770      	bx	lr

08003570 <_init>:
 8003570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003572:	bf00      	nop
 8003574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003576:	bc08      	pop	{r3}
 8003578:	469e      	mov	lr, r3
 800357a:	4770      	bx	lr

0800357c <_fini>:
 800357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357e:	bf00      	nop
 8003580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003582:	bc08      	pop	{r3}
 8003584:	469e      	mov	lr, r3
 8003586:	4770      	bx	lr
