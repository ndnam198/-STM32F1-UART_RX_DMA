
UART_RX_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003084  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003190  08003190  00013190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800327c  0800327c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800327c  0800327c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800327c  0800327c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800327c  0800327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003280  08003280  00013280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000070  080032f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  080032f4  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c62c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002274  00000000  00000000  0002c6c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c90  00000000  00000000  0002e940  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b78  00000000  00000000  0002f5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001666c  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c04c  00000000  00000000  000467b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00076d09  00000000  00000000  00052800  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c9509  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000368c  00000000  00000000  000c9584  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003178 	.word	0x08003178

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003178 	.word	0x08003178

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000166:	683b      	ldr	r3, [r7, #0]
 8000168:	3b01      	subs	r3, #1
 800016a:	4a0a      	ldr	r2, [pc, #40]	; (8000194 <LL_DMA_EnableChannel+0x38>)
 800016c:	5cd3      	ldrb	r3, [r2, r3]
 800016e:	461a      	mov	r2, r3
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	4413      	add	r3, r2
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	683a      	ldr	r2, [r7, #0]
 8000178:	3a01      	subs	r2, #1
 800017a:	4906      	ldr	r1, [pc, #24]	; (8000194 <LL_DMA_EnableChannel+0x38>)
 800017c:	5c8a      	ldrb	r2, [r1, r2]
 800017e:	4611      	mov	r1, r2
 8000180:	687a      	ldr	r2, [r7, #4]
 8000182:	440a      	add	r2, r1
 8000184:	f043 0301 	orr.w	r3, r3, #1
 8000188:	6013      	str	r3, [r2, #0]
}
 800018a:	bf00      	nop
 800018c:	370c      	adds	r7, #12
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	08003218 	.word	0x08003218

08000198 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000198:	b480      	push	{r7}
 800019a:	b083      	sub	sp, #12
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80001a2:	683b      	ldr	r3, [r7, #0]
 80001a4:	3b01      	subs	r3, #1
 80001a6:	4a06      	ldr	r2, [pc, #24]	; (80001c0 <LL_DMA_GetDataLength+0x28>)
 80001a8:	5cd3      	ldrb	r3, [r2, r3]
 80001aa:	461a      	mov	r2, r3
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	4413      	add	r3, r2
 80001b0:	685b      	ldr	r3, [r3, #4]
 80001b2:	b29b      	uxth	r3, r3
                   DMA_CNDTR_NDT));
}
 80001b4:	4618      	mov	r0, r3
 80001b6:	370c      	adds	r7, #12
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	08003218 	.word	0x08003218

080001c4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
 80001cc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80001ce:	683b      	ldr	r3, [r7, #0]
 80001d0:	3b01      	subs	r3, #1
 80001d2:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <LL_DMA_EnableIT_TC+0x38>)
 80001d4:	5cd3      	ldrb	r3, [r2, r3]
 80001d6:	461a      	mov	r2, r3
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4413      	add	r3, r2
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	683a      	ldr	r2, [r7, #0]
 80001e0:	3a01      	subs	r2, #1
 80001e2:	4906      	ldr	r1, [pc, #24]	; (80001fc <LL_DMA_EnableIT_TC+0x38>)
 80001e4:	5c8a      	ldrb	r2, [r1, r2]
 80001e6:	4611      	mov	r1, r2
 80001e8:	687a      	ldr	r2, [r7, #4]
 80001ea:	440a      	add	r2, r1
 80001ec:	f043 0302 	orr.w	r3, r3, #2
 80001f0:	6013      	str	r3, [r2, #0]
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	08003218 	.word	0x08003218

08000200 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	3b01      	subs	r3, #1
 800020e:	4a0a      	ldr	r2, [pc, #40]	; (8000238 <LL_DMA_EnableIT_HT+0x38>)
 8000210:	5cd3      	ldrb	r3, [r2, r3]
 8000212:	461a      	mov	r2, r3
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4413      	add	r3, r2
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	683a      	ldr	r2, [r7, #0]
 800021c:	3a01      	subs	r2, #1
 800021e:	4906      	ldr	r1, [pc, #24]	; (8000238 <LL_DMA_EnableIT_HT+0x38>)
 8000220:	5c8a      	ldrb	r2, [r1, r2]
 8000222:	4611      	mov	r1, r2
 8000224:	687a      	ldr	r2, [r7, #4]
 8000226:	440a      	add	r2, r1
 8000228:	f043 0304 	orr.w	r3, r3, #4
 800022c:	6013      	str	r3, [r2, #0]
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	08003218 	.word	0x08003218

0800023c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	60da      	str	r2, [r3, #12]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr

0800025a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800025a:	b480      	push	{r7}
 800025c:	b083      	sub	sp, #12
 800025e:	af00      	add	r7, sp, #0
 8000260:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	691b      	ldr	r3, [r3, #16]
 8000266:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	615a      	str	r2, [r3, #20]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000294:	2b40      	cmp	r3, #64	; 0x40
 8000296:	bf0c      	ite	eq
 8000298:	2301      	moveq	r3, #1
 800029a:	2300      	movne	r3, #0
 800029c:	b2db      	uxtb	r3, r3
}
 800029e:	4618      	mov	r0, r3
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	f043 0210 	orr.w	r2, r3, #16
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	60da      	str	r2, [r3, #12]
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr

080002c6 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80002c6:	b480      	push	{r7}
 80002c8:	b083      	sub	sp, #12
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	615a      	str	r2, [r3, #20]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr

080002e4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80002f0:	78fa      	ldrb	r2, [r7, #3]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	605a      	str	r2, [r3, #4]
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr

08000300 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800030a:	695a      	ldr	r2, [r3, #20]
 800030c:	4907      	ldr	r1, [pc, #28]	; (800032c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4313      	orrs	r3, r2
 8000312:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000316:	695a      	ldr	r2, [r3, #20]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4013      	ands	r3, r2
 800031c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800031e:	68fb      	ldr	r3, [r7, #12]
}
 8000320:	bf00      	nop
 8000322:	3714      	adds	r7, #20
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000

08000330 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000330:	b480      	push	{r7}
 8000332:	b085      	sub	sp, #20
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <LL_APB1_GRP1_EnableClock+0x2c>)
 800033a:	69da      	ldr	r2, [r3, #28]
 800033c:	4907      	ldr	r1, [pc, #28]	; (800035c <LL_APB1_GRP1_EnableClock+0x2c>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4313      	orrs	r3, r2
 8000342:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000346:	69da      	ldr	r2, [r3, #28]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4013      	ands	r3, r2
 800034c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800034e:	68fb      	ldr	r3, [r7, #12]
}
 8000350:	bf00      	nop
 8000352:	3714      	adds	r7, #20
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000

08000360 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <LL_APB2_GRP1_EnableClock+0x2c>)
 800036a:	699a      	ldr	r2, [r3, #24]
 800036c:	4907      	ldr	r1, [pc, #28]	; (800038c <LL_APB2_GRP1_EnableClock+0x2c>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4313      	orrs	r3, r2
 8000372:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000376:	699a      	ldr	r2, [r3, #24]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4013      	ands	r3, r2
 800037c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800037e:	68fb      	ldr	r3, [r7, #12]
}
 8000380:	bf00      	nop
 8000382:	3714      	adds	r7, #20
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40021000 	.word	0x40021000

08000390 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000390:	b5b0      	push	{r4, r5, r7, lr}
 8000392:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000394:	f000 fda2 	bl	8000edc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000398:	f000 f85e 	bl	8000458 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800039c:	f000 f970 	bl	8000680 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80003a0:	f000 f8a0 	bl	80004e4 <MX_USART2_UART_Init>
	offAllLed;
 80003a4:	2201      	movs	r2, #1
 80003a6:	2120      	movs	r1, #32
 80003a8:	4824      	ldr	r0, [pc, #144]	; (800043c <main+0xac>)
 80003aa:	f001 f825 	bl	80013f8 <HAL_GPIO_WritePin>
 80003ae:	2201      	movs	r2, #1
 80003b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003b4:	4822      	ldr	r0, [pc, #136]	; (8000440 <main+0xb0>)
 80003b6:	f001 f81f 	bl	80013f8 <HAL_GPIO_WritePin>
 80003ba:	2201      	movs	r2, #1
 80003bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c0:	481f      	ldr	r0, [pc, #124]	; (8000440 <main+0xb0>)
 80003c2:	f001 f819 	bl	80013f8 <HAL_GPIO_WritePin>
 80003c6:	2201      	movs	r2, #1
 80003c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003cc:	481b      	ldr	r0, [pc, #108]	; (800043c <main+0xac>)
 80003ce:	f001 f813 	bl	80013f8 <HAL_GPIO_WritePin>
	/* USER CODE BEGIN 2 */
	if(xErrorCount != 0){
 80003d2:	4b1c      	ldr	r3, [pc, #112]	; (8000444 <main+0xb4>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d017      	beq.n	800040a <main+0x7a>
		printf("Initialize failed\r\n");
 80003da:	4a1b      	ldr	r2, [pc, #108]	; (8000448 <main+0xb8>)
 80003dc:	4b1b      	ldr	r3, [pc, #108]	; (800044c <main+0xbc>)
 80003de:	4615      	mov	r5, r2
 80003e0:	461c      	mov	r4, r3
 80003e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003e4:	6028      	str	r0, [r5, #0]
 80003e6:	6069      	str	r1, [r5, #4]
 80003e8:	60aa      	str	r2, [r5, #8]
 80003ea:	60eb      	str	r3, [r5, #12]
 80003ec:	6820      	ldr	r0, [r4, #0]
 80003ee:	6128      	str	r0, [r5, #16]
 80003f0:	4915      	ldr	r1, [pc, #84]	; (8000448 <main+0xb8>)
 80003f2:	4817      	ldr	r0, [pc, #92]	; (8000450 <main+0xc0>)
 80003f4:	f000 fa94 	bl	8000920 <vUARTSend>
		printf(&xErrorCount);
 80003f8:	4912      	ldr	r1, [pc, #72]	; (8000444 <main+0xb4>)
 80003fa:	4813      	ldr	r0, [pc, #76]	; (8000448 <main+0xb8>)
 80003fc:	f002 fac2 	bl	8002984 <strcpy>
 8000400:	4911      	ldr	r1, [pc, #68]	; (8000448 <main+0xb8>)
 8000402:	4813      	ldr	r0, [pc, #76]	; (8000450 <main+0xc0>)
 8000404:	f000 fa8c 	bl	8000920 <vUARTSend>
 8000408:	e00f      	b.n	800042a <main+0x9a>
	}
	else{
		printf("Initialize successful\r\n");
 800040a:	4a0f      	ldr	r2, [pc, #60]	; (8000448 <main+0xb8>)
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <main+0xc4>)
 800040e:	4615      	mov	r5, r2
 8000410:	461c      	mov	r4, r3
 8000412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000414:	6028      	str	r0, [r5, #0]
 8000416:	6069      	str	r1, [r5, #4]
 8000418:	60aa      	str	r2, [r5, #8]
 800041a:	60eb      	str	r3, [r5, #12]
 800041c:	cc03      	ldmia	r4!, {r0, r1}
 800041e:	6128      	str	r0, [r5, #16]
 8000420:	6169      	str	r1, [r5, #20]
 8000422:	4909      	ldr	r1, [pc, #36]	; (8000448 <main+0xb8>)
 8000424:	480a      	ldr	r0, [pc, #40]	; (8000450 <main+0xc0>)
 8000426:	f000 fa7b 	bl	8000920 <vUARTSend>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		toggleLed4;
 800042a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800042e:	4803      	ldr	r0, [pc, #12]	; (800043c <main+0xac>)
 8000430:	f000 fffa 	bl	8001428 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8000434:	20c8      	movs	r0, #200	; 0xc8
 8000436:	f000 fd83 	bl	8000f40 <HAL_Delay>
		toggleLed4;
 800043a:	e7f6      	b.n	800042a <main+0x9a>
 800043c:	40010c00 	.word	0x40010c00
 8000440:	40010800 	.word	0x40010800
 8000444:	2000008c 	.word	0x2000008c
 8000448:	200000a8 	.word	0x200000a8
 800044c:	08003190 	.word	0x08003190
 8000450:	40004400 	.word	0x40004400
 8000454:	080031a4 	.word	0x080031a4

08000458 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b090      	sub	sp, #64	; 0x40
 800045c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045e:	f107 0318 	add.w	r3, r7, #24
 8000462:	2228      	movs	r2, #40	; 0x28
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f002 fa64 	bl	8002934 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800047a:	2301      	movs	r3, #1
 800047c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 800047e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000482:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;
 8000488:	2301      	movs	r3, #1
 800048a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 800048c:	2302      	movs	r3, #2
 800048e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8000490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000494:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL     = RCC_PLL_MUL9;
 8000496:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800049a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049c:	f107 0318 	add.w	r3, r7, #24
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 fffb 	bl	800149c <HAL_RCC_OscConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0x58>
	{
		Error_Handler();
 80004ac:	f000 fa12 	bl	80008d4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80004b0:	230f      	movs	r3, #15
 80004b2:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 80004b4:	2302      	movs	r3, #2
 80004b6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2102      	movs	r1, #2
 80004ca:	4618      	mov	r0, r3
 80004cc:	f001 fa66 	bl	800199c <HAL_RCC_ClockConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0x82>
	{
		Error_Handler();
 80004d6:	f000 f9fd 	bl	80008d4 <Error_Handler>
	}
}
 80004da:	bf00      	nop
 80004dc:	3740      	adds	r7, #64	; 0x40
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b098      	sub	sp, #96	; 0x60
 80004e8:	af00      	add	r7, sp, #0
	uint32_t xStatus = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	65fb      	str	r3, [r7, #92]	; 0x5c
	/* USER CODE BEGIN USART2_Init 0 */
	// LL_DMA_InitTypeDef DMA_TX_Handle = {0};
	LL_DMA_InitTypeDef DMA_RX_Handle = {0};
 80004ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004f2:	2228      	movs	r2, #40	; 0x28
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 fa1c 	bl	8002934 <memset>
	/* USER CODE END USART2_Init 0 */
	LL_USART_InitTypeDef USART_InitStruct = {0};
 80004fc:	f107 0318 	add.w	r3, r7, #24
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]
 800050c:	615a      	str	r2, [r3, #20]
 800050e:	619a      	str	r2, [r3, #24]
	LL_GPIO_InitTypeDef  GPIO_InitStruct  = {0};
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]


	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800051e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000522:	f7ff ff05 	bl	8000330 <LL_APB1_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000526:	2004      	movs	r0, #4
 8000528:	f7ff ff1a 	bl	8000360 <LL_APB2_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800052c:	2001      	movs	r0, #1
 800052e:	f7ff fee7 	bl	8000300 <LL_AHB1_GRP1_EnableClock>

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000532:	2003      	movs	r0, #3
 8000534:	f000 fdd0 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>
	/**USART2 GPIO Configuration
	 PA2   ------> USART2_TX
	 PA3   ------> USART2_RX
	 */
	GPIO_InitStruct.Pin        = LL_GPIO_PIN_2;
 8000538:	f240 4304 	movw	r3, #1028	; 0x404
 800053c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode       = LL_GPIO_MODE_ALTERNATE;
 800053e:	2309      	movs	r3, #9
 8000540:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed      = LL_GPIO_SPEED_FREQ_HIGH;
 8000542:	2303      	movs	r3, #3
 8000544:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
	xStatus = LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	4619      	mov	r1, r3
 800054e:	4846      	ldr	r0, [pc, #280]	; (8000668 <MX_USART2_UART_Init+0x184>)
 8000550:	f001 ff62 	bl	8002418 <LL_GPIO_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(xStatus != SUCCESS) xErrorCount++;
 8000558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800055a:	2b00      	cmp	r3, #0
 800055c:	d004      	beq.n	8000568 <MX_USART2_UART_Init+0x84>
 800055e:	4b43      	ldr	r3, [pc, #268]	; (800066c <MX_USART2_UART_Init+0x188>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	3301      	adds	r3, #1
 8000564:	4a41      	ldr	r2, [pc, #260]	; (800066c <MX_USART2_UART_Init+0x188>)
 8000566:	6013      	str	r3, [r2, #0]

	GPIO_InitStruct.Pin  = LL_GPIO_PIN_3;
 8000568:	f640 0308 	movw	r3, #2056	; 0x808
 800056c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800056e:	2304      	movs	r3, #4
 8000570:	60bb      	str	r3, [r7, #8]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	4619      	mov	r1, r3
 8000576:	483c      	ldr	r0, [pc, #240]	; (8000668 <MX_USART2_UART_Init+0x184>)
 8000578:	f001 ff4e 	bl	8002418 <LL_GPIO_Init>
	

	/* USART2 DMA Init */
	/* Configure DMA for USART RX */

	LL_DMA_StructInit(&DMA_RX_Handle);
 800057c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000580:	4618      	mov	r0, r3
 8000582:	f001 fe6a 	bl	800225a <LL_DMA_StructInit>
	DMA_RX_Handle.MemoryOrM2MDstAddress  = (uint32_t)UART_Buffer;
 8000586:	4b3a      	ldr	r3, [pc, #232]	; (8000670 <MX_USART2_UART_Init+0x18c>)
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_RX_Handle.PeriphOrM2MSrcAddress  = (uint32_t)&USART2->DR;
 800058a:	4b3a      	ldr	r3, [pc, #232]	; (8000674 <MX_USART2_UART_Init+0x190>)
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_RX_Handle.NbData                 = UART_RX_BUFFER_SIZE;
 800058e:	2364      	movs	r3, #100	; 0x64
 8000590:	657b      	str	r3, [r7, #84]	; 0x54
	DMA_RX_Handle.Priority               = LL_DMA_PRIORITY_VERYHIGH;
 8000592:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000596:	65bb      	str	r3, [r7, #88]	; 0x58
	DMA_RX_Handle.Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8000598:	2300      	movs	r3, #0
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_RX_Handle.Mode                   = LL_DMA_MODE_CIRCULAR;
 800059c:	2320      	movs	r3, #32
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_RX_Handle.MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_INCREMENT;
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	64bb      	str	r3, [r7, #72]	; 0x48
	DMA_RX_Handle.PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 80005a4:	2300      	movs	r3, #0
 80005a6:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_RX_Handle.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	DMA_RX_Handle.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	653b      	str	r3, [r7, #80]	; 0x50
	xStatus = LL_DMA_Init(DMA1, LL_DMA_CHANNEL_6, &DMA_RX_Handle);
 80005b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005b4:	461a      	mov	r2, r3
 80005b6:	2106      	movs	r1, #6
 80005b8:	482f      	ldr	r0, [pc, #188]	; (8000678 <MX_USART2_UART_Init+0x194>)
 80005ba:	f001 fe15 	bl	80021e8 <LL_DMA_Init>
 80005be:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(xStatus != SUCCESS) xErrorCount++;
 80005c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d004      	beq.n	80005d0 <MX_USART2_UART_Init+0xec>
 80005c6:	4b29      	ldr	r3, [pc, #164]	; (800066c <MX_USART2_UART_Init+0x188>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	4a27      	ldr	r2, [pc, #156]	; (800066c <MX_USART2_UART_Init+0x188>)
 80005ce:	6013      	str	r3, [r2, #0]
	
	/* Enable DMA1 Channel6 Tranmission Complete Interrupt DMA_CCR_TCIE & DMA_CCR_HTIE*/
	/* Enable HT & TC interrupts */
    LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 80005d0:	2106      	movs	r1, #6
 80005d2:	4829      	ldr	r0, [pc, #164]	; (8000678 <MX_USART2_UART_Init+0x194>)
 80005d4:	f7ff fe14 	bl	8000200 <LL_DMA_EnableIT_HT>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 80005d8:	2106      	movs	r1, #6
 80005da:	4827      	ldr	r0, [pc, #156]	; (8000678 <MX_USART2_UART_Init+0x194>)
 80005dc:	f7ff fdf2 	bl	80001c4 <LL_DMA_EnableIT_TC>

	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2100      	movs	r1, #0
 80005e4:	2010      	movs	r0, #16
 80005e6:	f000 fd82 	bl	80010ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80005ea:	2010      	movs	r0, #16
 80005ec:	f000 fd9b 	bl	8001126 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	// HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 2, 0);
	// HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);

	/* USER CODE BEGIN USART2_Init 1 */
	USART_InitStruct.BaudRate            = 115200;
 80005f0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80005f4:	61bb      	str	r3, [r7, #24]
	USART_InitStruct.DataWidth           = LL_USART_DATAWIDTH_8B;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.StopBits            = LL_USART_STOPBITS_1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	623b      	str	r3, [r7, #32]
	USART_InitStruct.Parity              = LL_USART_PARITY_NONE;
 80005fe:	2300      	movs	r3, #0
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.TransferDirection   = LL_USART_DIRECTION_TX_RX;
 8000602:	230c      	movs	r3, #12
 8000604:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000606:	2300      	movs	r3, #0
 8000608:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.OverSampling        = LL_USART_OVERSAMPLING_16;
 800060a:	2300      	movs	r3, #0
 800060c:	633b      	str	r3, [r7, #48]	; 0x30
	xStatus = LL_USART_Init(USART2, &USART_InitStruct);
 800060e:	f107 0318 	add.w	r3, r7, #24
 8000612:	4619      	mov	r1, r3
 8000614:	4819      	ldr	r0, [pc, #100]	; (800067c <MX_USART2_UART_Init+0x198>)
 8000616:	f002 f903 	bl	8002820 <LL_USART_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(xStatus != SUCCESS) xErrorCount++;
 800061e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000620:	2b00      	cmp	r3, #0
 8000622:	d004      	beq.n	800062e <MX_USART2_UART_Init+0x14a>
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_USART2_UART_Init+0x188>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	4a10      	ldr	r2, [pc, #64]	; (800066c <MX_USART2_UART_Init+0x188>)
 800062c:	6013      	str	r3, [r2, #0]

	LL_USART_ConfigAsyncMode(USART2);
 800062e:	4813      	ldr	r0, [pc, #76]	; (800067c <MX_USART2_UART_Init+0x198>)
 8000630:	f7ff fe13 	bl	800025a <LL_USART_ConfigAsyncMode>
	/* Enable RX DMA Request USART_CR3_DMAR*/
	LL_USART_EnableDMAReq_RX(USART2);
 8000634:	4811      	ldr	r0, [pc, #68]	; (800067c <MX_USART2_UART_Init+0x198>)
 8000636:	f7ff fe46 	bl	80002c6 <LL_USART_EnableDMAReq_RX>
	/* Enable IDLE Interrupt USART_CR1_IDLEIE*/
	LL_USART_EnableIT_IDLE(USART2);
 800063a:	4810      	ldr	r0, [pc, #64]	; (800067c <MX_USART2_UART_Init+0x198>)
 800063c:	f7ff fe34 	bl	80002a8 <LL_USART_EnableIT_IDLE>
	// /* Enable TX DMA Request USART_CR3_DMAT*/
	// LL_USART_EnableDMAReq_TX(USART2);
	/* USART2 interrupt Init */
	HAL_NVIC_SetPriority(USART2_IRQn,  0, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2100      	movs	r1, #0
 8000644:	2026      	movs	r0, #38	; 0x26
 8000646:	f000 fd52 	bl	80010ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800064a:	2026      	movs	r0, #38	; 0x26
 800064c:	f000 fd6b 	bl	8001126 <HAL_NVIC_EnableIRQ>

	/* Set bit USART_CR1_UE */
	LL_USART_Enable(USART2);
 8000650:	480a      	ldr	r0, [pc, #40]	; (800067c <MX_USART2_UART_Init+0x198>)
 8000652:	f7ff fdf3 	bl	800023c <LL_USART_Enable>
	/* Enable DMA USART RX Stream DMA_CCR_EN*/
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8000656:	2106      	movs	r1, #6
 8000658:	4807      	ldr	r0, [pc, #28]	; (8000678 <MX_USART2_UART_Init+0x194>)
 800065a:	f7ff fd7f 	bl	800015c <LL_DMA_EnableChannel>
}
 800065e:	bf00      	nop
 8000660:	3760      	adds	r7, #96	; 0x60
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40010800 	.word	0x40010800
 800066c:	2000008c 	.word	0x2000008c
 8000670:	2000010c 	.word	0x2000010c
 8000674:	40004404 	.word	0x40004404
 8000678:	40020000 	.word	0x40020000
 800067c:	40004400 	.word	0x40004400

08000680 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000694:	4b33      	ldr	r3, [pc, #204]	; (8000764 <MX_GPIO_Init+0xe4>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a32      	ldr	r2, [pc, #200]	; (8000764 <MX_GPIO_Init+0xe4>)
 800069a:	f043 0320 	orr.w	r3, r3, #32
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b30      	ldr	r3, [pc, #192]	; (8000764 <MX_GPIO_Init+0xe4>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0320 	and.w	r3, r3, #32
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <MX_GPIO_Init+0xe4>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a2c      	ldr	r2, [pc, #176]	; (8000764 <MX_GPIO_Init+0xe4>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <MX_GPIO_Init+0xe4>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0304 	and.w	r3, r3, #4
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006c4:	4b27      	ldr	r3, [pc, #156]	; (8000764 <MX_GPIO_Init+0xe4>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a26      	ldr	r2, [pc, #152]	; (8000764 <MX_GPIO_Init+0xe4>)
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b24      	ldr	r3, [pc, #144]	; (8000764 <MX_GPIO_Init+0xe4>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f003 0308 	and.w	r3, r3, #8
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, USER_LED_3_Pin | USER_LED_2_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80006e2:	4821      	ldr	r0, [pc, #132]	; (8000768 <MX_GPIO_Init+0xe8>)
 80006e4:	f000 fe88 	bl	80013f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, USER_LED_1_Pin | USER_LED_4_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 7190 	mov.w	r1, #288	; 0x120
 80006ee:	481f      	ldr	r0, [pc, #124]	; (800076c <MX_GPIO_Init+0xec>)
 80006f0:	f000 fe82 	bl	80013f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : BT_UP_Pin BT_CENTER_Pin BT_DOWN_Pin */
	GPIO_InitStruct.Pin = BT_UP_Pin | BT_CENTER_Pin | BT_DOWN_Pin;
 80006f4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80006f8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <MX_GPIO_Init+0xf0>)
 80006fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006fe:	2301      	movs	r3, #1
 8000700:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	4619      	mov	r1, r3
 8000708:	4817      	ldr	r0, [pc, #92]	; (8000768 <MX_GPIO_Init+0xe8>)
 800070a:	f000 fd1b 	bl	8001144 <HAL_GPIO_Init>

	/*Configure GPIO pins : USER_LED_3_Pin USER_LED_2_Pin */
	GPIO_InitStruct.Pin = USER_LED_3_Pin | USER_LED_2_Pin;
 800070e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000712:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2302      	movs	r3, #2
 800071e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	4619      	mov	r1, r3
 8000726:	4810      	ldr	r0, [pc, #64]	; (8000768 <MX_GPIO_Init+0xe8>)
 8000728:	f000 fd0c 	bl	8001144 <HAL_GPIO_Init>

	/*Configure GPIO pins : USER_LED_1_Pin USER_LED_4_Pin */
	GPIO_InitStruct.Pin = USER_LED_1_Pin | USER_LED_4_Pin;
 800072c:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000730:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2302      	movs	r3, #2
 800073c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	4619      	mov	r1, r3
 8000744:	4809      	ldr	r0, [pc, #36]	; (800076c <MX_GPIO_Init+0xec>)
 8000746:	f000 fcfd 	bl	8001144 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2102      	movs	r1, #2
 800074e:	2017      	movs	r0, #23
 8000750:	f000 fccd 	bl	80010ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000754:	2017      	movs	r0, #23
 8000756:	f000 fce6 	bl	8001126 <HAL_NVIC_EnableIRQ>
}
 800075a:	bf00      	nop
 800075c:	3720      	adds	r7, #32
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000
 8000768:	40010800 	.word	0x40010800
 800076c:	40010c00 	.word	0x40010c00
 8000770:	10210000 	.word	0x10210000

08000774 <vUSART_Check>:

/* USER CODE BEGIN 4 */
void vUSART_Check(void){
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
	static size_t old_pos;
    size_t pos;

    /* Calculate current position in buffer */
    pos = UART_RX_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 800077a:	2106      	movs	r1, #6
 800077c:	4827      	ldr	r0, [pc, #156]	; (800081c <vUSART_Check+0xa8>)
 800077e:	f7ff fd0b 	bl	8000198 <LL_DMA_GetDataLength>
 8000782:	4603      	mov	r3, r0
 8000784:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000788:	607b      	str	r3, [r7, #4]
    endln;
 800078a:	4925      	ldr	r1, [pc, #148]	; (8000820 <vUSART_Check+0xac>)
 800078c:	4825      	ldr	r0, [pc, #148]	; (8000824 <vUSART_Check+0xb0>)
 800078e:	f000 f8c7 	bl	8000920 <vUARTSend>
	sprintf((char*)aPos, "%d", pos);
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	4924      	ldr	r1, [pc, #144]	; (8000828 <vUSART_Check+0xb4>)
 8000796:	4825      	ldr	r0, [pc, #148]	; (800082c <vUSART_Check+0xb8>)
 8000798:	f002 f8d4 	bl	8002944 <siprintf>
    vUARTSend(USART2, (uint8_t*)aPos);
 800079c:	4923      	ldr	r1, [pc, #140]	; (800082c <vUSART_Check+0xb8>)
 800079e:	4821      	ldr	r0, [pc, #132]	; (8000824 <vUSART_Check+0xb0>)
 80007a0:	f000 f8be 	bl	8000920 <vUARTSend>
    endln;
 80007a4:	491e      	ldr	r1, [pc, #120]	; (8000820 <vUSART_Check+0xac>)
 80007a6:	481f      	ldr	r0, [pc, #124]	; (8000824 <vUSART_Check+0xb0>)
 80007a8:	f000 f8ba 	bl	8000920 <vUARTSend>
    if (pos != old_pos) {                       /* Check change in received data */
 80007ac:	4b20      	ldr	r3, [pc, #128]	; (8000830 <vUSART_Check+0xbc>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d023      	beq.n	80007fe <vUSART_Check+0x8a>
        if (pos > old_pos) {                    /* Current position is over previous one */
 80007b6:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <vUSART_Check+0xbc>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d90b      	bls.n	80007d8 <vUSART_Check+0x64>
            /* We are in "linear" mode */
            /* Process data directly by subtracting "pointers" */
            vUSART_ProcessData((uint8_t *)(UART_Buffer + old_pos), pos - old_pos);
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <vUSART_Check+0xbc>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a1b      	ldr	r2, [pc, #108]	; (8000834 <vUSART_Check+0xc0>)
 80007c6:	1898      	adds	r0, r3, r2
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <vUSART_Check+0xbc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	4619      	mov	r1, r3
 80007d2:	f000 f831 	bl	8000838 <vUSART_ProcessData>
 80007d6:	e012      	b.n	80007fe <vUSART_Check+0x8a>
        } else {
            /* We are in "overflow" mode */
            /* First process data to the end of buffer */
            vUSART_ProcessData((uint8_t *)(UART_Buffer + old_pos), UART_RX_BUFFER_SIZE - old_pos);
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <vUSART_Check+0xbc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a15      	ldr	r2, [pc, #84]	; (8000834 <vUSART_Check+0xc0>)
 80007de:	441a      	add	r2, r3
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <vUSART_Check+0xbc>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80007e8:	4619      	mov	r1, r3
 80007ea:	4610      	mov	r0, r2
 80007ec:	f000 f824 	bl	8000838 <vUSART_ProcessData>
            /* Check and continue with beginning of buffer */
            if (pos > 0) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d003      	beq.n	80007fe <vUSART_Check+0x8a>
                vUSART_ProcessData((uint8_t *)(UART_Buffer + 0), pos);
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	480e      	ldr	r0, [pc, #56]	; (8000834 <vUSART_Check+0xc0>)
 80007fa:	f000 f81d 	bl	8000838 <vUSART_ProcessData>
            }
        }
    }
    old_pos = pos;                              /* Save current position as old */
 80007fe:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <vUSART_Check+0xbc>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6013      	str	r3, [r2, #0]

    /* Check and manually update if we reached end of buffer */
    if (old_pos == UART_RX_BUFFER_SIZE) {
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <vUSART_Check+0xbc>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b64      	cmp	r3, #100	; 0x64
 800080a:	d102      	bne.n	8000812 <vUSART_Check+0x9e>
        old_pos = 0;
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <vUSART_Check+0xbc>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
    }
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40020000 	.word	0x40020000
 8000820:	080031bc 	.word	0x080031bc
 8000824:	40004400 	.word	0x40004400
 8000828:	080031c0 	.word	0x080031c0
 800082c:	20000090 	.word	0x20000090
 8000830:	20000098 	.word	0x20000098
 8000834:	2000010c 	.word	0x2000010c

08000838 <vUSART_ProcessData>:
 * \brief           Process received data over UART
 * \note            Either process them directly or copy to other bigger buffer
 * \param[in]       data: Data to process
 * \param[in]       len: Length in units of bytes
 */
void vUSART_ProcessData(uint8_t* data, size_t len) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
    const uint8_t* d = data;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	60fb      	str	r3, [r7, #12]
	uint32_t ulBlockTime = 1000;
 8000846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084a:	60bb      	str	r3, [r7, #8]
     * This function is called on DMA TC and HT events, as well as on UART IDLE (if enabled) line event.
     * 
     * For the sake of this example, function does a loop-back data over UART in polling mode.
     * Check ringbuff RX-based example for implementation with TX & RX DMA transfer.
     */
	toggleLed1;
 800084c:	2120      	movs	r1, #32
 800084e:	4816      	ldr	r0, [pc, #88]	; (80008a8 <vUSART_ProcessData+0x70>)
 8000850:	f000 fdea 	bl	8001428 <HAL_GPIO_TogglePin>
    for (; len > 0; --len, ++d) {
 8000854:	e019      	b.n	800088a <vUSART_ProcessData+0x52>
        LL_USART_TransmitData8(USART2, (uint8_t)*d);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	4619      	mov	r1, r3
 800085c:	4813      	ldr	r0, [pc, #76]	; (80008ac <vUSART_ProcessData+0x74>)
 800085e:	f7ff fd41 	bl	80002e4 <LL_USART_TransmitData8>
    	while (!LL_USART_IsActiveFlag_TC(USART2)) {
 8000862:	e004      	b.n	800086e <vUSART_ProcessData+0x36>
			if ((ulBlockTime--) == 0)
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	1e5a      	subs	r2, r3, #1
 8000868:	60ba      	str	r2, [r7, #8]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d006      	beq.n	800087c <vUSART_ProcessData+0x44>
    	while (!LL_USART_IsActiveFlag_TC(USART2)) {
 800086e:	480f      	ldr	r0, [pc, #60]	; (80008ac <vUSART_ProcessData+0x74>)
 8000870:	f7ff fd08 	bl	8000284 <LL_USART_IsActiveFlag_TC>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d0f4      	beq.n	8000864 <vUSART_ProcessData+0x2c>
 800087a:	e000      	b.n	800087e <vUSART_ProcessData+0x46>
				break;
 800087c:	bf00      	nop
    for (; len > 0; --len, ++d) {
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	3b01      	subs	r3, #1
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	3301      	adds	r3, #1
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1e2      	bne.n	8000856 <vUSART_ProcessData+0x1e>
		}
    }
	LL_USART_TransmitData8(USART2, (uint8_t)13);
 8000890:	210d      	movs	r1, #13
 8000892:	4806      	ldr	r0, [pc, #24]	; (80008ac <vUSART_ProcessData+0x74>)
 8000894:	f7ff fd26 	bl	80002e4 <LL_USART_TransmitData8>
	LL_USART_TransmitData8(USART2, (uint8_t)10);
 8000898:	210a      	movs	r1, #10
 800089a:	4804      	ldr	r0, [pc, #16]	; (80008ac <vUSART_ProcessData+0x74>)
 800089c:	f7ff fd22 	bl	80002e4 <LL_USART_TransmitData8>
}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40010c00 	.word	0x40010c00
 80008ac:	40004400 	.word	0x40004400

080008b0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d101      	bne.n	80008c6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 80008c2:	f000 fb21 	bl	8000f08 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40000800 	.word	0x40000800

080008d4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <LL_USART_IsActiveFlag_TC>:
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f0:	2b40      	cmp	r3, #64	; 0x40
 80008f2:	bf0c      	ite	eq
 80008f4:	2301      	moveq	r3, #1
 80008f6:	2300      	movne	r3, #0
 80008f8:	b2db      	uxtb	r3, r3
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <LL_USART_TransmitData8>:
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000910:	78fa      	ldrb	r2, [r7, #3]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	605a      	str	r2, [r3, #4]
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <vUARTSend>:
}
#endif /*  configHAL_UART */

#if defined(configLL_UART)

void vUARTSend(USART_TypeDef *USARTx, uint8_t *String) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
	uint32_t ulStringLen = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
	uint32_t ulBlockTime = 10000;
 8000932:	f242 7310 	movw	r3, #10000	; 0x2710
 8000936:	60fb      	str	r3, [r7, #12]
	ulStringLen = strlen((char*) String);
 8000938:	6838      	ldr	r0, [r7, #0]
 800093a:	f7ff fc07 	bl	800014c <strlen>
 800093e:	6178      	str	r0, [r7, #20]

	while (ulStringLen) {
 8000940:	e01a      	b.n	8000978 <vUARTSend+0x58>
		LL_USART_TransmitData8(USARTx, (uint8_t) String[i]);
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	4413      	add	r3, r2
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4619      	mov	r1, r3
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff ffd9 	bl	8000904 <LL_USART_TransmitData8>
		i++;
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	3301      	adds	r3, #1
 8000956:	613b      	str	r3, [r7, #16]
        ulStringLen--;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	3b01      	subs	r3, #1
 800095c:	617b      	str	r3, [r7, #20]
        /* Check if transfer 1 byte completed */
		while (!LL_USART_IsActiveFlag_TC(USARTx)) {
 800095e:	e005      	b.n	800096c <vUARTSend+0x4c>
			if ((ulBlockTime--) == 0)
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	1e5a      	subs	r2, r3, #1
 8000964:	60fa      	str	r2, [r7, #12]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d100      	bne.n	800096c <vUARTSend+0x4c>
				break;
 800096a:	e005      	b.n	8000978 <vUARTSend+0x58>
		while (!LL_USART_IsActiveFlag_TC(USARTx)) {
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ffb7 	bl	80008e0 <LL_USART_IsActiveFlag_TC>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d0f3      	beq.n	8000960 <vUARTSend+0x40>
	while (ulStringLen) {
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1e1      	bne.n	8000942 <vUARTSend+0x22>
		}
	}
}
 800097e:	bf00      	nop
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <HAL_MspInit+0x5c>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <HAL_MspInit+0x5c>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6193      	str	r3, [r2, #24]
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_MspInit+0x5c>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <HAL_MspInit+0x5c>)
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <HAL_MspInit+0x5c>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	61d3      	str	r3, [r2, #28]
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_MspInit+0x5c>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <HAL_MspInit+0x60>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <HAL_MspInit+0x60>)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40010000 	.word	0x40010000

080009ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	; 0x30
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	201e      	movs	r0, #30
 8000a02:	f000 fb74 	bl	80010ee <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a06:	201e      	movs	r0, #30
 8000a08:	f000 fb8d 	bl	8001126 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <HAL_InitTick+0xa0>)
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	4a1e      	ldr	r2, [pc, #120]	; (8000a8c <HAL_InitTick+0xa0>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	61d3      	str	r3, [r2, #28]
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <HAL_InitTick+0xa0>)
 8000a1a:	69db      	ldr	r3, [r3, #28]
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a24:	f107 0210 	add.w	r2, r7, #16
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 f91e 	bl	8001c70 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a34:	f001 f908 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a40:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <HAL_InitTick+0xa4>)
 8000a42:	fba2 2303 	umull	r2, r3, r2, r3
 8000a46:	0c9b      	lsrs	r3, r3, #18
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_InitTick+0xa8>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <HAL_InitTick+0xac>)
 8000a50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <HAL_InitTick+0xa8>)
 8000a54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a58:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_InitTick+0xa8>)
 8000a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a5e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_InitTick+0xa8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_InitTick+0xa8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <HAL_InitTick+0xa8>)
 8000a6e:	f001 f94d 	bl	8001d0c <HAL_TIM_Base_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d104      	bne.n	8000a82 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000a78:	4806      	ldr	r0, [pc, #24]	; (8000a94 <HAL_InitTick+0xa8>)
 8000a7a:	f001 f97b 	bl	8001d74 <HAL_TIM_Base_Start_IT>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	e000      	b.n	8000a84 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3730      	adds	r7, #48	; 0x30
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	431bde83 	.word	0x431bde83
 8000a94:	20000170 	.word	0x20000170
 8000a98:	40000800 	.word	0x40000800

08000a9c <LL_DMA_IsActiveFlag_TC6>:
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000ab0:	bf0c      	ite	eq
 8000ab2:	2301      	moveq	r3, #1
 8000ab4:	2300      	movne	r3, #0
 8000ab6:	b2db      	uxtb	r3, r3
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr

08000ac2 <LL_DMA_IsActiveFlag_TC7>:
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ad2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000ad6:	bf0c      	ite	eq
 8000ad8:	2301      	moveq	r3, #1
 8000ada:	2300      	movne	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <LL_DMA_IsActiveFlag_HT6>:
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000afc:	bf0c      	ite	eq
 8000afe:	2301      	moveq	r3, #1
 8000b00:	2300      	movne	r3, #0
 8000b02:	b2db      	uxtb	r3, r3
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <LL_DMA_ClearFlag_TC6>:
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b1c:	605a      	str	r2, [r3, #4]
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <LL_DMA_ClearFlag_HT6>:
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b36:	605a      	str	r2, [r3, #4]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
	...

08000b44 <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	4a09      	ldr	r2, [pc, #36]	; (8000b78 <LL_DMA_IsEnabledIT_TC+0x34>)
 8000b54:	5cd3      	ldrb	r3, [r2, r3]
 8000b56:	461a      	mov	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f003 0302 	and.w	r3, r3, #2
                   DMA_CCR_TCIE) == (DMA_CCR_TCIE));
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	bf0c      	ite	eq
 8000b66:	2301      	moveq	r3, #1
 8000b68:	2300      	movne	r3, #0
 8000b6a:	b2db      	uxtb	r3, r3
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	08003220 	.word	0x08003220

08000b7c <LL_DMA_IsEnabledIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <LL_DMA_IsEnabledIT_HT+0x34>)
 8000b8c:	5cd3      	ldrb	r3, [r2, r3]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4413      	add	r3, r2
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f003 0304 	and.w	r3, r3, #4
                   DMA_CCR_HTIE) == (DMA_CCR_HTIE));
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf0c      	ite	eq
 8000b9e:	2301      	moveq	r3, #1
 8000ba0:	2300      	movne	r3, #0
 8000ba2:	b2db      	uxtb	r3, r3
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	08003220 	.word	0x08003220

08000bb4 <LL_USART_IsActiveFlag_IDLE>:
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f003 0310 	and.w	r3, r3, #16
 8000bc4:	2b10      	cmp	r3, #16
 8000bc6:	bf0c      	ite	eq
 8000bc8:	2301      	moveq	r3, #1
 8000bca:	2300      	movne	r3, #0
 8000bcc:	b2db      	uxtb	r3, r3
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <LL_USART_ClearFlag_IDLE>:
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000be6:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000bee:	68fb      	ldr	r3, [r7, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr

08000bfa <LL_USART_IsEnabledIT_IDLE>:
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	f003 0310 	and.w	r3, r3, #16
 8000c0a:	2b10      	cmp	r3, #16
 8000c0c:	bf0c      	ite	eq
 8000c0e:	2301      	moveq	r3, #1
 8000c10:	2300      	movne	r3, #0
 8000c12:	b2db      	uxtb	r3, r3
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr

08000c2a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler+0x4>

08000c36 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c42 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr

08000c4e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr

08000c5a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

	/* USER CODE END SysTick_IRQn 0 */
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
	...

08000c74 <DMA1_Channel6_IRQHandler>:

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void)
{
 8000c74:	b5b0      	push	{r4, r5, r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
 	if (LL_DMA_IsEnabledIT_HT(DMA1, LL_DMA_CHANNEL_6) && LL_DMA_IsActiveFlag_HT6(DMA1)) {
 8000c78:	2106      	movs	r1, #6
 8000c7a:	4824      	ldr	r0, [pc, #144]	; (8000d0c <DMA1_Channel6_IRQHandler+0x98>)
 8000c7c:	f7ff ff7e 	bl	8000b7c <LL_DMA_IsEnabledIT_HT>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d01c      	beq.n	8000cc0 <DMA1_Channel6_IRQHandler+0x4c>
 8000c86:	4821      	ldr	r0, [pc, #132]	; (8000d0c <DMA1_Channel6_IRQHandler+0x98>)
 8000c88:	f7ff ff2e 	bl	8000ae8 <LL_DMA_IsActiveFlag_HT6>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d016      	beq.n	8000cc0 <DMA1_Channel6_IRQHandler+0x4c>
        LL_DMA_ClearFlag_HT6(DMA1);             /* Clear half-transfer complete flag */
 8000c92:	481e      	ldr	r0, [pc, #120]	; (8000d0c <DMA1_Channel6_IRQHandler+0x98>)
 8000c94:	f7ff ff48 	bl	8000b28 <LL_DMA_ClearFlag_HT6>
		printf("-------HT-------\r\n")
 8000c98:	4a1d      	ldr	r2, [pc, #116]	; (8000d10 <DMA1_Channel6_IRQHandler+0x9c>)
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <DMA1_Channel6_IRQHandler+0xa0>)
 8000c9c:	4615      	mov	r5, r2
 8000c9e:	461c      	mov	r4, r3
 8000ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ca2:	6028      	str	r0, [r5, #0]
 8000ca4:	6069      	str	r1, [r5, #4]
 8000ca6:	60aa      	str	r2, [r5, #8]
 8000ca8:	60eb      	str	r3, [r5, #12]
 8000caa:	8823      	ldrh	r3, [r4, #0]
 8000cac:	78a2      	ldrb	r2, [r4, #2]
 8000cae:	822b      	strh	r3, [r5, #16]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	74ab      	strb	r3, [r5, #18]
 8000cb4:	4916      	ldr	r1, [pc, #88]	; (8000d10 <DMA1_Channel6_IRQHandler+0x9c>)
 8000cb6:	4818      	ldr	r0, [pc, #96]	; (8000d18 <DMA1_Channel6_IRQHandler+0xa4>)
 8000cb8:	f7ff fe32 	bl	8000920 <vUARTSend>
        vUSART_Check();                       /* Check for data to process */
 8000cbc:	f7ff fd5a 	bl	8000774 <vUSART_Check>
    }

    /* Check transfer-complete interrupt */
    if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_6) && LL_DMA_IsActiveFlag_TC6(DMA1)) {
 8000cc0:	2106      	movs	r1, #6
 8000cc2:	4812      	ldr	r0, [pc, #72]	; (8000d0c <DMA1_Channel6_IRQHandler+0x98>)
 8000cc4:	f7ff ff3e 	bl	8000b44 <LL_DMA_IsEnabledIT_TC>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d01c      	beq.n	8000d08 <DMA1_Channel6_IRQHandler+0x94>
 8000cce:	480f      	ldr	r0, [pc, #60]	; (8000d0c <DMA1_Channel6_IRQHandler+0x98>)
 8000cd0:	f7ff fee4 	bl	8000a9c <LL_DMA_IsActiveFlag_TC6>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d016      	beq.n	8000d08 <DMA1_Channel6_IRQHandler+0x94>
        LL_DMA_ClearFlag_TC6(DMA1);             /* Clear transfer complete flag */
 8000cda:	480c      	ldr	r0, [pc, #48]	; (8000d0c <DMA1_Channel6_IRQHandler+0x98>)
 8000cdc:	f7ff ff17 	bl	8000b0e <LL_DMA_ClearFlag_TC6>
		printf("-------TC-------\r\n")
 8000ce0:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <DMA1_Channel6_IRQHandler+0x9c>)
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <DMA1_Channel6_IRQHandler+0xa8>)
 8000ce4:	4615      	mov	r5, r2
 8000ce6:	461c      	mov	r4, r3
 8000ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cea:	6028      	str	r0, [r5, #0]
 8000cec:	6069      	str	r1, [r5, #4]
 8000cee:	60aa      	str	r2, [r5, #8]
 8000cf0:	60eb      	str	r3, [r5, #12]
 8000cf2:	8823      	ldrh	r3, [r4, #0]
 8000cf4:	78a2      	ldrb	r2, [r4, #2]
 8000cf6:	822b      	strh	r3, [r5, #16]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	74ab      	strb	r3, [r5, #18]
 8000cfc:	4904      	ldr	r1, [pc, #16]	; (8000d10 <DMA1_Channel6_IRQHandler+0x9c>)
 8000cfe:	4806      	ldr	r0, [pc, #24]	; (8000d18 <DMA1_Channel6_IRQHandler+0xa4>)
 8000d00:	f7ff fe0e 	bl	8000920 <vUARTSend>
        vUSART_Check();                       /* Check for data to process */
 8000d04:	f7ff fd36 	bl	8000774 <vUSART_Check>
	// 	DMA1_Channel6->CNDTR = UART_RX_BUFFER_SIZE; /* Set number of bytes to receive */
	// 	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6); /* Start DMA transfer */
	// }

	/* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	200000a8 	.word	0x200000a8
 8000d14:	080031c4 	.word	0x080031c4
 8000d18:	40004400 	.word	0x40004400
 8000d1c:	080031d8 	.word	0x080031d8

08000d20 <DMA1_Channel7_IRQHandler>:

/**
 * @brief This function handles DMA1 channel7 global interrupt.
 */
void DMA1_Channel7_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if (LL_DMA_IsActiveFlag_TC7(DMA1))
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <DMA1_Channel7_IRQHandler+0x10>)
 8000d26:	f7ff fecc 	bl	8000ac2 <LL_DMA_IsActiveFlag_TC7>
	/* USER CODE END DMA1_Channel7_IRQn 0 */

	/* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

	/* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40020000 	.word	0x40020000

08000d34 <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000d38:	2040      	movs	r0, #64	; 0x40
 8000d3a:	f000 fb8d 	bl	8001458 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000d3e:	2080      	movs	r0, #128	; 0x80
 8000d40:	f000 fb8a 	bl	8001458 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000d44:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d48:	f000 fb86 	bl	8001458 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <TIM4_IRQHandler>:

/**
 * @brief This function handles TIM4 global interrupt.
 */
void TIM4_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM4_IRQn 0 */

	/* USER CODE END TIM4_IRQn 0 */
	HAL_TIM_IRQHandler(&htim4);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <TIM4_IRQHandler+0x10>)
 8000d56:	f001 f830 	bl	8001dba <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM4_IRQn 1 */

	/* USER CODE END TIM4_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000170 	.word	0x20000170

08000d64 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 8000d64:	b5b0      	push	{r4, r5, r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */
	if (LL_USART_IsEnabledIT_IDLE(USART2) && LL_USART_IsActiveFlag_IDLE(USART2)) {
 8000d68:	4811      	ldr	r0, [pc, #68]	; (8000db0 <USART2_IRQHandler+0x4c>)
 8000d6a:	f7ff ff46 	bl	8000bfa <LL_USART_IsEnabledIT_IDLE>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d01b      	beq.n	8000dac <USART2_IRQHandler+0x48>
 8000d74:	480e      	ldr	r0, [pc, #56]	; (8000db0 <USART2_IRQHandler+0x4c>)
 8000d76:	f7ff ff1d 	bl	8000bb4 <LL_USART_IsActiveFlag_IDLE>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d015      	beq.n	8000dac <USART2_IRQHandler+0x48>
		LL_USART_ClearFlag_IDLE(USART2);        /* Clear IDLE line flag */
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <USART2_IRQHandler+0x4c>)
 8000d82:	f7ff ff29 	bl	8000bd8 <LL_USART_ClearFlag_IDLE>
		printf("-------IDLE-------\r\n")
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <USART2_IRQHandler+0x50>)
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <USART2_IRQHandler+0x54>)
 8000d8a:	4615      	mov	r5, r2
 8000d8c:	461c      	mov	r4, r3
 8000d8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d90:	6028      	str	r0, [r5, #0]
 8000d92:	6069      	str	r1, [r5, #4]
 8000d94:	60aa      	str	r2, [r5, #8]
 8000d96:	60eb      	str	r3, [r5, #12]
 8000d98:	6820      	ldr	r0, [r4, #0]
 8000d9a:	6128      	str	r0, [r5, #16]
 8000d9c:	7923      	ldrb	r3, [r4, #4]
 8000d9e:	752b      	strb	r3, [r5, #20]
 8000da0:	4904      	ldr	r1, [pc, #16]	; (8000db4 <USART2_IRQHandler+0x50>)
 8000da2:	4803      	ldr	r0, [pc, #12]	; (8000db0 <USART2_IRQHandler+0x4c>)
 8000da4:	f7ff fdbc 	bl	8000920 <vUARTSend>
		vUSART_Check();                       /* Check for data to process */
 8000da8:	f7ff fce4 	bl	8000774 <vUSART_Check>
    }
	/* USER CODE END USART2_IRQn 0 */
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	bdb0      	pop	{r4, r5, r7, pc}
 8000db0:	40004400 	.word	0x40004400
 8000db4:	200000a8 	.word	0x200000a8
 8000db8:	080031ec 	.word	0x080031ec

08000dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc4:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <_sbrk+0x5c>)
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <_sbrk+0x60>)
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <_sbrk+0x64>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <_sbrk+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d207      	bcs.n	8000dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dec:	f001 fd78 	bl	80028e0 <__errno>
 8000df0:	4602      	mov	r2, r0
 8000df2:	230c      	movs	r3, #12
 8000df4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	e009      	b.n	8000e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <_sbrk+0x64>)
 8000e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20005000 	.word	0x20005000
 8000e1c:	00000400 	.word	0x00000400
 8000e20:	2000009c 	.word	0x2000009c
 8000e24:	200001b8 	.word	0x200001b8

08000e28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <SystemInit+0x5c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <SystemInit+0x5c>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <SystemInit+0x5c>)
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	4911      	ldr	r1, [pc, #68]	; (8000e84 <SystemInit+0x5c>)
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <SystemInit+0x60>)
 8000e40:	4013      	ands	r3, r2
 8000e42:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <SystemInit+0x5c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <SystemInit+0x5c>)
 8000e4a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e52:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <SystemInit+0x5c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <SystemInit+0x5c>)
 8000e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <SystemInit+0x5c>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <SystemInit+0x5c>)
 8000e66:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000e6a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <SystemInit+0x5c>)
 8000e6e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000e72:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SystemInit+0x64>)
 8000e76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e7a:	609a      	str	r2, [r3, #8]
#endif 
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	40021000 	.word	0x40021000
 8000e88:	f8ff0000 	.word	0xf8ff0000
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e90:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e92:	e003      	b.n	8000e9c <LoopCopyDataInit>

08000e94 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e96:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e98:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e9a:	3104      	adds	r1, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e9c:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ea0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ea2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ea4:	d3f6      	bcc.n	8000e94 <CopyDataInit>
  ldr r2, =_sbss
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ea8:	e002      	b.n	8000eb0 <LoopFillZerobss>

08000eaa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000eac:	f842 3b04 	str.w	r3, [r2], #4

08000eb0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000eb2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000eb4:	d3f9      	bcc.n	8000eaa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eb6:	f7ff ffb7 	bl	8000e28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eba:	f001 fd17 	bl	80028ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ebe:	f7ff fa67 	bl	8000390 <main>
  bx lr
 8000ec2:	4770      	bx	lr
  ldr r3, =_sidata
 8000ec4:	08003284 	.word	0x08003284
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ecc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000ed0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000ed4:	200001b8 	.word	0x200001b8

08000ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC1_2_IRQHandler>
	...

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_Init+0x28>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_Init+0x28>)
 8000ee6:	f043 0310 	orr.w	r3, r3, #16
 8000eea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f8f3 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff fd7a 	bl	80009ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fd46 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40022000 	.word	0x40022000

08000f08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <HAL_IncTick+0x1c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_IncTick+0x20>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a03      	ldr	r2, [pc, #12]	; (8000f28 <HAL_IncTick+0x20>)
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	20000008 	.word	0x20000008
 8000f28:	200001b0 	.word	0x200001b0

08000f2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b02      	ldr	r3, [pc, #8]	; (8000f3c <HAL_GetTick+0x10>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	200001b0 	.word	0x200001b0

08000f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff fff0 	bl	8000f2c <HAL_GetTick>
 8000f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f58:	d005      	beq.n	8000f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <HAL_Delay+0x40>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f66:	bf00      	nop
 8000f68:	f7ff ffe0 	bl	8000f2c <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d8f7      	bhi.n	8000f68 <HAL_Delay+0x28>
  {
  }
}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000008 	.word	0x20000008

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	db0b      	blt.n	8001012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f003 021f 	and.w	r2, r3, #31
 8001000:	4906      	ldr	r1, [pc, #24]	; (800101c <__NVIC_EnableIRQ+0x34>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	2001      	movs	r0, #1
 800100a:	fa00 f202 	lsl.w	r2, r0, r2
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff4f 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff ff64 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ffb2 	bl	8001074 <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff81 	bl	8001020 <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff57 	bl	8000fe8 <__NVIC_EnableIRQ>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	b480      	push	{r7}
 8001146:	b08b      	sub	sp, #44	; 0x2c
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001156:	e127      	b.n	80013a8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001158:	2201      	movs	r2, #1
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	429a      	cmp	r2, r3
 8001172:	f040 8116 	bne.w	80013a2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b12      	cmp	r3, #18
 800117c:	d034      	beq.n	80011e8 <HAL_GPIO_Init+0xa4>
 800117e:	2b12      	cmp	r3, #18
 8001180:	d80d      	bhi.n	800119e <HAL_GPIO_Init+0x5a>
 8001182:	2b02      	cmp	r3, #2
 8001184:	d02b      	beq.n	80011de <HAL_GPIO_Init+0x9a>
 8001186:	2b02      	cmp	r3, #2
 8001188:	d804      	bhi.n	8001194 <HAL_GPIO_Init+0x50>
 800118a:	2b00      	cmp	r3, #0
 800118c:	d031      	beq.n	80011f2 <HAL_GPIO_Init+0xae>
 800118e:	2b01      	cmp	r3, #1
 8001190:	d01c      	beq.n	80011cc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001192:	e048      	b.n	8001226 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001194:	2b03      	cmp	r3, #3
 8001196:	d043      	beq.n	8001220 <HAL_GPIO_Init+0xdc>
 8001198:	2b11      	cmp	r3, #17
 800119a:	d01b      	beq.n	80011d4 <HAL_GPIO_Init+0x90>
          break;
 800119c:	e043      	b.n	8001226 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800119e:	4a89      	ldr	r2, [pc, #548]	; (80013c4 <HAL_GPIO_Init+0x280>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d026      	beq.n	80011f2 <HAL_GPIO_Init+0xae>
 80011a4:	4a87      	ldr	r2, [pc, #540]	; (80013c4 <HAL_GPIO_Init+0x280>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d806      	bhi.n	80011b8 <HAL_GPIO_Init+0x74>
 80011aa:	4a87      	ldr	r2, [pc, #540]	; (80013c8 <HAL_GPIO_Init+0x284>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d020      	beq.n	80011f2 <HAL_GPIO_Init+0xae>
 80011b0:	4a86      	ldr	r2, [pc, #536]	; (80013cc <HAL_GPIO_Init+0x288>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d01d      	beq.n	80011f2 <HAL_GPIO_Init+0xae>
          break;
 80011b6:	e036      	b.n	8001226 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011b8:	4a85      	ldr	r2, [pc, #532]	; (80013d0 <HAL_GPIO_Init+0x28c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d019      	beq.n	80011f2 <HAL_GPIO_Init+0xae>
 80011be:	4a85      	ldr	r2, [pc, #532]	; (80013d4 <HAL_GPIO_Init+0x290>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d016      	beq.n	80011f2 <HAL_GPIO_Init+0xae>
 80011c4:	4a84      	ldr	r2, [pc, #528]	; (80013d8 <HAL_GPIO_Init+0x294>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0xae>
          break;
 80011ca:	e02c      	b.n	8001226 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	623b      	str	r3, [r7, #32]
          break;
 80011d2:	e028      	b.n	8001226 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	3304      	adds	r3, #4
 80011da:	623b      	str	r3, [r7, #32]
          break;
 80011dc:	e023      	b.n	8001226 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	3308      	adds	r3, #8
 80011e4:	623b      	str	r3, [r7, #32]
          break;
 80011e6:	e01e      	b.n	8001226 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	330c      	adds	r3, #12
 80011ee:	623b      	str	r3, [r7, #32]
          break;
 80011f0:	e019      	b.n	8001226 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d102      	bne.n	8001200 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011fa:	2304      	movs	r3, #4
 80011fc:	623b      	str	r3, [r7, #32]
          break;
 80011fe:	e012      	b.n	8001226 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d105      	bne.n	8001214 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001208:	2308      	movs	r3, #8
 800120a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69fa      	ldr	r2, [r7, #28]
 8001210:	611a      	str	r2, [r3, #16]
          break;
 8001212:	e008      	b.n	8001226 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001214:	2308      	movs	r3, #8
 8001216:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	615a      	str	r2, [r3, #20]
          break;
 800121e:	e002      	b.n	8001226 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
          break;
 8001224:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	2bff      	cmp	r3, #255	; 0xff
 800122a:	d801      	bhi.n	8001230 <HAL_GPIO_Init+0xec>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	e001      	b.n	8001234 <HAL_GPIO_Init+0xf0>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3304      	adds	r3, #4
 8001234:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2bff      	cmp	r3, #255	; 0xff
 800123a:	d802      	bhi.n	8001242 <HAL_GPIO_Init+0xfe>
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	e002      	b.n	8001248 <HAL_GPIO_Init+0x104>
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	3b08      	subs	r3, #8
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	210f      	movs	r1, #15
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	401a      	ands	r2, r3
 800125a:	6a39      	ldr	r1, [r7, #32]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	431a      	orrs	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 8096 	beq.w	80013a2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001276:	4b59      	ldr	r3, [pc, #356]	; (80013dc <HAL_GPIO_Init+0x298>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	4a58      	ldr	r2, [pc, #352]	; (80013dc <HAL_GPIO_Init+0x298>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6193      	str	r3, [r2, #24]
 8001282:	4b56      	ldr	r3, [pc, #344]	; (80013dc <HAL_GPIO_Init+0x298>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800128e:	4a54      	ldr	r2, [pc, #336]	; (80013e0 <HAL_GPIO_Init+0x29c>)
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	3302      	adds	r3, #2
 8001296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	220f      	movs	r2, #15
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	4013      	ands	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4b      	ldr	r2, [pc, #300]	; (80013e4 <HAL_GPIO_Init+0x2a0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x19e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4a      	ldr	r2, [pc, #296]	; (80013e8 <HAL_GPIO_Init+0x2a4>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x19a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a49      	ldr	r2, [pc, #292]	; (80013ec <HAL_GPIO_Init+0x2a8>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x196>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a48      	ldr	r2, [pc, #288]	; (80013f0 <HAL_GPIO_Init+0x2ac>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x192>
 80012d2:	2303      	movs	r3, #3
 80012d4:	e006      	b.n	80012e4 <HAL_GPIO_Init+0x1a0>
 80012d6:	2304      	movs	r3, #4
 80012d8:	e004      	b.n	80012e4 <HAL_GPIO_Init+0x1a0>
 80012da:	2302      	movs	r3, #2
 80012dc:	e002      	b.n	80012e4 <HAL_GPIO_Init+0x1a0>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <HAL_GPIO_Init+0x1a0>
 80012e2:	2300      	movs	r3, #0
 80012e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e6:	f002 0203 	and.w	r2, r2, #3
 80012ea:	0092      	lsls	r2, r2, #2
 80012ec:	4093      	lsls	r3, r2
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012f4:	493a      	ldr	r1, [pc, #232]	; (80013e0 <HAL_GPIO_Init+0x29c>)
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	3302      	adds	r3, #2
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d006      	beq.n	800131c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800130e:	4b39      	ldr	r3, [pc, #228]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4938      	ldr	r1, [pc, #224]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	600b      	str	r3, [r1, #0]
 800131a:	e006      	b.n	800132a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800131c:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	43db      	mvns	r3, r3
 8001324:	4933      	ldr	r1, [pc, #204]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001326:	4013      	ands	r3, r2
 8001328:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d006      	beq.n	8001344 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001336:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	492e      	ldr	r1, [pc, #184]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	604b      	str	r3, [r1, #4]
 8001342:	e006      	b.n	8001352 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001344:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	43db      	mvns	r3, r3
 800134c:	4929      	ldr	r1, [pc, #164]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 800134e:	4013      	ands	r3, r2
 8001350:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d006      	beq.n	800136c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	4924      	ldr	r1, [pc, #144]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	608b      	str	r3, [r1, #8]
 800136a:	e006      	b.n	800137a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800136c:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	43db      	mvns	r3, r3
 8001374:	491f      	ldr	r1, [pc, #124]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001376:	4013      	ands	r3, r2
 8001378:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d006      	beq.n	8001394 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001388:	68da      	ldr	r2, [r3, #12]
 800138a:	491a      	ldr	r1, [pc, #104]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	4313      	orrs	r3, r2
 8001390:	60cb      	str	r3, [r1, #12]
 8001392:	e006      	b.n	80013a2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	43db      	mvns	r3, r3
 800139c:	4915      	ldr	r1, [pc, #84]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 800139e:	4013      	ands	r3, r2
 80013a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	3301      	adds	r3, #1
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	fa22 f303 	lsr.w	r3, r2, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f47f aed0 	bne.w	8001158 <HAL_GPIO_Init+0x14>
  }
}
 80013b8:	bf00      	nop
 80013ba:	372c      	adds	r7, #44	; 0x2c
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	10210000 	.word	0x10210000
 80013c8:	10110000 	.word	0x10110000
 80013cc:	10120000 	.word	0x10120000
 80013d0:	10310000 	.word	0x10310000
 80013d4:	10320000 	.word	0x10320000
 80013d8:	10220000 	.word	0x10220000
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010000 	.word	0x40010000
 80013e4:	40010800 	.word	0x40010800
 80013e8:	40010c00 	.word	0x40010c00
 80013ec:	40011000 	.word	0x40011000
 80013f0:	40011400 	.word	0x40011400
 80013f4:	40010400 	.word	0x40010400

080013f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	807b      	strh	r3, [r7, #2]
 8001404:	4613      	mov	r3, r2
 8001406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001408:	787b      	ldrb	r3, [r7, #1]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001414:	e003      	b.n	800141e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001416:	887b      	ldrh	r3, [r7, #2]
 8001418:	041a      	lsls	r2, r3, #16
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	611a      	str	r2, [r3, #16]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	887b      	ldrh	r3, [r7, #2]
 800143a:	4013      	ands	r3, r2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001440:	887a      	ldrh	r2, [r7, #2]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001446:	e002      	b.n	800144e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001448:	887a      	ldrh	r2, [r7, #2]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	611a      	str	r2, [r3, #16]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001464:	695a      	ldr	r2, [r3, #20]
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f806 	bl	8001488 <HAL_GPIO_EXTI_Callback>
  }
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40010400 	.word	0x40010400

08001488 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e26c      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 8087 	beq.w	80015ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014bc:	4b92      	ldr	r3, [pc, #584]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 030c 	and.w	r3, r3, #12
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d00c      	beq.n	80014e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014c8:	4b8f      	ldr	r3, [pc, #572]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d112      	bne.n	80014fa <HAL_RCC_OscConfig+0x5e>
 80014d4:	4b8c      	ldr	r3, [pc, #560]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e0:	d10b      	bne.n	80014fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e2:	4b89      	ldr	r3, [pc, #548]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d06c      	beq.n	80015c8 <HAL_RCC_OscConfig+0x12c>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d168      	bne.n	80015c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e246      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001502:	d106      	bne.n	8001512 <HAL_RCC_OscConfig+0x76>
 8001504:	4b80      	ldr	r3, [pc, #512]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a7f      	ldr	r2, [pc, #508]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800150a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	e02e      	b.n	8001570 <HAL_RCC_OscConfig+0xd4>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10c      	bne.n	8001534 <HAL_RCC_OscConfig+0x98>
 800151a:	4b7b      	ldr	r3, [pc, #492]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a7a      	ldr	r2, [pc, #488]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b78      	ldr	r3, [pc, #480]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a77      	ldr	r2, [pc, #476]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800152c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e01d      	b.n	8001570 <HAL_RCC_OscConfig+0xd4>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0xbc>
 800153e:	4b72      	ldr	r3, [pc, #456]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a71      	ldr	r2, [pc, #452]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b6f      	ldr	r3, [pc, #444]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a6e      	ldr	r2, [pc, #440]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e00b      	b.n	8001570 <HAL_RCC_OscConfig+0xd4>
 8001558:	4b6b      	ldr	r3, [pc, #428]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a6a      	ldr	r2, [pc, #424]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800155e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b68      	ldr	r3, [pc, #416]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a67      	ldr	r2, [pc, #412]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800156a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d013      	beq.n	80015a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff fcd8 	bl	8000f2c <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001580:	f7ff fcd4 	bl	8000f2c <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	; 0x64
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e1fa      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	4b5d      	ldr	r3, [pc, #372]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0xe4>
 800159e:	e014      	b.n	80015ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fcc4 	bl	8000f2c <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff fcc0 	bl	8000f2c <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b64      	cmp	r3, #100	; 0x64
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1e6      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	4b53      	ldr	r3, [pc, #332]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x10c>
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d063      	beq.n	800169e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015d6:	4b4c      	ldr	r3, [pc, #304]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00b      	beq.n	80015fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015e2:	4b49      	ldr	r3, [pc, #292]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d11c      	bne.n	8001628 <HAL_RCC_OscConfig+0x18c>
 80015ee:	4b46      	ldr	r3, [pc, #280]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d116      	bne.n	8001628 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fa:	4b43      	ldr	r3, [pc, #268]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <HAL_RCC_OscConfig+0x176>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d001      	beq.n	8001612 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e1ba      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4939      	ldr	r1, [pc, #228]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001626:	e03a      	b.n	800169e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d020      	beq.n	8001672 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7ff fc79 	bl	8000f2c <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff fc75 	bl	8000f2c <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e19b      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001650:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165c:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4927      	ldr	r1, [pc, #156]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
 8001670:	e015      	b.n	800169e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001672:	4b26      	ldr	r3, [pc, #152]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fc58 	bl	8000f2c <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001680:	f7ff fc54 	bl	8000f2c <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e17a      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d03a      	beq.n	8001720 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d019      	beq.n	80016e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HAL_RCC_OscConfig+0x274>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff fc38 	bl	8000f2c <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff fc34 	bl	8000f2c <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e15a      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016de:	2001      	movs	r0, #1
 80016e0:	f000 faf6 	bl	8001cd0 <RCC_Delay>
 80016e4:	e01c      	b.n	8001720 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_RCC_OscConfig+0x274>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ec:	f7ff fc1e 	bl	8000f2c <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f2:	e00f      	b.n	8001714 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f4:	f7ff fc1a 	bl	8000f2c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d908      	bls.n	8001714 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e140      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000
 800170c:	42420000 	.word	0x42420000
 8001710:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001714:	4b9e      	ldr	r3, [pc, #632]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1e9      	bne.n	80016f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80a6 	beq.w	800187a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001732:	4b97      	ldr	r3, [pc, #604]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10d      	bne.n	800175a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	4b94      	ldr	r3, [pc, #592]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a93      	ldr	r2, [pc, #588]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001748:	61d3      	str	r3, [r2, #28]
 800174a:	4b91      	ldr	r3, [pc, #580]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001756:	2301      	movs	r3, #1
 8001758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175a:	4b8e      	ldr	r3, [pc, #568]	; (8001994 <HAL_RCC_OscConfig+0x4f8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001762:	2b00      	cmp	r3, #0
 8001764:	d118      	bne.n	8001798 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001766:	4b8b      	ldr	r3, [pc, #556]	; (8001994 <HAL_RCC_OscConfig+0x4f8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a8a      	ldr	r2, [pc, #552]	; (8001994 <HAL_RCC_OscConfig+0x4f8>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001772:	f7ff fbdb 	bl	8000f2c <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177a:	f7ff fbd7 	bl	8000f2c <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b64      	cmp	r3, #100	; 0x64
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e0fd      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178c:	4b81      	ldr	r3, [pc, #516]	; (8001994 <HAL_RCC_OscConfig+0x4f8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d106      	bne.n	80017ae <HAL_RCC_OscConfig+0x312>
 80017a0:	4b7b      	ldr	r3, [pc, #492]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4a7a      	ldr	r2, [pc, #488]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6213      	str	r3, [r2, #32]
 80017ac:	e02d      	b.n	800180a <HAL_RCC_OscConfig+0x36e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x334>
 80017b6:	4b76      	ldr	r3, [pc, #472]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4a75      	ldr	r2, [pc, #468]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	6213      	str	r3, [r2, #32]
 80017c2:	4b73      	ldr	r3, [pc, #460]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	4a72      	ldr	r2, [pc, #456]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	f023 0304 	bic.w	r3, r3, #4
 80017cc:	6213      	str	r3, [r2, #32]
 80017ce:	e01c      	b.n	800180a <HAL_RCC_OscConfig+0x36e>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b05      	cmp	r3, #5
 80017d6:	d10c      	bne.n	80017f2 <HAL_RCC_OscConfig+0x356>
 80017d8:	4b6d      	ldr	r3, [pc, #436]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a6c      	ldr	r2, [pc, #432]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	6213      	str	r3, [r2, #32]
 80017e4:	4b6a      	ldr	r3, [pc, #424]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4a69      	ldr	r2, [pc, #420]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6213      	str	r3, [r2, #32]
 80017f0:	e00b      	b.n	800180a <HAL_RCC_OscConfig+0x36e>
 80017f2:	4b67      	ldr	r3, [pc, #412]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4a66      	ldr	r2, [pc, #408]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	6213      	str	r3, [r2, #32]
 80017fe:	4b64      	ldr	r3, [pc, #400]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4a63      	ldr	r2, [pc, #396]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001804:	f023 0304 	bic.w	r3, r3, #4
 8001808:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d015      	beq.n	800183e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7ff fb8b 	bl	8000f2c <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001818:	e00a      	b.n	8001830 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181a:	f7ff fb87 	bl	8000f2c <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	f241 3288 	movw	r2, #5000	; 0x1388
 8001828:	4293      	cmp	r3, r2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e0ab      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001830:	4b57      	ldr	r3, [pc, #348]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0ee      	beq.n	800181a <HAL_RCC_OscConfig+0x37e>
 800183c:	e014      	b.n	8001868 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183e:	f7ff fb75 	bl	8000f2c <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001844:	e00a      	b.n	800185c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f7ff fb71 	bl	8000f2c <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f241 3288 	movw	r2, #5000	; 0x1388
 8001854:	4293      	cmp	r3, r2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e095      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185c:	4b4c      	ldr	r3, [pc, #304]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1ee      	bne.n	8001846 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001868:	7dfb      	ldrb	r3, [r7, #23]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d105      	bne.n	800187a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800186e:	4b48      	ldr	r3, [pc, #288]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a47      	ldr	r2, [pc, #284]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001878:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8081 	beq.w	8001986 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001884:	4b42      	ldr	r3, [pc, #264]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b08      	cmp	r3, #8
 800188e:	d061      	beq.n	8001954 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d146      	bne.n	8001926 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001898:	4b3f      	ldr	r3, [pc, #252]	; (8001998 <HAL_RCC_OscConfig+0x4fc>)
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff fb45 	bl	8000f2c <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a6:	f7ff fb41 	bl	8000f2c <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e067      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b8:	4b35      	ldr	r3, [pc, #212]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f0      	bne.n	80018a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018cc:	d108      	bne.n	80018e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018ce:	4b30      	ldr	r3, [pc, #192]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	492d      	ldr	r1, [pc, #180]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e0:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a19      	ldr	r1, [r3, #32]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	430b      	orrs	r3, r1
 80018f2:	4927      	ldr	r1, [pc, #156]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f8:	4b27      	ldr	r3, [pc, #156]	; (8001998 <HAL_RCC_OscConfig+0x4fc>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff fb15 	bl	8000f2c <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001906:	f7ff fb11 	bl	8000f2c <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e037      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x46a>
 8001924:	e02f      	b.n	8001986 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <HAL_RCC_OscConfig+0x4fc>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff fafe 	bl	8000f2c <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff fafa 	bl	8000f2c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e020      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x498>
 8001952:	e018      	b.n	8001986 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e013      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	429a      	cmp	r2, r3
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000
 8001994:	40007000 	.word	0x40007000
 8001998:	42420060 	.word	0x42420060

0800199c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0d0      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b0:	4b6a      	ldr	r3, [pc, #424]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d910      	bls.n	80019e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b67      	ldr	r3, [pc, #412]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 0207 	bic.w	r2, r3, #7
 80019c6:	4965      	ldr	r1, [pc, #404]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b63      	ldr	r3, [pc, #396]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0b8      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f8:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	4a58      	ldr	r2, [pc, #352]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a10:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	4a52      	ldr	r2, [pc, #328]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	494d      	ldr	r1, [pc, #308]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d040      	beq.n	8001abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d115      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e07f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5a:	4b41      	ldr	r3, [pc, #260]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e073      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6a:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e06b      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a7a:	4b39      	ldr	r3, [pc, #228]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f023 0203 	bic.w	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4936      	ldr	r1, [pc, #216]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a8c:	f7ff fa4e 	bl	8000f2c <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a94:	f7ff fa4a 	bl	8000f2c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e053      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 020c 	and.w	r2, r3, #12
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d1eb      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001abc:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d210      	bcs.n	8001aec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 0207 	bic.w	r2, r3, #7
 8001ad2:	4922      	ldr	r1, [pc, #136]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e032      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4916      	ldr	r1, [pc, #88]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	490e      	ldr	r1, [pc, #56]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b2a:	f000 f821 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b2e:	4601      	mov	r1, r0
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3c:	5cd3      	ldrb	r3, [r2, r3]
 8001b3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001b42:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_RCC_ClockConfig+0x1cc>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1d0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe ff4e 	bl	80009ec <HAL_InitTick>

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40022000 	.word	0x40022000
 8001b60:	40021000 	.word	0x40021000
 8001b64:	08003228 	.word	0x08003228
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	b490      	push	{r4, r7}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b78:	1d3c      	adds	r4, r7, #4
 8001b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b80:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b9a:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d002      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d003      	beq.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x46>
 8001bae:	e02d      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bb0:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bb2:	623b      	str	r3, [r7, #32]
      break;
 8001bb4:	e02d      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	0c9b      	lsrs	r3, r3, #18
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001bc8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d013      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	0c5b      	lsrs	r3, r3, #17
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001be2:	4413      	add	r3, r2
 8001be4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001be8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	4a0f      	ldr	r2, [pc, #60]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bee:	fb02 f203 	mul.w	r2, r2, r3
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfa:	e004      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c00:	fb02 f303 	mul.w	r3, r2, r3
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	623b      	str	r3, [r7, #32]
      break;
 8001c0a:	e002      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c0e:	623b      	str	r3, [r7, #32]
      break;
 8001c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c12:	6a3b      	ldr	r3, [r7, #32]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3728      	adds	r7, #40	; 0x28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc90      	pop	{r4, r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	08003204 	.word	0x08003204
 8001c24:	08003214 	.word	0x08003214
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	007a1200 	.word	0x007a1200
 8001c30:	003d0900 	.word	0x003d0900

08001c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c38:	4b02      	ldr	r3, [pc, #8]	; (8001c44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	20000000 	.word	0x20000000

08001c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c4c:	f7ff fff2 	bl	8001c34 <HAL_RCC_GetHCLKFreq>
 8001c50:	4601      	mov	r1, r0
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4a03      	ldr	r2, [pc, #12]	; (8001c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c5e:	5cd3      	ldrb	r3, [r2, r3]
 8001c60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	08003238 	.word	0x08003238

08001c70 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_RCC_GetClockConfig+0x58>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0203 	and.w	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_RCC_GetClockConfig+0x58>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_RCC_GetClockConfig+0x58>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_RCC_GetClockConfig+0x58>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	08db      	lsrs	r3, r3, #3
 8001caa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0207 	and.w	r2, r3, #7
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40022000 	.word	0x40022000

08001cd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <RCC_Delay+0x34>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <RCC_Delay+0x38>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	0a5b      	lsrs	r3, r3, #9
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cec:	bf00      	nop
  }
  while (Delay --);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1e5a      	subs	r2, r3, #1
 8001cf2:	60fa      	str	r2, [r7, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f9      	bne.n	8001cec <RCC_Delay+0x1c>
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000000 	.word	0x20000000
 8001d08:	10624dd3 	.word	0x10624dd3

08001d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e01d      	b.n	8001d5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f815 	bl	8001d62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3304      	adds	r3, #4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f000 f962 	bl	8002014 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d007      	beq.n	8001dae <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 0201 	orr.w	r2, r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d122      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d11b      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f06f 0202 	mvn.w	r2, #2
 8001de6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f8ed 	bl	8001fdc <HAL_TIM_IC_CaptureCallback>
 8001e02:	e005      	b.n	8001e10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f8e0 	bl	8001fca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f8ef 	bl	8001fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d122      	bne.n	8001e6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d11b      	bne.n	8001e6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f06f 0204 	mvn.w	r2, #4
 8001e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f8c3 	bl	8001fdc <HAL_TIM_IC_CaptureCallback>
 8001e56:	e005      	b.n	8001e64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f8b6 	bl	8001fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f8c5 	bl	8001fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d122      	bne.n	8001ebe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d11b      	bne.n	8001ebe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f06f 0208 	mvn.w	r2, #8
 8001e8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2204      	movs	r2, #4
 8001e94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f899 	bl	8001fdc <HAL_TIM_IC_CaptureCallback>
 8001eaa:	e005      	b.n	8001eb8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f88c 	bl	8001fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f89b 	bl	8001fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b10      	cmp	r3, #16
 8001eca:	d122      	bne.n	8001f12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0310 	and.w	r3, r3, #16
 8001ed6:	2b10      	cmp	r3, #16
 8001ed8:	d11b      	bne.n	8001f12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f06f 0210 	mvn.w	r2, #16
 8001ee2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2208      	movs	r2, #8
 8001ee8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f86f 	bl	8001fdc <HAL_TIM_IC_CaptureCallback>
 8001efe:	e005      	b.n	8001f0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f862 	bl	8001fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f871 	bl	8001fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d10e      	bne.n	8001f3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d107      	bne.n	8001f3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f06f 0201 	mvn.w	r2, #1
 8001f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7fe fcb9 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f48:	2b80      	cmp	r3, #128	; 0x80
 8001f4a:	d10e      	bne.n	8001f6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f56:	2b80      	cmp	r3, #128	; 0x80
 8001f58:	d107      	bne.n	8001f6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f8c0 	bl	80020ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f74:	2b40      	cmp	r3, #64	; 0x40
 8001f76:	d10e      	bne.n	8001f96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f82:	2b40      	cmp	r3, #64	; 0x40
 8001f84:	d107      	bne.n	8001f96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f835 	bl	8002000 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b20      	cmp	r3, #32
 8001fa2:	d10e      	bne.n	8001fc2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d107      	bne.n	8001fc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f06f 0220 	mvn.w	r2, #32
 8001fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f88b 	bl	80020d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr
	...

08002014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a29      	ldr	r2, [pc, #164]	; (80020cc <TIM_Base_SetConfig+0xb8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00b      	beq.n	8002044 <TIM_Base_SetConfig+0x30>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002032:	d007      	beq.n	8002044 <TIM_Base_SetConfig+0x30>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a26      	ldr	r2, [pc, #152]	; (80020d0 <TIM_Base_SetConfig+0xbc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d003      	beq.n	8002044 <TIM_Base_SetConfig+0x30>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <TIM_Base_SetConfig+0xc0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d108      	bne.n	8002056 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a1c      	ldr	r2, [pc, #112]	; (80020cc <TIM_Base_SetConfig+0xb8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00b      	beq.n	8002076 <TIM_Base_SetConfig+0x62>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002064:	d007      	beq.n	8002076 <TIM_Base_SetConfig+0x62>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a19      	ldr	r2, [pc, #100]	; (80020d0 <TIM_Base_SetConfig+0xbc>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d003      	beq.n	8002076 <TIM_Base_SetConfig+0x62>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <TIM_Base_SetConfig+0xc0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d108      	bne.n	8002088 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800207c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4313      	orrs	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a07      	ldr	r2, [pc, #28]	; (80020cc <TIM_Base_SetConfig+0xb8>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d103      	bne.n	80020bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	615a      	str	r2, [r3, #20]
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	40012c00 	.word	0x40012c00
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40000800 	.word	0x40000800

080020d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <LL_DMA_ConfigTransfer>:
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	3b01      	subs	r3, #1
 800210c:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <LL_DMA_ConfigTransfer+0x44>)
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	461a      	mov	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4413      	add	r3, r2
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800211c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	3a01      	subs	r2, #1
 8002124:	4906      	ldr	r1, [pc, #24]	; (8002140 <LL_DMA_ConfigTransfer+0x44>)
 8002126:	5c8a      	ldrb	r2, [r1, r2]
 8002128:	4611      	mov	r1, r2
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	440a      	add	r2, r1
 800212e:	4611      	mov	r1, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	08003240 	.word	0x08003240

08002144 <LL_DMA_SetDataLength>:
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	3b01      	subs	r3, #1
 8002154:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <LL_DMA_SetDataLength+0x40>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	461a      	mov	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4413      	add	r3, r2
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	0c1b      	lsrs	r3, r3, #16
 8002162:	041b      	lsls	r3, r3, #16
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	3a01      	subs	r2, #1
 8002168:	4906      	ldr	r1, [pc, #24]	; (8002184 <LL_DMA_SetDataLength+0x40>)
 800216a:	5c8a      	ldrb	r2, [r1, r2]
 800216c:	4611      	mov	r1, r2
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	440a      	add	r2, r1
 8002172:	4611      	mov	r1, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	08003240 	.word	0x08003240

08002188 <LL_DMA_SetMemoryAddress>:
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	3b01      	subs	r3, #1
 8002198:	4a06      	ldr	r2, [pc, #24]	; (80021b4 <LL_DMA_SetMemoryAddress+0x2c>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	461a      	mov	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4413      	add	r3, r2
 80021a2:	461a      	mov	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	60d3      	str	r3, [r2, #12]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	08003240 	.word	0x08003240

080021b8 <LL_DMA_SetPeriphAddress>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	4a06      	ldr	r2, [pc, #24]	; (80021e4 <LL_DMA_SetPeriphAddress+0x2c>)
 80021ca:	5cd3      	ldrb	r3, [r2, r3]
 80021cc:	461a      	mov	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4413      	add	r3, r2
 80021d2:	461a      	mov	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6093      	str	r3, [r2, #8]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	08003240 	.word	0x08003240

080021e8 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction | \
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction | \
 80021fc:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 8002202:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8002208:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800220e:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 8002214:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction | \
 800221a:	4313      	orrs	r3, r2
 800221c:	461a      	mov	r2, r3
 800221e:	68b9      	ldr	r1, [r7, #8]
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f7ff ff6b 	bl	80020fc <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	461a      	mov	r2, r3
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f7ff ffaa 	bl	8002188 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f7ff ffbb 	bl	80021b8 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	461a      	mov	r2, r3
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f7ff ff7a 	bl	8002144 <LL_DMA_SetDataLength>

  return SUCCESS;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80022a8:	b490      	push	{r4, r7}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	461a      	mov	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	0e1b      	lsrs	r3, r3, #24
 80022bc:	4413      	add	r3, r2
 80022be:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80022c0:	6822      	ldr	r2, [r4, #0]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	fab3 f383 	clz	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	210f      	movs	r1, #15
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	401a      	ands	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	61bb      	str	r3, [r7, #24]
  return result;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	fab3 f383 	clz	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	4313      	orrs	r3, r2
 8002300:	6023      	str	r3, [r4, #0]
}
 8002302:	bf00      	nop
 8002304:	3720      	adds	r7, #32
 8002306:	46bd      	mov	sp, r7
 8002308:	bc90      	pop	{r4, r7}
 800230a:	4770      	bx	lr

0800230c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800230c:	b490      	push	{r4, r7}
 800230e:	b088      	sub	sp, #32
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	461a      	mov	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	0e1b      	lsrs	r3, r3, #24
 8002320:	4413      	add	r3, r2
 8002322:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002324:	6822      	ldr	r2, [r4, #0]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	613b      	str	r3, [r7, #16]
  return result;
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	2103      	movs	r1, #3
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	401a      	ands	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	61bb      	str	r3, [r7, #24]
  return result;
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	4313      	orrs	r3, r2
 8002364:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8002366:	bf00      	nop
 8002368:	3720      	adds	r7, #32
 800236a:	46bd      	mov	sp, r7
 800236c:	bc90      	pop	{r4, r7}
 800236e:	4770      	bx	lr

08002370 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8002370:	b490      	push	{r4, r7}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	461a      	mov	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	0e1b      	lsrs	r3, r3, #24
 8002384:	4413      	add	r3, r2
 8002386:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002388:	6822      	ldr	r2, [r4, #0]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	613b      	str	r3, [r7, #16]
  return result;
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	2104      	movs	r1, #4
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	401a      	ands	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	61bb      	str	r3, [r7, #24]
  return result;
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	4313      	orrs	r3, r2
 80023c8:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 80023ca:	bf00      	nop
 80023cc:	3720      	adds	r7, #32
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc90      	pop	{r4, r7}
 80023d2:	4770      	bx	lr

080023d4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	43db      	mvns	r3, r3
 80023ea:	401a      	ands	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	0a1b      	lsrs	r3, r3, #8
 80023f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	613b      	str	r3, [r7, #16]
  return result;
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	fab3 f383 	clz	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	4619      	mov	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	408b      	lsls	r3, r1
 8002408:	431a      	orrs	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	60da      	str	r2, [r3, #12]
}
 800240e:	bf00      	nop
 8002410:	371c      	adds	r7, #28
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	0c1b      	lsrs	r3, r3, #16
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	60fb      	str	r3, [r7, #12]
  return result;
 8002438:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800243a:	fab3 f383 	clz	r3, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8002442:	e040      	b.n	80024c6 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8002444:	2201      	movs	r2, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	409a      	lsls	r2, r3
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d036      	beq.n	80024c0 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	2b07      	cmp	r3, #7
 8002456:	d806      	bhi.n	8002466 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002458:	f240 1201 	movw	r2, #257	; 0x101
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	e008      	b.n	8002478 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3b08      	subs	r3, #8
 800246a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002476:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	461a      	mov	r2, r3
 800247e:	69b9      	ldr	r1, [r7, #24]
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ff11 	bl	80022a8 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	461a      	mov	r2, r3
 800248c:	69b9      	ldr	r1, [r7, #24]
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ffa0 	bl	80023d4 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d003      	beq.n	80024a4 <LL_GPIO_Init+0x8c>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b09      	cmp	r3, #9
 80024a2:	d10d      	bne.n	80024c0 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	461a      	mov	r2, r3
 80024aa:	69b9      	ldr	r1, [r7, #24]
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff ff2d 	bl	800230c <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	461a      	mov	r2, r3
 80024b8:	69b9      	ldr	r1, [r7, #24]
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ff58 	bl	8002370 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	3301      	adds	r3, #1
 80024c4:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	fa22 f303 	lsr.w	r3, r2, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1b8      	bne.n	8002444 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3720      	adds	r7, #32
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <LL_RCC_GetSysClkSource+0x14>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 030c 	and.w	r3, r3, #12
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	40021000 	.word	0x40021000

080024f4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <LL_RCC_GetAHBPrescaler+0x14>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	40021000 	.word	0x40021000

0800250c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	40021000 	.word	0x40021000

08002524 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <LL_RCC_GetAPB2Prescaler+0x14>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	40021000 	.word	0x40021000

0800253c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <LL_RCC_PLL_GetMainSource+0x14>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	40021000 	.word	0x40021000

08002554 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr
 8002568:	40021000 	.word	0x40021000

0800256c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <LL_RCC_PLL_GetPrediv+0x18>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	0c5b      	lsrs	r3, r3, #17
 8002576:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000

08002588 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002590:	f000 f820 	bl	80025d4 <RCC_GetSystemClockFreq>
 8002594:	4602      	mov	r2, r0
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f83a 	bl	8002618 <RCC_GetHCLKClockFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 f848 	bl	8002644 <RCC_GetPCLK1ClockFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f854 	bl	800266c <RCC_GetPCLK2ClockFreq>
 80025c4:	4602      	mov	r2, r0
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	60da      	str	r2, [r3, #12]
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80025de:	f7ff ff7d 	bl	80024dc <LL_RCC_GetSysClkSource>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d006      	beq.n	80025f6 <RCC_GetSystemClockFreq+0x22>
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d007      	beq.n	80025fc <RCC_GetSystemClockFreq+0x28>
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80025f0:	4b08      	ldr	r3, [pc, #32]	; (8002614 <RCC_GetSystemClockFreq+0x40>)
 80025f2:	607b      	str	r3, [r7, #4]
      break;
 80025f4:	e009      	b.n	800260a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <RCC_GetSystemClockFreq+0x40>)
 80025f8:	607b      	str	r3, [r7, #4]
      break;
 80025fa:	e006      	b.n	800260a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80025fc:	f000 f84a 	bl	8002694 <RCC_PLL_GetFreqDomain_SYS>
 8002600:	6078      	str	r0, [r7, #4]
      break;
 8002602:	e002      	b.n	800260a <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <RCC_GetSystemClockFreq+0x40>)
 8002606:	607b      	str	r3, [r7, #4]
      break;
 8002608:	bf00      	nop
  }

  return frequency;
 800260a:	687b      	ldr	r3, [r7, #4]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	007a1200 	.word	0x007a1200

08002618 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002620:	f7ff ff68 	bl	80024f4 <LL_RCC_GetAHBPrescaler>
 8002624:	4603      	mov	r3, r0
 8002626:	091b      	lsrs	r3, r3, #4
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	4a04      	ldr	r2, [pc, #16]	; (8002640 <RCC_GetHCLKClockFreq+0x28>)
 800262e:	5cd3      	ldrb	r3, [r2, r3]
 8002630:	461a      	mov	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	40d3      	lsrs	r3, r2
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	08003228 	.word	0x08003228

08002644 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800264c:	f7ff ff5e 	bl	800250c <LL_RCC_GetAPB1Prescaler>
 8002650:	4603      	mov	r3, r0
 8002652:	0a1b      	lsrs	r3, r3, #8
 8002654:	4a04      	ldr	r2, [pc, #16]	; (8002668 <RCC_GetPCLK1ClockFreq+0x24>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	461a      	mov	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	40d3      	lsrs	r3, r2
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	08003238 	.word	0x08003238

0800266c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002674:	f7ff ff56 	bl	8002524 <LL_RCC_GetAPB2Prescaler>
 8002678:	4603      	mov	r3, r0
 800267a:	0adb      	lsrs	r3, r3, #11
 800267c:	4a04      	ldr	r2, [pc, #16]	; (8002690 <RCC_GetPCLK2ClockFreq+0x24>)
 800267e:	5cd3      	ldrb	r3, [r2, r3]
 8002680:	461a      	mov	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	40d3      	lsrs	r3, r2
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	08003238 	.word	0x08003238

08002694 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	2300      	movs	r3, #0
 80026a0:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80026a2:	f7ff ff4b 	bl	800253c <LL_RCC_PLL_GetMainSource>
 80026a6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <RCC_PLL_GetFreqDomain_SYS+0x22>
 80026ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b2:	d003      	beq.n	80026bc <RCC_PLL_GetFreqDomain_SYS+0x28>
 80026b4:	e00b      	b.n	80026ce <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80026b8:	607b      	str	r3, [r7, #4]
      break;
 80026ba:	e00b      	b.n	80026d4 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80026bc:	f7ff ff56 	bl	800256c <LL_RCC_PLL_GetPrediv>
 80026c0:	4603      	mov	r3, r0
 80026c2:	3301      	adds	r3, #1
 80026c4:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80026c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ca:	607b      	str	r3, [r7, #4]
      break;
 80026cc:	e002      	b.n	80026d4 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80026d0:	607b      	str	r3, [r7, #4]
      break;
 80026d2:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80026d4:	f7ff ff3e 	bl	8002554 <LL_RCC_PLL_GetMultiplicator>
 80026d8:	4603      	mov	r3, r0
 80026da:	0c9b      	lsrs	r3, r3, #18
 80026dc:	3302      	adds	r3, #2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	fb02 f303 	mul.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	003d0900 	.word	0x003d0900
 80026f0:	007a1200 	.word	0x007a1200

080026f4 <LL_USART_IsEnabled>:
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002708:	bf0c      	ite	eq
 800270a:	2301      	moveq	r3, #1
 800270c:	2300      	movne	r3, #0
 800270e:	b2db      	uxtb	r3, r3
}
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <LL_USART_SetStopBitsLength>:
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	611a      	str	r2, [r3, #16]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <LL_USART_SetHWFlowCtrl>:
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	615a      	str	r2, [r3, #20]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr
	...

08002764 <LL_USART_SetBaudRate>:
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	009a      	lsls	r2, r3, #2
 800277a:	441a      	add	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	fbb2 f3f3 	udiv	r3, r2, r3
 8002784:	4a25      	ldr	r2, [pc, #148]	; (800281c <LL_USART_SetBaudRate+0xb8>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	b29b      	uxth	r3, r3
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	b299      	uxth	r1, r3
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	009a      	lsls	r2, r3, #2
 800279c:	441a      	add	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <LL_USART_SetBaudRate+0xb8>)
 80027a8:	fba3 0302 	umull	r0, r3, r3, r2
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	2064      	movs	r0, #100	; 0x64
 80027b0:	fb00 f303 	mul.w	r3, r0, r3
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	3332      	adds	r3, #50	; 0x32
 80027ba:	4a18      	ldr	r2, [pc, #96]	; (800281c <LL_USART_SetBaudRate+0xb8>)
 80027bc:	fba2 2303 	umull	r2, r3, r2, r3
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	440b      	add	r3, r1
 80027cc:	b299      	uxth	r1, r3
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	009a      	lsls	r2, r3, #2
 80027d8:	441a      	add	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	fbb2 f2f3 	udiv	r2, r2, r3
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <LL_USART_SetBaudRate+0xb8>)
 80027e4:	fba3 0302 	umull	r0, r3, r3, r2
 80027e8:	095b      	lsrs	r3, r3, #5
 80027ea:	2064      	movs	r0, #100	; 0x64
 80027ec:	fb00 f303 	mul.w	r3, r0, r3
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	3332      	adds	r3, #50	; 0x32
 80027f6:	4a09      	ldr	r2, [pc, #36]	; (800281c <LL_USART_SetBaudRate+0xb8>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	b29b      	uxth	r3, r3
 8002806:	440b      	add	r3, r1
 8002808:	b29b      	uxth	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	609a      	str	r2, [r3, #8]
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	51eb851f 	.word	0x51eb851f

08002820 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800282e:	2300      	movs	r3, #0
 8002830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff ff5e 	bl	80026f4 <LL_USART_IsEnabled>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d145      	bne.n	80028ca <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002846:	f023 030c 	bic.w	r3, r3, #12
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	6851      	ldr	r1, [r2, #4]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	68d2      	ldr	r2, [r2, #12]
 8002852:	4311      	orrs	r1, r2
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	6912      	ldr	r2, [r2, #16]
 8002858:	430a      	orrs	r2, r1
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4619      	mov	r1, r3
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff ff57 	bl	800271a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	4619      	mov	r1, r3
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ff63 	bl	800273e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002878:	f107 0308 	add.w	r3, r7, #8
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fe83 	bl	8002588 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a13      	ldr	r2, [pc, #76]	; (80028d4 <LL_USART_Init+0xb4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d102      	bne.n	8002890 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	e00c      	b.n	80028aa <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a11      	ldr	r2, [pc, #68]	; (80028d8 <LL_USART_Init+0xb8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d102      	bne.n	800289e <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	e005      	b.n	80028aa <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <LL_USART_Init+0xbc>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d101      	bne.n	80028aa <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00c      	beq.n	80028ca <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d008      	beq.n	80028ca <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 80028b8:	2300      	movs	r3, #0
 80028ba:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	69b9      	ldr	r1, [r7, #24]
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ff4d 	bl	8002764 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80028ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3720      	adds	r7, #32
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40013800 	.word	0x40013800
 80028d8:	40004400 	.word	0x40004400
 80028dc:	40004800 	.word	0x40004800

080028e0 <__errno>:
 80028e0:	4b01      	ldr	r3, [pc, #4]	; (80028e8 <__errno+0x8>)
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	2000000c 	.word	0x2000000c

080028ec <__libc_init_array>:
 80028ec:	b570      	push	{r4, r5, r6, lr}
 80028ee:	2500      	movs	r5, #0
 80028f0:	4e0c      	ldr	r6, [pc, #48]	; (8002924 <__libc_init_array+0x38>)
 80028f2:	4c0d      	ldr	r4, [pc, #52]	; (8002928 <__libc_init_array+0x3c>)
 80028f4:	1ba4      	subs	r4, r4, r6
 80028f6:	10a4      	asrs	r4, r4, #2
 80028f8:	42a5      	cmp	r5, r4
 80028fa:	d109      	bne.n	8002910 <__libc_init_array+0x24>
 80028fc:	f000 fc3c 	bl	8003178 <_init>
 8002900:	2500      	movs	r5, #0
 8002902:	4e0a      	ldr	r6, [pc, #40]	; (800292c <__libc_init_array+0x40>)
 8002904:	4c0a      	ldr	r4, [pc, #40]	; (8002930 <__libc_init_array+0x44>)
 8002906:	1ba4      	subs	r4, r4, r6
 8002908:	10a4      	asrs	r4, r4, #2
 800290a:	42a5      	cmp	r5, r4
 800290c:	d105      	bne.n	800291a <__libc_init_array+0x2e>
 800290e:	bd70      	pop	{r4, r5, r6, pc}
 8002910:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002914:	4798      	blx	r3
 8002916:	3501      	adds	r5, #1
 8002918:	e7ee      	b.n	80028f8 <__libc_init_array+0xc>
 800291a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800291e:	4798      	blx	r3
 8002920:	3501      	adds	r5, #1
 8002922:	e7f2      	b.n	800290a <__libc_init_array+0x1e>
 8002924:	0800327c 	.word	0x0800327c
 8002928:	0800327c 	.word	0x0800327c
 800292c:	0800327c 	.word	0x0800327c
 8002930:	08003280 	.word	0x08003280

08002934 <memset>:
 8002934:	4603      	mov	r3, r0
 8002936:	4402      	add	r2, r0
 8002938:	4293      	cmp	r3, r2
 800293a:	d100      	bne.n	800293e <memset+0xa>
 800293c:	4770      	bx	lr
 800293e:	f803 1b01 	strb.w	r1, [r3], #1
 8002942:	e7f9      	b.n	8002938 <memset+0x4>

08002944 <siprintf>:
 8002944:	b40e      	push	{r1, r2, r3}
 8002946:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800294a:	b500      	push	{lr}
 800294c:	b09c      	sub	sp, #112	; 0x70
 800294e:	ab1d      	add	r3, sp, #116	; 0x74
 8002950:	9002      	str	r0, [sp, #8]
 8002952:	9006      	str	r0, [sp, #24]
 8002954:	9107      	str	r1, [sp, #28]
 8002956:	9104      	str	r1, [sp, #16]
 8002958:	4808      	ldr	r0, [pc, #32]	; (800297c <siprintf+0x38>)
 800295a:	4909      	ldr	r1, [pc, #36]	; (8002980 <siprintf+0x3c>)
 800295c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002960:	9105      	str	r1, [sp, #20]
 8002962:	6800      	ldr	r0, [r0, #0]
 8002964:	a902      	add	r1, sp, #8
 8002966:	9301      	str	r3, [sp, #4]
 8002968:	f000 f86e 	bl	8002a48 <_svfiprintf_r>
 800296c:	2200      	movs	r2, #0
 800296e:	9b02      	ldr	r3, [sp, #8]
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	b01c      	add	sp, #112	; 0x70
 8002974:	f85d eb04 	ldr.w	lr, [sp], #4
 8002978:	b003      	add	sp, #12
 800297a:	4770      	bx	lr
 800297c:	2000000c 	.word	0x2000000c
 8002980:	ffff0208 	.word	0xffff0208

08002984 <strcpy>:
 8002984:	4603      	mov	r3, r0
 8002986:	f811 2b01 	ldrb.w	r2, [r1], #1
 800298a:	f803 2b01 	strb.w	r2, [r3], #1
 800298e:	2a00      	cmp	r2, #0
 8002990:	d1f9      	bne.n	8002986 <strcpy+0x2>
 8002992:	4770      	bx	lr

08002994 <__ssputs_r>:
 8002994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002998:	688e      	ldr	r6, [r1, #8]
 800299a:	4682      	mov	sl, r0
 800299c:	429e      	cmp	r6, r3
 800299e:	460c      	mov	r4, r1
 80029a0:	4690      	mov	r8, r2
 80029a2:	4699      	mov	r9, r3
 80029a4:	d837      	bhi.n	8002a16 <__ssputs_r+0x82>
 80029a6:	898a      	ldrh	r2, [r1, #12]
 80029a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029ac:	d031      	beq.n	8002a12 <__ssputs_r+0x7e>
 80029ae:	2302      	movs	r3, #2
 80029b0:	6825      	ldr	r5, [r4, #0]
 80029b2:	6909      	ldr	r1, [r1, #16]
 80029b4:	1a6f      	subs	r7, r5, r1
 80029b6:	6965      	ldr	r5, [r4, #20]
 80029b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80029c0:	f109 0301 	add.w	r3, r9, #1
 80029c4:	443b      	add	r3, r7
 80029c6:	429d      	cmp	r5, r3
 80029c8:	bf38      	it	cc
 80029ca:	461d      	movcc	r5, r3
 80029cc:	0553      	lsls	r3, r2, #21
 80029ce:	d530      	bpl.n	8002a32 <__ssputs_r+0x9e>
 80029d0:	4629      	mov	r1, r5
 80029d2:	f000 fb37 	bl	8003044 <_malloc_r>
 80029d6:	4606      	mov	r6, r0
 80029d8:	b950      	cbnz	r0, 80029f0 <__ssputs_r+0x5c>
 80029da:	230c      	movs	r3, #12
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	f8ca 3000 	str.w	r3, [sl]
 80029e4:	89a3      	ldrh	r3, [r4, #12]
 80029e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029ea:	81a3      	strh	r3, [r4, #12]
 80029ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029f0:	463a      	mov	r2, r7
 80029f2:	6921      	ldr	r1, [r4, #16]
 80029f4:	f000 fab6 	bl	8002f64 <memcpy>
 80029f8:	89a3      	ldrh	r3, [r4, #12]
 80029fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a02:	81a3      	strh	r3, [r4, #12]
 8002a04:	6126      	str	r6, [r4, #16]
 8002a06:	443e      	add	r6, r7
 8002a08:	6026      	str	r6, [r4, #0]
 8002a0a:	464e      	mov	r6, r9
 8002a0c:	6165      	str	r5, [r4, #20]
 8002a0e:	1bed      	subs	r5, r5, r7
 8002a10:	60a5      	str	r5, [r4, #8]
 8002a12:	454e      	cmp	r6, r9
 8002a14:	d900      	bls.n	8002a18 <__ssputs_r+0x84>
 8002a16:	464e      	mov	r6, r9
 8002a18:	4632      	mov	r2, r6
 8002a1a:	4641      	mov	r1, r8
 8002a1c:	6820      	ldr	r0, [r4, #0]
 8002a1e:	f000 faac 	bl	8002f7a <memmove>
 8002a22:	68a3      	ldr	r3, [r4, #8]
 8002a24:	2000      	movs	r0, #0
 8002a26:	1b9b      	subs	r3, r3, r6
 8002a28:	60a3      	str	r3, [r4, #8]
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	441e      	add	r6, r3
 8002a2e:	6026      	str	r6, [r4, #0]
 8002a30:	e7dc      	b.n	80029ec <__ssputs_r+0x58>
 8002a32:	462a      	mov	r2, r5
 8002a34:	f000 fb60 	bl	80030f8 <_realloc_r>
 8002a38:	4606      	mov	r6, r0
 8002a3a:	2800      	cmp	r0, #0
 8002a3c:	d1e2      	bne.n	8002a04 <__ssputs_r+0x70>
 8002a3e:	6921      	ldr	r1, [r4, #16]
 8002a40:	4650      	mov	r0, sl
 8002a42:	f000 fab3 	bl	8002fac <_free_r>
 8002a46:	e7c8      	b.n	80029da <__ssputs_r+0x46>

08002a48 <_svfiprintf_r>:
 8002a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a4c:	461d      	mov	r5, r3
 8002a4e:	898b      	ldrh	r3, [r1, #12]
 8002a50:	b09d      	sub	sp, #116	; 0x74
 8002a52:	061f      	lsls	r7, r3, #24
 8002a54:	4680      	mov	r8, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	4616      	mov	r6, r2
 8002a5a:	d50f      	bpl.n	8002a7c <_svfiprintf_r+0x34>
 8002a5c:	690b      	ldr	r3, [r1, #16]
 8002a5e:	b96b      	cbnz	r3, 8002a7c <_svfiprintf_r+0x34>
 8002a60:	2140      	movs	r1, #64	; 0x40
 8002a62:	f000 faef 	bl	8003044 <_malloc_r>
 8002a66:	6020      	str	r0, [r4, #0]
 8002a68:	6120      	str	r0, [r4, #16]
 8002a6a:	b928      	cbnz	r0, 8002a78 <_svfiprintf_r+0x30>
 8002a6c:	230c      	movs	r3, #12
 8002a6e:	f8c8 3000 	str.w	r3, [r8]
 8002a72:	f04f 30ff 	mov.w	r0, #4294967295
 8002a76:	e0c8      	b.n	8002c0a <_svfiprintf_r+0x1c2>
 8002a78:	2340      	movs	r3, #64	; 0x40
 8002a7a:	6163      	str	r3, [r4, #20]
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a80:	2320      	movs	r3, #32
 8002a82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a86:	2330      	movs	r3, #48	; 0x30
 8002a88:	f04f 0b01 	mov.w	fp, #1
 8002a8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a90:	9503      	str	r5, [sp, #12]
 8002a92:	4637      	mov	r7, r6
 8002a94:	463d      	mov	r5, r7
 8002a96:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002a9a:	b10b      	cbz	r3, 8002aa0 <_svfiprintf_r+0x58>
 8002a9c:	2b25      	cmp	r3, #37	; 0x25
 8002a9e:	d13e      	bne.n	8002b1e <_svfiprintf_r+0xd6>
 8002aa0:	ebb7 0a06 	subs.w	sl, r7, r6
 8002aa4:	d00b      	beq.n	8002abe <_svfiprintf_r+0x76>
 8002aa6:	4653      	mov	r3, sl
 8002aa8:	4632      	mov	r2, r6
 8002aaa:	4621      	mov	r1, r4
 8002aac:	4640      	mov	r0, r8
 8002aae:	f7ff ff71 	bl	8002994 <__ssputs_r>
 8002ab2:	3001      	adds	r0, #1
 8002ab4:	f000 80a4 	beq.w	8002c00 <_svfiprintf_r+0x1b8>
 8002ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aba:	4453      	add	r3, sl
 8002abc:	9309      	str	r3, [sp, #36]	; 0x24
 8002abe:	783b      	ldrb	r3, [r7, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 809d 	beq.w	8002c00 <_svfiprintf_r+0x1b8>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8002acc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ad0:	9304      	str	r3, [sp, #16]
 8002ad2:	9307      	str	r3, [sp, #28]
 8002ad4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ad8:	931a      	str	r3, [sp, #104]	; 0x68
 8002ada:	462f      	mov	r7, r5
 8002adc:	2205      	movs	r2, #5
 8002ade:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002ae2:	4850      	ldr	r0, [pc, #320]	; (8002c24 <_svfiprintf_r+0x1dc>)
 8002ae4:	f000 fa30 	bl	8002f48 <memchr>
 8002ae8:	9b04      	ldr	r3, [sp, #16]
 8002aea:	b9d0      	cbnz	r0, 8002b22 <_svfiprintf_r+0xda>
 8002aec:	06d9      	lsls	r1, r3, #27
 8002aee:	bf44      	itt	mi
 8002af0:	2220      	movmi	r2, #32
 8002af2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002af6:	071a      	lsls	r2, r3, #28
 8002af8:	bf44      	itt	mi
 8002afa:	222b      	movmi	r2, #43	; 0x2b
 8002afc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b00:	782a      	ldrb	r2, [r5, #0]
 8002b02:	2a2a      	cmp	r2, #42	; 0x2a
 8002b04:	d015      	beq.n	8002b32 <_svfiprintf_r+0xea>
 8002b06:	462f      	mov	r7, r5
 8002b08:	2000      	movs	r0, #0
 8002b0a:	250a      	movs	r5, #10
 8002b0c:	9a07      	ldr	r2, [sp, #28]
 8002b0e:	4639      	mov	r1, r7
 8002b10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b14:	3b30      	subs	r3, #48	; 0x30
 8002b16:	2b09      	cmp	r3, #9
 8002b18:	d94d      	bls.n	8002bb6 <_svfiprintf_r+0x16e>
 8002b1a:	b1b8      	cbz	r0, 8002b4c <_svfiprintf_r+0x104>
 8002b1c:	e00f      	b.n	8002b3e <_svfiprintf_r+0xf6>
 8002b1e:	462f      	mov	r7, r5
 8002b20:	e7b8      	b.n	8002a94 <_svfiprintf_r+0x4c>
 8002b22:	4a40      	ldr	r2, [pc, #256]	; (8002c24 <_svfiprintf_r+0x1dc>)
 8002b24:	463d      	mov	r5, r7
 8002b26:	1a80      	subs	r0, r0, r2
 8002b28:	fa0b f000 	lsl.w	r0, fp, r0
 8002b2c:	4318      	orrs	r0, r3
 8002b2e:	9004      	str	r0, [sp, #16]
 8002b30:	e7d3      	b.n	8002ada <_svfiprintf_r+0x92>
 8002b32:	9a03      	ldr	r2, [sp, #12]
 8002b34:	1d11      	adds	r1, r2, #4
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	9103      	str	r1, [sp, #12]
 8002b3a:	2a00      	cmp	r2, #0
 8002b3c:	db01      	blt.n	8002b42 <_svfiprintf_r+0xfa>
 8002b3e:	9207      	str	r2, [sp, #28]
 8002b40:	e004      	b.n	8002b4c <_svfiprintf_r+0x104>
 8002b42:	4252      	negs	r2, r2
 8002b44:	f043 0302 	orr.w	r3, r3, #2
 8002b48:	9207      	str	r2, [sp, #28]
 8002b4a:	9304      	str	r3, [sp, #16]
 8002b4c:	783b      	ldrb	r3, [r7, #0]
 8002b4e:	2b2e      	cmp	r3, #46	; 0x2e
 8002b50:	d10c      	bne.n	8002b6c <_svfiprintf_r+0x124>
 8002b52:	787b      	ldrb	r3, [r7, #1]
 8002b54:	2b2a      	cmp	r3, #42	; 0x2a
 8002b56:	d133      	bne.n	8002bc0 <_svfiprintf_r+0x178>
 8002b58:	9b03      	ldr	r3, [sp, #12]
 8002b5a:	3702      	adds	r7, #2
 8002b5c:	1d1a      	adds	r2, r3, #4
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	9203      	str	r2, [sp, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bfb8      	it	lt
 8002b66:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b6a:	9305      	str	r3, [sp, #20]
 8002b6c:	4d2e      	ldr	r5, [pc, #184]	; (8002c28 <_svfiprintf_r+0x1e0>)
 8002b6e:	2203      	movs	r2, #3
 8002b70:	7839      	ldrb	r1, [r7, #0]
 8002b72:	4628      	mov	r0, r5
 8002b74:	f000 f9e8 	bl	8002f48 <memchr>
 8002b78:	b138      	cbz	r0, 8002b8a <_svfiprintf_r+0x142>
 8002b7a:	2340      	movs	r3, #64	; 0x40
 8002b7c:	1b40      	subs	r0, r0, r5
 8002b7e:	fa03 f000 	lsl.w	r0, r3, r0
 8002b82:	9b04      	ldr	r3, [sp, #16]
 8002b84:	3701      	adds	r7, #1
 8002b86:	4303      	orrs	r3, r0
 8002b88:	9304      	str	r3, [sp, #16]
 8002b8a:	7839      	ldrb	r1, [r7, #0]
 8002b8c:	2206      	movs	r2, #6
 8002b8e:	4827      	ldr	r0, [pc, #156]	; (8002c2c <_svfiprintf_r+0x1e4>)
 8002b90:	1c7e      	adds	r6, r7, #1
 8002b92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b96:	f000 f9d7 	bl	8002f48 <memchr>
 8002b9a:	2800      	cmp	r0, #0
 8002b9c:	d038      	beq.n	8002c10 <_svfiprintf_r+0x1c8>
 8002b9e:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <_svfiprintf_r+0x1e8>)
 8002ba0:	bb13      	cbnz	r3, 8002be8 <_svfiprintf_r+0x1a0>
 8002ba2:	9b03      	ldr	r3, [sp, #12]
 8002ba4:	3307      	adds	r3, #7
 8002ba6:	f023 0307 	bic.w	r3, r3, #7
 8002baa:	3308      	adds	r3, #8
 8002bac:	9303      	str	r3, [sp, #12]
 8002bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bb0:	444b      	add	r3, r9
 8002bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8002bb4:	e76d      	b.n	8002a92 <_svfiprintf_r+0x4a>
 8002bb6:	fb05 3202 	mla	r2, r5, r2, r3
 8002bba:	2001      	movs	r0, #1
 8002bbc:	460f      	mov	r7, r1
 8002bbe:	e7a6      	b.n	8002b0e <_svfiprintf_r+0xc6>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	250a      	movs	r5, #10
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	3701      	adds	r7, #1
 8002bc8:	9305      	str	r3, [sp, #20]
 8002bca:	4638      	mov	r0, r7
 8002bcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bd0:	3a30      	subs	r2, #48	; 0x30
 8002bd2:	2a09      	cmp	r2, #9
 8002bd4:	d903      	bls.n	8002bde <_svfiprintf_r+0x196>
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0c8      	beq.n	8002b6c <_svfiprintf_r+0x124>
 8002bda:	9105      	str	r1, [sp, #20]
 8002bdc:	e7c6      	b.n	8002b6c <_svfiprintf_r+0x124>
 8002bde:	fb05 2101 	mla	r1, r5, r1, r2
 8002be2:	2301      	movs	r3, #1
 8002be4:	4607      	mov	r7, r0
 8002be6:	e7f0      	b.n	8002bca <_svfiprintf_r+0x182>
 8002be8:	ab03      	add	r3, sp, #12
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	4622      	mov	r2, r4
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <_svfiprintf_r+0x1ec>)
 8002bf0:	a904      	add	r1, sp, #16
 8002bf2:	4640      	mov	r0, r8
 8002bf4:	f3af 8000 	nop.w
 8002bf8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002bfc:	4681      	mov	r9, r0
 8002bfe:	d1d6      	bne.n	8002bae <_svfiprintf_r+0x166>
 8002c00:	89a3      	ldrh	r3, [r4, #12]
 8002c02:	065b      	lsls	r3, r3, #25
 8002c04:	f53f af35 	bmi.w	8002a72 <_svfiprintf_r+0x2a>
 8002c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c0a:	b01d      	add	sp, #116	; 0x74
 8002c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c10:	ab03      	add	r3, sp, #12
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	4622      	mov	r2, r4
 8002c16:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <_svfiprintf_r+0x1ec>)
 8002c18:	a904      	add	r1, sp, #16
 8002c1a:	4640      	mov	r0, r8
 8002c1c:	f000 f882 	bl	8002d24 <_printf_i>
 8002c20:	e7ea      	b.n	8002bf8 <_svfiprintf_r+0x1b0>
 8002c22:	bf00      	nop
 8002c24:	08003247 	.word	0x08003247
 8002c28:	0800324d 	.word	0x0800324d
 8002c2c:	08003251 	.word	0x08003251
 8002c30:	00000000 	.word	0x00000000
 8002c34:	08002995 	.word	0x08002995

08002c38 <_printf_common>:
 8002c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c3c:	4691      	mov	r9, r2
 8002c3e:	461f      	mov	r7, r3
 8002c40:	688a      	ldr	r2, [r1, #8]
 8002c42:	690b      	ldr	r3, [r1, #16]
 8002c44:	4606      	mov	r6, r0
 8002c46:	4293      	cmp	r3, r2
 8002c48:	bfb8      	it	lt
 8002c4a:	4613      	movlt	r3, r2
 8002c4c:	f8c9 3000 	str.w	r3, [r9]
 8002c50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c54:	460c      	mov	r4, r1
 8002c56:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c5a:	b112      	cbz	r2, 8002c62 <_printf_common+0x2a>
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f8c9 3000 	str.w	r3, [r9]
 8002c62:	6823      	ldr	r3, [r4, #0]
 8002c64:	0699      	lsls	r1, r3, #26
 8002c66:	bf42      	ittt	mi
 8002c68:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002c6c:	3302      	addmi	r3, #2
 8002c6e:	f8c9 3000 	strmi.w	r3, [r9]
 8002c72:	6825      	ldr	r5, [r4, #0]
 8002c74:	f015 0506 	ands.w	r5, r5, #6
 8002c78:	d107      	bne.n	8002c8a <_printf_common+0x52>
 8002c7a:	f104 0a19 	add.w	sl, r4, #25
 8002c7e:	68e3      	ldr	r3, [r4, #12]
 8002c80:	f8d9 2000 	ldr.w	r2, [r9]
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	42ab      	cmp	r3, r5
 8002c88:	dc29      	bgt.n	8002cde <_printf_common+0xa6>
 8002c8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002c8e:	6822      	ldr	r2, [r4, #0]
 8002c90:	3300      	adds	r3, #0
 8002c92:	bf18      	it	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	0692      	lsls	r2, r2, #26
 8002c98:	d42e      	bmi.n	8002cf8 <_printf_common+0xc0>
 8002c9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c9e:	4639      	mov	r1, r7
 8002ca0:	4630      	mov	r0, r6
 8002ca2:	47c0      	blx	r8
 8002ca4:	3001      	adds	r0, #1
 8002ca6:	d021      	beq.n	8002cec <_printf_common+0xb4>
 8002ca8:	6823      	ldr	r3, [r4, #0]
 8002caa:	68e5      	ldr	r5, [r4, #12]
 8002cac:	f003 0306 	and.w	r3, r3, #6
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	bf18      	it	ne
 8002cb4:	2500      	movne	r5, #0
 8002cb6:	f8d9 2000 	ldr.w	r2, [r9]
 8002cba:	f04f 0900 	mov.w	r9, #0
 8002cbe:	bf08      	it	eq
 8002cc0:	1aad      	subeq	r5, r5, r2
 8002cc2:	68a3      	ldr	r3, [r4, #8]
 8002cc4:	6922      	ldr	r2, [r4, #16]
 8002cc6:	bf08      	it	eq
 8002cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	bfc4      	itt	gt
 8002cd0:	1a9b      	subgt	r3, r3, r2
 8002cd2:	18ed      	addgt	r5, r5, r3
 8002cd4:	341a      	adds	r4, #26
 8002cd6:	454d      	cmp	r5, r9
 8002cd8:	d11a      	bne.n	8002d10 <_printf_common+0xd8>
 8002cda:	2000      	movs	r0, #0
 8002cdc:	e008      	b.n	8002cf0 <_printf_common+0xb8>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	4652      	mov	r2, sl
 8002ce2:	4639      	mov	r1, r7
 8002ce4:	4630      	mov	r0, r6
 8002ce6:	47c0      	blx	r8
 8002ce8:	3001      	adds	r0, #1
 8002cea:	d103      	bne.n	8002cf4 <_printf_common+0xbc>
 8002cec:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cf4:	3501      	adds	r5, #1
 8002cf6:	e7c2      	b.n	8002c7e <_printf_common+0x46>
 8002cf8:	2030      	movs	r0, #48	; 0x30
 8002cfa:	18e1      	adds	r1, r4, r3
 8002cfc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d06:	4422      	add	r2, r4
 8002d08:	3302      	adds	r3, #2
 8002d0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d0e:	e7c4      	b.n	8002c9a <_printf_common+0x62>
 8002d10:	2301      	movs	r3, #1
 8002d12:	4622      	mov	r2, r4
 8002d14:	4639      	mov	r1, r7
 8002d16:	4630      	mov	r0, r6
 8002d18:	47c0      	blx	r8
 8002d1a:	3001      	adds	r0, #1
 8002d1c:	d0e6      	beq.n	8002cec <_printf_common+0xb4>
 8002d1e:	f109 0901 	add.w	r9, r9, #1
 8002d22:	e7d8      	b.n	8002cd6 <_printf_common+0x9e>

08002d24 <_printf_i>:
 8002d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002d2c:	460c      	mov	r4, r1
 8002d2e:	7e09      	ldrb	r1, [r1, #24]
 8002d30:	b085      	sub	sp, #20
 8002d32:	296e      	cmp	r1, #110	; 0x6e
 8002d34:	4617      	mov	r7, r2
 8002d36:	4606      	mov	r6, r0
 8002d38:	4698      	mov	r8, r3
 8002d3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d3c:	f000 80b3 	beq.w	8002ea6 <_printf_i+0x182>
 8002d40:	d822      	bhi.n	8002d88 <_printf_i+0x64>
 8002d42:	2963      	cmp	r1, #99	; 0x63
 8002d44:	d036      	beq.n	8002db4 <_printf_i+0x90>
 8002d46:	d80a      	bhi.n	8002d5e <_printf_i+0x3a>
 8002d48:	2900      	cmp	r1, #0
 8002d4a:	f000 80b9 	beq.w	8002ec0 <_printf_i+0x19c>
 8002d4e:	2958      	cmp	r1, #88	; 0x58
 8002d50:	f000 8083 	beq.w	8002e5a <_printf_i+0x136>
 8002d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002d5c:	e032      	b.n	8002dc4 <_printf_i+0xa0>
 8002d5e:	2964      	cmp	r1, #100	; 0x64
 8002d60:	d001      	beq.n	8002d66 <_printf_i+0x42>
 8002d62:	2969      	cmp	r1, #105	; 0x69
 8002d64:	d1f6      	bne.n	8002d54 <_printf_i+0x30>
 8002d66:	6820      	ldr	r0, [r4, #0]
 8002d68:	6813      	ldr	r3, [r2, #0]
 8002d6a:	0605      	lsls	r5, r0, #24
 8002d6c:	f103 0104 	add.w	r1, r3, #4
 8002d70:	d52a      	bpl.n	8002dc8 <_printf_i+0xa4>
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6011      	str	r1, [r2, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	da03      	bge.n	8002d82 <_printf_i+0x5e>
 8002d7a:	222d      	movs	r2, #45	; 0x2d
 8002d7c:	425b      	negs	r3, r3
 8002d7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002d82:	486f      	ldr	r0, [pc, #444]	; (8002f40 <_printf_i+0x21c>)
 8002d84:	220a      	movs	r2, #10
 8002d86:	e039      	b.n	8002dfc <_printf_i+0xd8>
 8002d88:	2973      	cmp	r1, #115	; 0x73
 8002d8a:	f000 809d 	beq.w	8002ec8 <_printf_i+0x1a4>
 8002d8e:	d808      	bhi.n	8002da2 <_printf_i+0x7e>
 8002d90:	296f      	cmp	r1, #111	; 0x6f
 8002d92:	d020      	beq.n	8002dd6 <_printf_i+0xb2>
 8002d94:	2970      	cmp	r1, #112	; 0x70
 8002d96:	d1dd      	bne.n	8002d54 <_printf_i+0x30>
 8002d98:	6823      	ldr	r3, [r4, #0]
 8002d9a:	f043 0320 	orr.w	r3, r3, #32
 8002d9e:	6023      	str	r3, [r4, #0]
 8002da0:	e003      	b.n	8002daa <_printf_i+0x86>
 8002da2:	2975      	cmp	r1, #117	; 0x75
 8002da4:	d017      	beq.n	8002dd6 <_printf_i+0xb2>
 8002da6:	2978      	cmp	r1, #120	; 0x78
 8002da8:	d1d4      	bne.n	8002d54 <_printf_i+0x30>
 8002daa:	2378      	movs	r3, #120	; 0x78
 8002dac:	4865      	ldr	r0, [pc, #404]	; (8002f44 <_printf_i+0x220>)
 8002dae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002db2:	e055      	b.n	8002e60 <_printf_i+0x13c>
 8002db4:	6813      	ldr	r3, [r2, #0]
 8002db6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dba:	1d19      	adds	r1, r3, #4
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6011      	str	r1, [r2, #0]
 8002dc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e08c      	b.n	8002ee2 <_printf_i+0x1be>
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002dce:	6011      	str	r1, [r2, #0]
 8002dd0:	bf18      	it	ne
 8002dd2:	b21b      	sxthne	r3, r3
 8002dd4:	e7cf      	b.n	8002d76 <_printf_i+0x52>
 8002dd6:	6813      	ldr	r3, [r2, #0]
 8002dd8:	6825      	ldr	r5, [r4, #0]
 8002dda:	1d18      	adds	r0, r3, #4
 8002ddc:	6010      	str	r0, [r2, #0]
 8002dde:	0628      	lsls	r0, r5, #24
 8002de0:	d501      	bpl.n	8002de6 <_printf_i+0xc2>
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	e002      	b.n	8002dec <_printf_i+0xc8>
 8002de6:	0668      	lsls	r0, r5, #25
 8002de8:	d5fb      	bpl.n	8002de2 <_printf_i+0xbe>
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	296f      	cmp	r1, #111	; 0x6f
 8002dee:	bf14      	ite	ne
 8002df0:	220a      	movne	r2, #10
 8002df2:	2208      	moveq	r2, #8
 8002df4:	4852      	ldr	r0, [pc, #328]	; (8002f40 <_printf_i+0x21c>)
 8002df6:	2100      	movs	r1, #0
 8002df8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002dfc:	6865      	ldr	r5, [r4, #4]
 8002dfe:	2d00      	cmp	r5, #0
 8002e00:	60a5      	str	r5, [r4, #8]
 8002e02:	f2c0 8095 	blt.w	8002f30 <_printf_i+0x20c>
 8002e06:	6821      	ldr	r1, [r4, #0]
 8002e08:	f021 0104 	bic.w	r1, r1, #4
 8002e0c:	6021      	str	r1, [r4, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d13d      	bne.n	8002e8e <_printf_i+0x16a>
 8002e12:	2d00      	cmp	r5, #0
 8002e14:	f040 808e 	bne.w	8002f34 <_printf_i+0x210>
 8002e18:	4665      	mov	r5, ip
 8002e1a:	2a08      	cmp	r2, #8
 8002e1c:	d10b      	bne.n	8002e36 <_printf_i+0x112>
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	07db      	lsls	r3, r3, #31
 8002e22:	d508      	bpl.n	8002e36 <_printf_i+0x112>
 8002e24:	6923      	ldr	r3, [r4, #16]
 8002e26:	6862      	ldr	r2, [r4, #4]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	bfde      	ittt	le
 8002e2c:	2330      	movle	r3, #48	; 0x30
 8002e2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e36:	ebac 0305 	sub.w	r3, ip, r5
 8002e3a:	6123      	str	r3, [r4, #16]
 8002e3c:	f8cd 8000 	str.w	r8, [sp]
 8002e40:	463b      	mov	r3, r7
 8002e42:	aa03      	add	r2, sp, #12
 8002e44:	4621      	mov	r1, r4
 8002e46:	4630      	mov	r0, r6
 8002e48:	f7ff fef6 	bl	8002c38 <_printf_common>
 8002e4c:	3001      	adds	r0, #1
 8002e4e:	d14d      	bne.n	8002eec <_printf_i+0x1c8>
 8002e50:	f04f 30ff 	mov.w	r0, #4294967295
 8002e54:	b005      	add	sp, #20
 8002e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e5a:	4839      	ldr	r0, [pc, #228]	; (8002f40 <_printf_i+0x21c>)
 8002e5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002e60:	6813      	ldr	r3, [r2, #0]
 8002e62:	6821      	ldr	r1, [r4, #0]
 8002e64:	1d1d      	adds	r5, r3, #4
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6015      	str	r5, [r2, #0]
 8002e6a:	060a      	lsls	r2, r1, #24
 8002e6c:	d50b      	bpl.n	8002e86 <_printf_i+0x162>
 8002e6e:	07ca      	lsls	r2, r1, #31
 8002e70:	bf44      	itt	mi
 8002e72:	f041 0120 	orrmi.w	r1, r1, #32
 8002e76:	6021      	strmi	r1, [r4, #0]
 8002e78:	b91b      	cbnz	r3, 8002e82 <_printf_i+0x15e>
 8002e7a:	6822      	ldr	r2, [r4, #0]
 8002e7c:	f022 0220 	bic.w	r2, r2, #32
 8002e80:	6022      	str	r2, [r4, #0]
 8002e82:	2210      	movs	r2, #16
 8002e84:	e7b7      	b.n	8002df6 <_printf_i+0xd2>
 8002e86:	064d      	lsls	r5, r1, #25
 8002e88:	bf48      	it	mi
 8002e8a:	b29b      	uxthmi	r3, r3
 8002e8c:	e7ef      	b.n	8002e6e <_printf_i+0x14a>
 8002e8e:	4665      	mov	r5, ip
 8002e90:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e94:	fb02 3311 	mls	r3, r2, r1, r3
 8002e98:	5cc3      	ldrb	r3, [r0, r3]
 8002e9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	2900      	cmp	r1, #0
 8002ea2:	d1f5      	bne.n	8002e90 <_printf_i+0x16c>
 8002ea4:	e7b9      	b.n	8002e1a <_printf_i+0xf6>
 8002ea6:	6813      	ldr	r3, [r2, #0]
 8002ea8:	6825      	ldr	r5, [r4, #0]
 8002eaa:	1d18      	adds	r0, r3, #4
 8002eac:	6961      	ldr	r1, [r4, #20]
 8002eae:	6010      	str	r0, [r2, #0]
 8002eb0:	0628      	lsls	r0, r5, #24
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	d501      	bpl.n	8002eba <_printf_i+0x196>
 8002eb6:	6019      	str	r1, [r3, #0]
 8002eb8:	e002      	b.n	8002ec0 <_printf_i+0x19c>
 8002eba:	066a      	lsls	r2, r5, #25
 8002ebc:	d5fb      	bpl.n	8002eb6 <_printf_i+0x192>
 8002ebe:	8019      	strh	r1, [r3, #0]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	4665      	mov	r5, ip
 8002ec4:	6123      	str	r3, [r4, #16]
 8002ec6:	e7b9      	b.n	8002e3c <_printf_i+0x118>
 8002ec8:	6813      	ldr	r3, [r2, #0]
 8002eca:	1d19      	adds	r1, r3, #4
 8002ecc:	6011      	str	r1, [r2, #0]
 8002ece:	681d      	ldr	r5, [r3, #0]
 8002ed0:	6862      	ldr	r2, [r4, #4]
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4628      	mov	r0, r5
 8002ed6:	f000 f837 	bl	8002f48 <memchr>
 8002eda:	b108      	cbz	r0, 8002ee0 <_printf_i+0x1bc>
 8002edc:	1b40      	subs	r0, r0, r5
 8002ede:	6060      	str	r0, [r4, #4]
 8002ee0:	6863      	ldr	r3, [r4, #4]
 8002ee2:	6123      	str	r3, [r4, #16]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eea:	e7a7      	b.n	8002e3c <_printf_i+0x118>
 8002eec:	6923      	ldr	r3, [r4, #16]
 8002eee:	462a      	mov	r2, r5
 8002ef0:	4639      	mov	r1, r7
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	47c0      	blx	r8
 8002ef6:	3001      	adds	r0, #1
 8002ef8:	d0aa      	beq.n	8002e50 <_printf_i+0x12c>
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	079b      	lsls	r3, r3, #30
 8002efe:	d413      	bmi.n	8002f28 <_printf_i+0x204>
 8002f00:	68e0      	ldr	r0, [r4, #12]
 8002f02:	9b03      	ldr	r3, [sp, #12]
 8002f04:	4298      	cmp	r0, r3
 8002f06:	bfb8      	it	lt
 8002f08:	4618      	movlt	r0, r3
 8002f0a:	e7a3      	b.n	8002e54 <_printf_i+0x130>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	464a      	mov	r2, r9
 8002f10:	4639      	mov	r1, r7
 8002f12:	4630      	mov	r0, r6
 8002f14:	47c0      	blx	r8
 8002f16:	3001      	adds	r0, #1
 8002f18:	d09a      	beq.n	8002e50 <_printf_i+0x12c>
 8002f1a:	3501      	adds	r5, #1
 8002f1c:	68e3      	ldr	r3, [r4, #12]
 8002f1e:	9a03      	ldr	r2, [sp, #12]
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	42ab      	cmp	r3, r5
 8002f24:	dcf2      	bgt.n	8002f0c <_printf_i+0x1e8>
 8002f26:	e7eb      	b.n	8002f00 <_printf_i+0x1dc>
 8002f28:	2500      	movs	r5, #0
 8002f2a:	f104 0919 	add.w	r9, r4, #25
 8002f2e:	e7f5      	b.n	8002f1c <_printf_i+0x1f8>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1ac      	bne.n	8002e8e <_printf_i+0x16a>
 8002f34:	7803      	ldrb	r3, [r0, #0]
 8002f36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f3e:	e76c      	b.n	8002e1a <_printf_i+0xf6>
 8002f40:	08003258 	.word	0x08003258
 8002f44:	08003269 	.word	0x08003269

08002f48 <memchr>:
 8002f48:	b510      	push	{r4, lr}
 8002f4a:	b2c9      	uxtb	r1, r1
 8002f4c:	4402      	add	r2, r0
 8002f4e:	4290      	cmp	r0, r2
 8002f50:	4603      	mov	r3, r0
 8002f52:	d101      	bne.n	8002f58 <memchr+0x10>
 8002f54:	2300      	movs	r3, #0
 8002f56:	e003      	b.n	8002f60 <memchr+0x18>
 8002f58:	781c      	ldrb	r4, [r3, #0]
 8002f5a:	3001      	adds	r0, #1
 8002f5c:	428c      	cmp	r4, r1
 8002f5e:	d1f6      	bne.n	8002f4e <memchr+0x6>
 8002f60:	4618      	mov	r0, r3
 8002f62:	bd10      	pop	{r4, pc}

08002f64 <memcpy>:
 8002f64:	b510      	push	{r4, lr}
 8002f66:	1e43      	subs	r3, r0, #1
 8002f68:	440a      	add	r2, r1
 8002f6a:	4291      	cmp	r1, r2
 8002f6c:	d100      	bne.n	8002f70 <memcpy+0xc>
 8002f6e:	bd10      	pop	{r4, pc}
 8002f70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f78:	e7f7      	b.n	8002f6a <memcpy+0x6>

08002f7a <memmove>:
 8002f7a:	4288      	cmp	r0, r1
 8002f7c:	b510      	push	{r4, lr}
 8002f7e:	eb01 0302 	add.w	r3, r1, r2
 8002f82:	d807      	bhi.n	8002f94 <memmove+0x1a>
 8002f84:	1e42      	subs	r2, r0, #1
 8002f86:	4299      	cmp	r1, r3
 8002f88:	d00a      	beq.n	8002fa0 <memmove+0x26>
 8002f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f8e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002f92:	e7f8      	b.n	8002f86 <memmove+0xc>
 8002f94:	4283      	cmp	r3, r0
 8002f96:	d9f5      	bls.n	8002f84 <memmove+0xa>
 8002f98:	1881      	adds	r1, r0, r2
 8002f9a:	1ad2      	subs	r2, r2, r3
 8002f9c:	42d3      	cmn	r3, r2
 8002f9e:	d100      	bne.n	8002fa2 <memmove+0x28>
 8002fa0:	bd10      	pop	{r4, pc}
 8002fa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fa6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002faa:	e7f7      	b.n	8002f9c <memmove+0x22>

08002fac <_free_r>:
 8002fac:	b538      	push	{r3, r4, r5, lr}
 8002fae:	4605      	mov	r5, r0
 8002fb0:	2900      	cmp	r1, #0
 8002fb2:	d043      	beq.n	800303c <_free_r+0x90>
 8002fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fb8:	1f0c      	subs	r4, r1, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bfb8      	it	lt
 8002fbe:	18e4      	addlt	r4, r4, r3
 8002fc0:	f000 f8d0 	bl	8003164 <__malloc_lock>
 8002fc4:	4a1e      	ldr	r2, [pc, #120]	; (8003040 <_free_r+0x94>)
 8002fc6:	6813      	ldr	r3, [r2, #0]
 8002fc8:	4610      	mov	r0, r2
 8002fca:	b933      	cbnz	r3, 8002fda <_free_r+0x2e>
 8002fcc:	6063      	str	r3, [r4, #4]
 8002fce:	6014      	str	r4, [r2, #0]
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fd6:	f000 b8c6 	b.w	8003166 <__malloc_unlock>
 8002fda:	42a3      	cmp	r3, r4
 8002fdc:	d90b      	bls.n	8002ff6 <_free_r+0x4a>
 8002fde:	6821      	ldr	r1, [r4, #0]
 8002fe0:	1862      	adds	r2, r4, r1
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	bf01      	itttt	eq
 8002fe6:	681a      	ldreq	r2, [r3, #0]
 8002fe8:	685b      	ldreq	r3, [r3, #4]
 8002fea:	1852      	addeq	r2, r2, r1
 8002fec:	6022      	streq	r2, [r4, #0]
 8002fee:	6063      	str	r3, [r4, #4]
 8002ff0:	6004      	str	r4, [r0, #0]
 8002ff2:	e7ed      	b.n	8002fd0 <_free_r+0x24>
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	b10a      	cbz	r2, 8002ffe <_free_r+0x52>
 8002ffa:	42a2      	cmp	r2, r4
 8002ffc:	d9fa      	bls.n	8002ff4 <_free_r+0x48>
 8002ffe:	6819      	ldr	r1, [r3, #0]
 8003000:	1858      	adds	r0, r3, r1
 8003002:	42a0      	cmp	r0, r4
 8003004:	d10b      	bne.n	800301e <_free_r+0x72>
 8003006:	6820      	ldr	r0, [r4, #0]
 8003008:	4401      	add	r1, r0
 800300a:	1858      	adds	r0, r3, r1
 800300c:	4282      	cmp	r2, r0
 800300e:	6019      	str	r1, [r3, #0]
 8003010:	d1de      	bne.n	8002fd0 <_free_r+0x24>
 8003012:	6810      	ldr	r0, [r2, #0]
 8003014:	6852      	ldr	r2, [r2, #4]
 8003016:	4401      	add	r1, r0
 8003018:	6019      	str	r1, [r3, #0]
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	e7d8      	b.n	8002fd0 <_free_r+0x24>
 800301e:	d902      	bls.n	8003026 <_free_r+0x7a>
 8003020:	230c      	movs	r3, #12
 8003022:	602b      	str	r3, [r5, #0]
 8003024:	e7d4      	b.n	8002fd0 <_free_r+0x24>
 8003026:	6820      	ldr	r0, [r4, #0]
 8003028:	1821      	adds	r1, r4, r0
 800302a:	428a      	cmp	r2, r1
 800302c:	bf01      	itttt	eq
 800302e:	6811      	ldreq	r1, [r2, #0]
 8003030:	6852      	ldreq	r2, [r2, #4]
 8003032:	1809      	addeq	r1, r1, r0
 8003034:	6021      	streq	r1, [r4, #0]
 8003036:	6062      	str	r2, [r4, #4]
 8003038:	605c      	str	r4, [r3, #4]
 800303a:	e7c9      	b.n	8002fd0 <_free_r+0x24>
 800303c:	bd38      	pop	{r3, r4, r5, pc}
 800303e:	bf00      	nop
 8003040:	200000a0 	.word	0x200000a0

08003044 <_malloc_r>:
 8003044:	b570      	push	{r4, r5, r6, lr}
 8003046:	1ccd      	adds	r5, r1, #3
 8003048:	f025 0503 	bic.w	r5, r5, #3
 800304c:	3508      	adds	r5, #8
 800304e:	2d0c      	cmp	r5, #12
 8003050:	bf38      	it	cc
 8003052:	250c      	movcc	r5, #12
 8003054:	2d00      	cmp	r5, #0
 8003056:	4606      	mov	r6, r0
 8003058:	db01      	blt.n	800305e <_malloc_r+0x1a>
 800305a:	42a9      	cmp	r1, r5
 800305c:	d903      	bls.n	8003066 <_malloc_r+0x22>
 800305e:	230c      	movs	r3, #12
 8003060:	6033      	str	r3, [r6, #0]
 8003062:	2000      	movs	r0, #0
 8003064:	bd70      	pop	{r4, r5, r6, pc}
 8003066:	f000 f87d 	bl	8003164 <__malloc_lock>
 800306a:	4a21      	ldr	r2, [pc, #132]	; (80030f0 <_malloc_r+0xac>)
 800306c:	6814      	ldr	r4, [r2, #0]
 800306e:	4621      	mov	r1, r4
 8003070:	b991      	cbnz	r1, 8003098 <_malloc_r+0x54>
 8003072:	4c20      	ldr	r4, [pc, #128]	; (80030f4 <_malloc_r+0xb0>)
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	b91b      	cbnz	r3, 8003080 <_malloc_r+0x3c>
 8003078:	4630      	mov	r0, r6
 800307a:	f000 f863 	bl	8003144 <_sbrk_r>
 800307e:	6020      	str	r0, [r4, #0]
 8003080:	4629      	mov	r1, r5
 8003082:	4630      	mov	r0, r6
 8003084:	f000 f85e 	bl	8003144 <_sbrk_r>
 8003088:	1c43      	adds	r3, r0, #1
 800308a:	d124      	bne.n	80030d6 <_malloc_r+0x92>
 800308c:	230c      	movs	r3, #12
 800308e:	4630      	mov	r0, r6
 8003090:	6033      	str	r3, [r6, #0]
 8003092:	f000 f868 	bl	8003166 <__malloc_unlock>
 8003096:	e7e4      	b.n	8003062 <_malloc_r+0x1e>
 8003098:	680b      	ldr	r3, [r1, #0]
 800309a:	1b5b      	subs	r3, r3, r5
 800309c:	d418      	bmi.n	80030d0 <_malloc_r+0x8c>
 800309e:	2b0b      	cmp	r3, #11
 80030a0:	d90f      	bls.n	80030c2 <_malloc_r+0x7e>
 80030a2:	600b      	str	r3, [r1, #0]
 80030a4:	18cc      	adds	r4, r1, r3
 80030a6:	50cd      	str	r5, [r1, r3]
 80030a8:	4630      	mov	r0, r6
 80030aa:	f000 f85c 	bl	8003166 <__malloc_unlock>
 80030ae:	f104 000b 	add.w	r0, r4, #11
 80030b2:	1d23      	adds	r3, r4, #4
 80030b4:	f020 0007 	bic.w	r0, r0, #7
 80030b8:	1ac3      	subs	r3, r0, r3
 80030ba:	d0d3      	beq.n	8003064 <_malloc_r+0x20>
 80030bc:	425a      	negs	r2, r3
 80030be:	50e2      	str	r2, [r4, r3]
 80030c0:	e7d0      	b.n	8003064 <_malloc_r+0x20>
 80030c2:	684b      	ldr	r3, [r1, #4]
 80030c4:	428c      	cmp	r4, r1
 80030c6:	bf16      	itet	ne
 80030c8:	6063      	strne	r3, [r4, #4]
 80030ca:	6013      	streq	r3, [r2, #0]
 80030cc:	460c      	movne	r4, r1
 80030ce:	e7eb      	b.n	80030a8 <_malloc_r+0x64>
 80030d0:	460c      	mov	r4, r1
 80030d2:	6849      	ldr	r1, [r1, #4]
 80030d4:	e7cc      	b.n	8003070 <_malloc_r+0x2c>
 80030d6:	1cc4      	adds	r4, r0, #3
 80030d8:	f024 0403 	bic.w	r4, r4, #3
 80030dc:	42a0      	cmp	r0, r4
 80030de:	d005      	beq.n	80030ec <_malloc_r+0xa8>
 80030e0:	1a21      	subs	r1, r4, r0
 80030e2:	4630      	mov	r0, r6
 80030e4:	f000 f82e 	bl	8003144 <_sbrk_r>
 80030e8:	3001      	adds	r0, #1
 80030ea:	d0cf      	beq.n	800308c <_malloc_r+0x48>
 80030ec:	6025      	str	r5, [r4, #0]
 80030ee:	e7db      	b.n	80030a8 <_malloc_r+0x64>
 80030f0:	200000a0 	.word	0x200000a0
 80030f4:	200000a4 	.word	0x200000a4

080030f8 <_realloc_r>:
 80030f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fa:	4607      	mov	r7, r0
 80030fc:	4614      	mov	r4, r2
 80030fe:	460e      	mov	r6, r1
 8003100:	b921      	cbnz	r1, 800310c <_realloc_r+0x14>
 8003102:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003106:	4611      	mov	r1, r2
 8003108:	f7ff bf9c 	b.w	8003044 <_malloc_r>
 800310c:	b922      	cbnz	r2, 8003118 <_realloc_r+0x20>
 800310e:	f7ff ff4d 	bl	8002fac <_free_r>
 8003112:	4625      	mov	r5, r4
 8003114:	4628      	mov	r0, r5
 8003116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003118:	f000 f826 	bl	8003168 <_malloc_usable_size_r>
 800311c:	42a0      	cmp	r0, r4
 800311e:	d20f      	bcs.n	8003140 <_realloc_r+0x48>
 8003120:	4621      	mov	r1, r4
 8003122:	4638      	mov	r0, r7
 8003124:	f7ff ff8e 	bl	8003044 <_malloc_r>
 8003128:	4605      	mov	r5, r0
 800312a:	2800      	cmp	r0, #0
 800312c:	d0f2      	beq.n	8003114 <_realloc_r+0x1c>
 800312e:	4631      	mov	r1, r6
 8003130:	4622      	mov	r2, r4
 8003132:	f7ff ff17 	bl	8002f64 <memcpy>
 8003136:	4631      	mov	r1, r6
 8003138:	4638      	mov	r0, r7
 800313a:	f7ff ff37 	bl	8002fac <_free_r>
 800313e:	e7e9      	b.n	8003114 <_realloc_r+0x1c>
 8003140:	4635      	mov	r5, r6
 8003142:	e7e7      	b.n	8003114 <_realloc_r+0x1c>

08003144 <_sbrk_r>:
 8003144:	b538      	push	{r3, r4, r5, lr}
 8003146:	2300      	movs	r3, #0
 8003148:	4c05      	ldr	r4, [pc, #20]	; (8003160 <_sbrk_r+0x1c>)
 800314a:	4605      	mov	r5, r0
 800314c:	4608      	mov	r0, r1
 800314e:	6023      	str	r3, [r4, #0]
 8003150:	f7fd fe34 	bl	8000dbc <_sbrk>
 8003154:	1c43      	adds	r3, r0, #1
 8003156:	d102      	bne.n	800315e <_sbrk_r+0x1a>
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	b103      	cbz	r3, 800315e <_sbrk_r+0x1a>
 800315c:	602b      	str	r3, [r5, #0]
 800315e:	bd38      	pop	{r3, r4, r5, pc}
 8003160:	200001b4 	.word	0x200001b4

08003164 <__malloc_lock>:
 8003164:	4770      	bx	lr

08003166 <__malloc_unlock>:
 8003166:	4770      	bx	lr

08003168 <_malloc_usable_size_r>:
 8003168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800316c:	1f18      	subs	r0, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	bfbc      	itt	lt
 8003172:	580b      	ldrlt	r3, [r1, r0]
 8003174:	18c0      	addlt	r0, r0, r3
 8003176:	4770      	bx	lr

08003178 <_init>:
 8003178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317a:	bf00      	nop
 800317c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317e:	bc08      	pop	{r3}
 8003180:	469e      	mov	lr, r3
 8003182:	4770      	bx	lr

08003184 <_fini>:
 8003184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003186:	bf00      	nop
 8003188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318a:	bc08      	pop	{r3}
 800318c:	469e      	mov	lr, r3
 800318e:	4770      	bx	lr
